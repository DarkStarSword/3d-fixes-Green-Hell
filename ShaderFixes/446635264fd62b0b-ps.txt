// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 446635264fd62b0b-ps.txt
// 3DMigoto: 446635264fd62b0b |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 199 5 14
//   undeciphered1a: 15
//   Keywords { "FOG_DISTANCE_ON" "FOG_VOID_BOX" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 560
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogSkyColor]
//   Vector 320 [_SunPosition] 3
//   Vector 336 [_SunDir] 3
//   Vector 352 [_SunColor] 3
//   Vector 368 [_FogScatteringData]
//   Vector 384 [_FogScatteringData2]
//   Vector 480 [_VolumetricFogSunWorldPos]
//   Vector 496 [_VolumetricFogSunShadowsData]
//   Float 512 [_Jitter]
//   Matrix 416 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:55:42 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[33], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 17
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 446635264fd62b0b-ps.txt

mul r15.w, -r15.x, r15.y
mad r16.xyz, -r15.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r16.y
mov r1.xz, r16.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r3.xy, v1.xyxx, cb1[6].xyxx
dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xyxx
frc r0.w, r0.w
add r0.w, r0.w, l(-0.500000)
lt r1.w, cb0[13].y, r1.y
lt r3.x, cb0[13].y, r0.y
and r1.w, r1.w, r3.x
lt r3.x, r1.y, r0.z
lt r3.y, r0.y, r0.z
and r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
if_z r1.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r1.w, r1.w
  dp2 r2.y, r3.xzxx, r3.xzxx
  sqrt r2.y, r2.y
  div r4.xy, r3.xzxx, r2.yyyy
  div r2.y, r2.y, r3.y
  max r2.w, r0.z, r1.y
  min r5.z, r2.w, cb0[13].y
  add r2.w, r1.y, -r5.z
  mul r2.w, r2.w, r2.y
  mad r5.xy, -r4.xyxx, r2.wwww, r16.xzxx
  min r2.w, r1.w, cb0[12].z
  add r6.xyz, -r1.xyzx, r5.xzyx
  dp3 r1.x, r6.xyzx, r6.xyzx
  sqrt r1.x, r1.x
  lt r1.z, r1.x, r2.w
  if_nz r1.z
    lt r1.z, l(0.000000), r2.y
    lt r3.w, l(-0.500000), r0.y
    and r1.z, r1.z, r3.w
    lt r3.w, r2.y, l(0.000000)
    lt r4.z, r0.y, l(0.500000)
    and r3.w, r3.w, r4.z
    and r0.z, r0.z, r3.w
    movc r6.y, r1.z, cb0[13].y, r0.z
    add r0.z, -r1.y, r6.y
    mul r0.z, r0.z, r2.y
    mad r6.xz, -r4.xxyx, r0.zzzz, r16.xxzx
    add r4.xyz, r5.xzyx, -r6.xyzx
    dp3 r0.z, r4.xyzx, r4.xyzx
    sqrt r0.z, r0.z
    add r1.y, -r1.x, r2.w
    min r0.z, r0.z, r1.y
    lt r1.z, l(0.000000), r0.z
    if_nz r1.z
      mul r4.xyz, r3.xyzx, r0.zzzz
      div r4.xyz, r4.xyzx, r1.wwww
      add r4.xyz, r4.xyzx, r5.xzyx
      add r4.xyz, -r4.xyzx, cb0[17].xyzx
      mul r4.xyz, |r4.xyzx|, cb0[18].xyzx
      max r1.z, r4.y, r4.x
      max r1.z, r4.z, r1.z
      add r1.z, r1.z, l(-1.000000)
      mad_sat r1.z, cb0[18].w, r1.z, l(1.000000)
      lt r2.y, l(0.000000), r1.z
      if_nz r2.y
        log r2.y, r0.z
        mul r2.y, r2.y, l(0.693147182)
        max r2.y, r2.y, l(0.000000)
        mad r2.y, r2.y, cb0[15].x, l(0.100000)
        mul r2.y, r2.y, cb0[13].z
        mul_sat r2.w, r2.w, cb0[15].y
        mul r2.y, r2.w, r2.y
        max r2.y, r2.y, l(0.010000)
        mul r4.xyz, r2.yyyy, r3.xyzx
        div r4.xyz, r4.xyzx, r1.wwww
        div r2.y, r0.z, r2.y
        mul r6.xz, r4.xxzx, cb0[13].wwww
        mul r2.w, cb0[13].z, cb0[13].y
        div r6.y, r4.y, r2.w
        add r4.xy, r5.xyxx, cb0[14].xzxx
        mul r4.xy, r4.xyxx, cb0[13].wwww
        div r2.w, r5.z, r2.w
        add r4.zw, cb0[14].xxxz, r16.xxxz
        frc r3.w, r0.w
        mad r2.y, r3.w, cb0[32].x, r2.y
        add r5.w, r5.z, cb0[13].x
        mul r7.xyz, r5.wwww, cb0[27].xywx
        mad r7.xyz, cb0[26].xywx, r5.xxxx, r7.xyzx
        mad r7.xyz, cb0[28].xywx, r5.yyyy, r7.xyzx
        add r7.xyz, r7.xyzx, cb0[29].xywx
        div r7.xy, r7.xyxx, r7.zzzz
        mad r7.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        mad r3.w, r0.w, cb0[31].y, l(1.000000)
        mul r3.w, r0.z, r3.w
        mul r8.xyz, r3.xyzx, r3.wwww
        div r8.xyz, r8.xyzx, r1.wwww
        add r8.xyz, r5.xwyx, r8.xyzx
        mul r9.xyz, r8.yyyy, cb0[27].xywx
        mad r9.xyz, cb0[26].xywx, r8.xxxx, r9.xyzx
        mad r9.xyz, cb0[28].xywx, r8.zzzz, r9.xyzx
        add r9.xyz, r9.xyzx, cb0[29].xywx
        div r7.zw, r9.xxxy, r9.zzzz
        mad r7.zw, r7.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r3.w, -r1.x, cb0[30].w
        mul_sat r3.w, r3.w, l(0.0285714287)
        mul r3.w, r3.w, cb0[31].x
        div r5.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
        ge r0.z, r0.z, r1.y
        and r0.z, r0.z, l(0x3f800000)
        add r7.xy, -r7.zwzz, r7.xyxx
        add r5.xyw, r5.xwxy, -r8.xyxz
        mov r9.xyzw, l(0,0,0,0)
        mov r11.xz, r4.xxyx
        mov r1.y, r2.y
        mov r11.y, r2.w
        mov r10.xyzw, l(0,0,0,0)
        loop
          ge r6.w, l(1.000000), r1.y
          breakc_nz r6.w
          sample_l r12.xyzw, r11.xzxx, t2.xyzw, s1, l(0.000000)
          add r6.w, -|r11.y|, r12.w
          mad r13.xy, r4.zwzz, cb0[13].wwww, -r11.xzxx
          dp2 r8.w, r13.xyxx, r13.xyxx
          add r8.w, -r8.w, cb0[12].x
          max r8.w, r8.w, l(0.000000)
          mad r6.w, -r8.w, cb0[12].y, r6.w
          lt r8.w, l(0.000000), r6.w
          if_nz r8.w
            add r8.w, -r6.w, l(1.000000)
            mul r13.xyz, r8.wwww, cb0[11].xyzx
            mul r13.w, r6.w, l(0.400000)
            mul r6.w, r5.z, r1.y
            mad r14.xy, r6.wwww, r7.xyxx, r7.zwzz
            sample_l r14.xyzw, r14.xyxx, t3.xyzw, s5, l(0.000000)
            dp4 r8.w, r14.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
            mad r14.xyz, r6.wwww, r5.xywx, r8.xyzx
            add r14.xyz, r14.xyzx, -cb0[30].xyzx
            dp3 r6.w, r14.xyzx, r14.xyzx
            sqrt r6.w, r6.w
            add_sat r6.w, -r6.w, r8.w
            mul r8.w, r3.w, r10.w
            add r6.w, r6.w, l(-1.000000)
            mad r8.w, r8.w, r6.w, l(1.000000)
            mul r12.xyz, r8.wwww, r12.xyzx
            mad r6.w, cb0[31].z, r6.w, l(1.000000)
            mul r13.xyzw, r6.wwww, r13.xyzw
            mul r12.xyz, r12.xyzx, r13.wwww
            mul r13.xyz, r12.xyzx, r13.xyzx
            add r6.w, -r10.w, l(1.000000)
            mad r12.xyzw, r13.xyzw, r6.wwww, r10.xyzw
            lt r6.w, l(0.990000), r12.w
            if_nz r6.w
              mov r9.xyzw, r13.xyzw
              mov r10.xyzw, r12.xyzw
              break
            endif
            mov r9.xyzw, r13.xyzw
            mov r10.xyzw, r12.xyzw
          endif
          add r1.y, r1.y, l(-1.000000)
          add r11.xyz, r6.xyzx, r11.xyzx
        endloop
        lt r2.y, r10.w, l(0.990000)
        and r2.y, r2.y, l(0x3f800000)
        add r2.w, -r10.w, l(1.000000)
        mul r0.z, r0.z, r1.y
        mul r1.y, r2.w, r2.y
        mul r0.z, r0.z, r1.y
        mad r4.xyzw, r9.xyzw, r0.zzzz, r10.xyzw
        div r3.xyz, r3.xyzx, r1.wwww
        dp3 r0.z, r3.xyzx, cb0[21].xyzx
        mul r0.z, r0.z, cb0[24].w
        max r0.z, r0.z, l(0.000000)
        mul r0.z, r0.z, r0.z
        mul r0.z, r0.z, r0.z
        mul r0.z, r0.z, r0.z
        mul r0.z, r4.w, r0.z
        add r3.xyz, -r4.xyzx, cb0[22].xyzx
        mad r4.xyz, r0.zzzz, r3.xyzx, r4.xyzx
        mul r3.xyzw, r4.xyzw, cb0[10].wwww
        add r0.z, -r1.x, cb0[12].z
        div_sat r0.z, r0.z, cb0[12].w
        mul r0.z, r0.z, r0.z
        mul r3.xyzw, r0.zzzz, r3.xyzw
        mul r1.xyzw, r1.zzzz, r3.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.z, r0.w, cb0[15].w
mad r2.y, r0.w, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
sample r5.xyzw, v1.zwzz, t5.xyzw, s4
add r1.xyz, -r4.xyzx, r5.xyzx
mad r1.xyz, r3.wwww, r1.xyzx, r4.xyzx
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r2.xz, r0.xxxx, r2.xxzx
  mad r2.xz, r2.xxzx, cb0[13].wwww, cb0[16].zzzz
  sample r4.xyzw, r2.xzxx, t2.xyzw, s1
  mad r0.y, r0.z, l(3.000000), r4.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r2.xzw, -r1.xxyz, cb0[19].xxyz
  mad r1.xyz, r0.xxxx, r2.xzwx, r1.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyz, r1.xyzx, r0.xxxx, r3.xyzx
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[20].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[20].y
add r2.x, -v1.x, cb0[20].x
add r2.y, r1.x, -v1.y
mad r0.w, r0.w, cb0[24].z, l(1.000000)
mul r0.w, r0.w, cb0[23].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[24].x
mov r3.x, cb0[23].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.wwww, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[23].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[24].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[23].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used