// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 1b2df0e07034aa3f-ps.txt
// 3DMigoto: 1b2df0e07034aa3f |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 176 3 12
//   undeciphered1a: 28
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_BOX" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT5" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 784
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 416 [_FogPointLightPosition2] 3
//   Vector 432 [_FogPointLightColor2] 3
//   Vector 448 [_FogPointLightPosition3] 3
//   Vector 464 [_FogPointLightColor3] 3
//   Vector 480 [_FogPointLightPosition4] 3
//   Vector 496 [_FogPointLightColor4] 3
//   Vector 512 [_FogPointLightPosition5] 3
//   Vector 528 [_FogPointLightColor5] 3
//   Vector 560 [_SunDir] 3
//   Vector 576 [_SunColor] 3
//   Vector 608 [_FogScatteringData2]
//   Vector 704 [_VolumetricFogSunWorldPos]
//   Vector 720 [_VolumetricFogSunShadowsData]
//   Float 736 [_Jitter]
//   Matrix 640 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_FogOfWar] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:36:17 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[47], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 30
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r28.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 1b2df0e07034aa3f-ps.txt

mul r28.w, -r28.x, r28.y
mad r29.xyz, -r28.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.z, -cb0[13].x, r29.z
mov r2.xy, r29.xyxx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.y, r3.z, l(0.000010)
lt r1.z, cb0[13].y, r2.z
lt r1.w, cb0[13].y, r1.y
and r1.z, r1.w, r1.z
lt r1.w, r2.z, -cb0[13].y
lt r1.y, r1.y, -cb0[13].y
and r1.y, r1.y, r1.w
or r1.y, r1.y, r1.z
if_z r1.y
  lt r1.x, r1.x, cb0[16].w
  if_nz r1.x
    div r1.xy, r3.xyxx, cb0[20].xyxx
    add r1.xy, r1.xyxx, -cb0[21].xyxx
    sample r1.xyzw, r1.xyxx, t1.wxyz, s2
    ge r1.y, l(0.000000), r1.x
  else
    mov r1.xy, l(1.000000,0,0,0)
  endif
  if_z r1.y
    add r3.w, r3.z, l(0.000010)
    add r1.yzw, -r2.xxyz, r3.xxyw
    dp3 r2.w, r1.yzwy, r1.yzwy
    sqrt r2.w, r2.w
    add r3.xyz, r2.xyzx, -cb0[17].xyzx
    div r4.xyz, r2.wwww, r1.yzwy
    div r5.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r6.xyz, -r3.xyzx, -r5.xyzx
    mul r6.xyz, r4.xyzx, r6.xyzx
    add r3.xyz, -r3.xyzx, r5.xyzx
    mul r3.xyz, r3.xyzx, r4.xyzx
    min r5.xyz, r6.xyzx, r3.xyzx
    max r5.xy, r5.yzyy, r5.xxxx
    max r3.w, r5.y, r5.x
    max r3.w, r3.w, l(0.000000)
    max r3.xyz, r6.xyzx, r3.xyzx
    min r3.xy, r3.yzyy, r3.xxxx
    min r3.x, r3.y, r3.x
    min r3.y, r2.w, cb0[12].z
    min r3.x, r3.y, r3.x
    add r3.x, -r3.w, r3.x
    lt r3.z, l(0.000000), r3.x
    if_nz r3.z
      mul r5.xy, v1.xyxx, cb1[6].xyxx
      dp2 r3.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r5.xyxx
      frc r3.z, r3.z
      add r3.z, r3.z, l(-0.500000)
      div r4.xyz, r3.wwww, r4.xyzx
      add r4.xyz, r2.xyzx, r4.xyzx
      div r2.xy, cb0[18].xyxx, cb0[13].wwww
      log r2.z, r3.x
      mul r2.z, r2.z, l(0.693147182)
      max r2.z, r2.z, l(0.000000)
      mad r2.z, r2.z, cb0[15].x, l(0.100000)
      mul r2.z, r2.z, cb0[13].z
      mul_sat r5.x, r3.y, cb0[15].y
      mul r2.z, r2.z, r5.x
      add r3.y, -r3.w, r3.y
      max r2.z, r2.z, l(0.010000)
      mul r5.xyz, r1.yzwy, r2.zzzz
      div r5.xyz, r5.xyzx, r2.wwww
      div r2.z, r3.x, r2.z
      add r6.xyz, r4.xyzx, -cb0[22].xyzx
      add r7.xyz, r4.xyzx, -cb0[24].xyzx
      add r8.xyz, r4.xyzx, -cb0[26].xyzx
      add r9.xyz, r4.xyzx, -cb0[28].xyzx
      add r10.xyz, r4.xyzx, -cb0[30].xyzx
      add r11.xyz, r4.xyzx, -cb0[32].xyzx
      mul r12.xy, r5.xyxx, cb0[13].wwww
      mul r5.w, cb0[13].z, cb0[13].y
      div r12.z, r5.z, r5.w
      add r13.xy, r4.xyxx, cb0[14].xzxx
      mul r13.xy, r13.xyxx, cb0[13].wwww
      div r5.w, r4.z, r5.w
      add r13.zw, cb0[14].xxxy, cb0[17].xxxy
      frc r6.w, r3.z
      mad r2.z, r6.w, cb0[46].x, r2.z
      add r4.w, r4.z, cb0[13].x
      mul r14.xyz, r4.yyyy, cb0[41].xywx
      mad r14.xyz, cb0[40].xywx, r4.xxxx, r14.xyzx
      mad r14.xyz, cb0[42].xywx, r4.wwww, r14.xyzx
      add r14.xyz, r14.xyzx, cb0[43].xywx
      div r14.xy, r14.xyxx, r14.zzzz
      mad r14.xy, r14.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mad r3.z, r3.z, cb0[45].y, l(1.000000)
      mul r3.z, r3.z, r3.x
      mul r15.xyz, r1.yzwy, r3.zzzz
      div r15.xyz, r15.xyzx, r2.wwww
      add r15.xyz, r4.xywx, r15.xyzx
      mul r16.xyz, r15.yyyy, cb0[41].xywx
      mad r16.xyz, cb0[40].xywx, r15.xxxx, r16.xyzx
      mad r16.xyz, cb0[42].xywx, r15.zzzz, r16.xyzx
      add r16.xyz, r16.xyzx, cb0[43].xywx
      div r14.zw, r16.xxxy, r16.zzzz
      mad r14.zw, r14.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r3.z, -r3.w, cb0[44].w
      mul_sat r3.z, r3.z, l(0.0285714287)
      mul r3.z, r3.z, cb0[45].x
      div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
      ge r3.x, r3.x, r3.y
      and r3.x, r3.x, l(0x3f800000)
      add r14.xy, -r14.zwzz, r14.xyxx
      add r4.xyz, r4.xywx, -r15.xyzx
      mov r16.xyzw, l(0,0,0,0)
      mov r17.xyz, r6.xyzx
      mov r18.xyz, r7.xyzx
      mov r19.xyz, r8.xyzx
      mov r20.xyz, r9.xyzx
      mov r21.xyz, r10.xyzx
      mov r22.xyz, r11.xyzx
      mov r24.xy, r13.xyxx
      mov r3.y, r2.z
      mov r24.z, r5.w
      mov r23.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r3.y
        breakc_nz r4.w
        mad r25.xy, r13.zwzz, cb0[13].wwww, -r24.xyxx
        mul r25.xy, r2.xyxx, |r25.xyxx|
        max r4.w, r25.y, r25.x
        sample_l r25.xyzw, r24.xyxx, t2.xyzw, s0, l(0.000000)
        mad r4.w, r4.w, cb0[18].w, |r24.z|
        add r4.w, -r4.w, r25.w
        lt r6.w, l(0.000000), r4.w
        if_nz r6.w
          add r6.w, -r4.w, l(1.000000)
          mul r26.xyz, r6.wwww, cb0[11].xyzx
          mul r26.w, r4.w, l(0.400000)
          mul r4.w, r3.w, r3.y
          mad r27.xy, r4.wwww, r14.xyxx, r14.zwzz
          sample_l r27.xyzw, r27.xyxx, t3.xyzw, s3, l(0.000000)
          dp4 r6.w, r27.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          mad r27.xyz, r4.wwww, r4.xyzx, r15.xyzx
          add r27.xyz, r27.xyzx, -cb0[44].xyzx
          dp3 r4.w, r27.xyzx, r27.xyzx
          sqrt r4.w, r4.w
          add_sat r4.w, -r4.w, r6.w
          mul r6.w, r3.z, r23.w
          add r4.w, r4.w, l(-1.000000)
          mad r6.w, r6.w, r4.w, l(1.000000)
          mad r4.w, cb0[45].z, r4.w, l(1.000000)
          mul r26.xyzw, r4.wwww, r26.xyzw
          dp3 r4.w, r17.xyzx, r17.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r7.w, r18.xyzx, r18.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          dp3 r8.w, r19.xyzx, r19.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          dp3 r9.w, r20.xyzx, r20.xyzx
          div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
          dp3 r10.w, r21.xyzx, r21.xyzx
          div r10.w, l(1.000000, 1.000000, 1.000000, 1.000000), r10.w
          dp3 r11.w, r22.xyzx, r22.xyzx
          div r11.w, l(1.000000, 1.000000, 1.000000, 1.000000), r11.w
          mul r27.xyz, r10.wwww, cb0[31].xyzx
          mad r27.xyz, cb0[33].xyzx, r11.wwww, r27.xyzx
          mad r27.xyz, cb0[29].xyzx, r9.wwww, r27.xyzx
          mad r27.xyz, cb0[27].xyzx, r8.wwww, r27.xyzx
          mad r27.xyz, cb0[25].xyzx, r7.wwww, r27.xyzx
          mad r27.xyz, cb0[23].xyzx, r4.wwww, r27.xyzx
          mul r27.xyz, r26.wwww, r27.xyzx
          mad r25.xyz, r25.xyzx, r6.wwww, r27.xyzx
          mul r25.xyz, r26.wwww, r25.xyzx
          mul r26.xyz, r25.xyzx, r26.xyzx
          add r4.w, -r23.w, l(1.000000)
          mad r25.xyzw, r26.xyzw, r4.wwww, r23.xyzw
          lt r4.w, l(0.990000), r25.w
          if_nz r4.w
            mov r16.xyzw, r26.xyzw
            mov r23.xyzw, r25.xyzw
            break
          endif
          mov r16.xyzw, r26.xyzw
          mov r23.xyzw, r25.xyzw
        endif
        add r17.xyz, r5.xyzx, r17.xyzx
        add r18.xyz, r5.xyzx, r18.xyzx
        add r19.xyz, r5.xyzx, r19.xyzx
        add r20.xyz, r5.xyzx, r20.xyzx
        add r21.xyz, r5.xyzx, r21.xyzx
        add r22.xyz, r5.xyzx, r22.xyzx
        add r3.y, r3.y, l(-1.000000)
        add r24.xyz, r12.xyzx, r24.xyzx
      endloop
      lt r2.x, r23.w, l(0.990000)
      and r2.x, r2.x, l(0x3f800000)
      add r2.y, -r23.w, l(1.000000)
      mul r2.z, r3.y, r3.x
      mul r2.x, r2.y, r2.x
      mul r2.x, r2.z, r2.x
      mad r3.xyzw, r16.xyzw, r2.xxxx, r23.xyzw
      div r1.yzw, r1.yyzw, r2.wwww
      dp3 r1.y, r1.yzwy, cb0[35].xyzx
      mul r1.y, r1.y, cb0[38].w
      max r1.y, r1.y, l(0.000000)
      mul r1.y, r1.y, r1.y
      mul r1.y, r1.y, r1.y
      mul r1.y, r1.y, r1.y
      mul r1.y, r3.w, r1.y
      add r2.xyz, -r3.xyzx, cb0[36].xyzx
      mad r3.xyz, r1.yyyy, r2.xyzx, r3.xyzx
      mul r2.xyzw, r3.xyzw, cb0[10].wwww
      mul o0.xyzw, r1.xxxx, r2.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used