// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 3ff0249097fce63c-ps.txt
// 3DMigoto: 3ff0249097fce63c |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 125 2 12
//   undeciphered1a: 16
//   Keywords { "FOG_DISTANCE_ON" "FOG_VOID_BOX" "FOG_POINT_LIGHT0" }
//   undeciphered2: 1 2 2 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 464
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 352 [_SunDir] 3
//   Vector 368 [_SunColor] 3
//   Vector 400 [_FogScatteringData2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:53:33 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[26], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 3ff0249097fce63c-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mov r1.yz, -cb0[13].xxyx
add r2.y, r1.y, r17.y
mov r2.xz, r17.xxzx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.x, r3.y, l(0.000010)
lt r1.y, cb0[13].y, r2.y
lt r1.w, cb0[13].y, r1.x
and r1.y, r1.w, r1.y
lt r1.w, r2.y, r1.z
lt r2.w, r1.x, r1.z
and r1.w, r1.w, r2.w
or r1.y, r1.w, r1.y
if_z r1.y
  add r3.w, r3.y, l(0.000010)
  add r3.xyz, -r2.xyzx, r3.xwzx
  dp3 r1.y, r3.xyzx, r3.xyzx
  dp2 r1.w, r3.xzxx, r3.xzxx
  sqrt r1.yw, r1.yyyw
  div r4.xy, r3.xzxx, r1.wwww
  div r1.w, r1.w, r3.y
  max r2.w, r1.z, r2.y
  min r5.y, r2.w, cb0[13].y
  add r2.w, r2.y, -r5.y
  mul r2.w, r1.w, r2.w
  mad r5.xz, -r4.xxyx, r2.wwww, r17.xxzx
  min r2.w, r1.y, cb0[12].z
  add r6.xyz, -r2.xyzx, r5.xyzx
  dp3 r2.x, r6.xyzx, r6.xyzx
  sqrt r2.x, r2.x
  lt r2.z, r2.x, r2.w
  if_nz r2.z
    lt r2.z, l(0.000000), r1.w
    lt r3.w, l(-0.500000), r1.x
    and r2.z, r2.z, r3.w
    lt r3.w, r1.w, l(0.000000)
    lt r1.x, r1.x, l(0.500000)
    and r1.x, r1.x, r3.w
    and r1.x, r1.z, r1.x
    movc r6.y, r2.z, cb0[13].y, r1.x
    add r1.x, -r2.y, r6.y
    mul r1.x, r1.x, r1.w
    mad r6.xz, -r4.xxyx, r1.xxxx, r17.xxzx
    add r1.xzw, r5.xxyz, -r6.xxyz
    dp3 r1.x, r1.xzwx, r1.xzwx
    sqrt r1.x, r1.x
    add r1.z, -r2.x, r2.w
    min r1.x, r1.z, r1.x
    lt r1.w, l(0.000000), r1.x
    if_nz r1.w
      mul r4.xyz, r3.xyzx, r1.xxxx
      div r4.xyz, r4.xyzx, r1.yyyy
      add r4.xyz, r4.xyzx, r5.xyzx
      add r4.xyz, -r4.xyzx, cb0[17].xyzx
      mul r4.xyz, |r4.xyzx|, cb0[18].xyzx
      max r1.w, r4.y, r4.x
      max r1.w, r4.z, r1.w
      add r1.w, r1.w, l(-1.000000)
      mad_sat r1.w, cb0[18].w, r1.w, l(1.000000)
      lt r2.y, l(0.000000), r1.w
      if_nz r2.y
        log r2.y, r1.x
        mul r2.y, r2.y, l(0.693147182)
        max r2.y, r2.y, l(0.000000)
        mad r2.y, r2.y, cb0[15].x, l(0.100000)
        mul r2.y, r2.y, cb0[13].z
        mul_sat r2.z, r2.w, cb0[15].y
        mul r2.y, r2.z, r2.y
        max r2.y, r2.y, l(0.010000)
        mul r4.xyz, r2.yyyy, r3.xyzx
        div r4.xyz, r4.xyzx, r1.yyyy
        div r2.y, r1.x, r2.y
        add r6.xyz, r5.xyzx, -cb0[19].xyzx
        mul r7.xz, r4.xxzx, cb0[13].wwww
        mul r2.z, cb0[13].z, cb0[13].y
        div r7.y, r4.y, r2.z
        add r5.xz, r5.xxzx, cb0[14].xxzx
        mul r5.xz, r5.xxzx, cb0[13].wwww
        div r2.z, r5.y, r2.z
        add r5.yw, cb0[14].xxxz, r17.xxxz
        ge r1.x, r1.x, r1.z
        and r1.x, r1.x, l(0x3f800000)
        mov r8.xyzw, l(0,0,0,0)
        mov r9.xyz, r6.xyzx
        mov r11.xz, r5.xxzx
        mov r1.z, r2.y
        mov r11.y, r2.z
        mov r10.xyzw, l(0,0,0,0)
        loop
          ge r2.w, l(1.000000), r1.z
          breakc_nz r2.w
          sample_l r12.xyzw, r11.xzxx, t1.xyzw, s0, l(0.000000)
          add r2.w, -|r11.y|, r12.w
          mad r13.xy, r5.ywyy, cb0[13].wwww, -r11.xzxx
          dp2 r3.w, r13.xyxx, r13.xyxx
          add r3.w, -r3.w, cb0[12].x
          max r3.w, r3.w, l(0.000000)
          mad r2.w, -r3.w, cb0[12].y, r2.w
          lt r3.w, l(0.000000), r2.w
          if_nz r3.w
            add r3.w, -r2.w, l(1.000000)
            mul r13.xyz, r3.wwww, cb0[11].xyzx
            mul r14.w, r2.w, l(0.400000)
            dp3 r2.w, r9.xyzx, r9.xyzx
            div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
            mul r15.xyz, r2.wwww, cb0[20].xyzx
            mad r12.xyz, r15.xyzx, r14.wwww, r12.xyzx
            mul r12.xyz, r14.wwww, r12.xyzx
            mul r14.xyz, r12.xyzx, r13.xyzx
            add r2.w, -r10.w, l(1.000000)
            mad r12.xyzw, r14.xyzw, r2.wwww, r10.xyzw
            lt r2.w, l(0.990000), r12.w
            if_nz r2.w
              mov r8.xyzw, r14.xyzw
              mov r10.xyzw, r12.xyzw
              break
            endif
            mov r8.xyzw, r14.xyzw
            mov r10.xyzw, r12.xyzw
          endif
          add r9.xyz, r4.xyzx, r9.xyzx
          add r1.z, r1.z, l(-1.000000)
          add r11.xyz, r7.xyzx, r11.xyzx
        endloop
        lt r2.y, r10.w, l(0.990000)
        and r2.y, r2.y, l(0x3f800000)
        add r2.z, -r10.w, l(1.000000)
        mul r1.x, r1.z, r1.x
        mul r1.z, r2.z, r2.y
        mul r1.x, r1.x, r1.z
        mad r4.xyzw, r8.xyzw, r1.xxxx, r10.xyzw
        div r1.xyz, r3.xyzx, r1.yyyy
        dp3 r1.x, r1.xyzx, cb0[22].xyzx
        mul r1.x, r1.x, cb0[25].w
        max r1.x, r1.x, l(0.000000)
        mul r1.x, r1.x, r1.x
        mul r1.x, r1.x, r1.x
        mul r1.x, r1.x, r1.x
        mul r1.x, r4.w, r1.x
        add r2.yzw, -r4.xxyz, cb0[23].xxyz
        mad r4.xyz, r1.xxxx, r2.yzwy, r4.xyzx
        mul r3.xyzw, r4.xyzw, cb0[10].wwww
        add r1.x, -r2.x, cb0[12].z
        div_sat r1.x, r1.x, cb0[12].w
        mul r1.x, r1.x, r1.x
        mul r2.xyzw, r1.xxxx, r3.xyzw
        mul o0.xyzw, r1.wwww, r2.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used