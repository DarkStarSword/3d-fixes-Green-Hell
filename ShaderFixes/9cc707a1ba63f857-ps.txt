// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9cc707a1ba63f857-ps.txt
// 3DMigoto: 9cc707a1ba63f857 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 157 4 12
//   undeciphered1a: 19
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 576
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 496 [_VolumetricFogSunWorldPos]
//   Vector 512 [_VolumetricFogSunShadowsData]
//   Float 528 [_Jitter]
//   Matrix 432 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_FogOfWar] 2D 4
//   SetTexture 3 [_NoiseTex] 2D 1
//   SetTexture 4 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 5 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:46:38 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[34], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 21
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r19.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9cc707a1ba63f857-ps.txt

mul r19.w, -r19.x, r19.y
mad r20.xyz, -r19.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r20.y
mov r1.xz, r20.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r1.w
or r0.y, r0.y, r0.w
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r3.xyzw, r0.xyxx, t2.wxyz, s4
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r0.xyw, -r1.xyxz, r2.xwxz
    dp3 r1.w, r0.xywx, r0.xywx
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.yzw, r1.wwww, r0.xxyw
    div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r5.xyz, -r2.xyzx, -r4.xyzx
    mul r5.xyz, r3.yzwy, r5.xyzx
    add r2.xyz, -r2.xyzx, r4.xyzx
    mul r2.xyz, r2.xyzx, r3.yzwy
    min r4.xyz, r5.xyzx, r2.xyzx
    max r4.xy, r4.yzyy, r4.xxxx
    max r2.w, r4.y, r4.x
    max r2.w, r2.w, l(0.000000)
    max r2.xyz, r5.xyzx, r2.xyzx
    min r2.xy, r2.yzyy, r2.xxxx
    min r2.x, r2.y, r2.x
    min r2.y, r1.w, cb0[12].z
    min r2.x, r2.y, r2.x
    add r2.x, -r2.w, r2.x
    lt r2.z, l(0.000000), r2.x
    if_nz r2.z
      div r3.yzw, r2.wwww, r3.yyzw
      add r4.xyz, r1.xyzx, r3.yzwy
      div r1.xy, cb0[18].xzxx, cb0[13].wwww
      log r1.z, r2.x
      mul r1.z, r1.z, l(0.693147182)
      max r1.z, r1.z, l(0.000000)
      mad r1.z, r1.z, cb0[15].x, l(0.100000)
      mul r1.z, r1.z, cb0[13].z
      mul_sat r2.z, r2.y, cb0[15].y
      mul r1.z, r1.z, r2.z
      add r2.y, -r2.w, r2.y
      max r1.z, r1.z, l(0.010000)
      mul r3.yzw, r0.xxyw, r1.zzzz
      div r3.yzw, r3.yyzw, r1.wwww
      div r1.z, r2.x, r1.z
      add r5.xyz, r4.xyzx, -cb0[22].xyzx
      add r6.xyz, r4.xyzx, -cb0[24].xyzx
      mul r7.xz, r3.yywy, cb0[13].wwww
      mul r2.z, cb0[13].z, cb0[13].y
      div r7.y, r3.z, r2.z
      add r8.xy, r4.xzxx, cb0[14].xzxx
      mul r8.xy, r8.xyxx, cb0[13].wwww
      div r2.z, r4.y, r2.z
      add r8.zw, cb0[14].xxxz, cb0[17].xxxz
      add r9.xy, cb0[14].xzxx, r20.xzxx
      frc r5.w, r0.z
      mad r1.z, r5.w, cb0[33].x, r1.z
      add r4.w, r4.y, cb0[13].x
      mul r10.xyz, r4.wwww, cb0[28].xywx
      mad r10.xyz, cb0[27].xywx, r4.xxxx, r10.xyzx
      mad r10.xyz, cb0[29].xywx, r4.zzzz, r10.xyzx
      add r10.xyz, r10.xyzx, cb0[30].xywx
      div r9.zw, r10.xxxy, r10.zzzz
      mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r4.y, r0.z, cb0[32].y, l(1.000000)
      mul r4.y, r2.x, r4.y
      mul r0.xyw, r0.xyxw, r4.yyyy
      div r0.xyw, r0.xyxw, r1.wwww
      add r0.xyw, r0.xyxw, r4.xwxz
      mul r10.xyz, r0.yyyy, cb0[28].xywx
      mad r10.xyz, cb0[27].xywx, r0.xxxx, r10.xyzx
      mad r10.xyz, cb0[29].xywx, r0.wwww, r10.xyzx
      add r10.xyz, r10.xyzx, cb0[30].xywx
      div r10.xy, r10.xyxx, r10.zzzz
      mad r10.xy, r10.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r1.w, -r2.w, cb0[31].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[32].x
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
      ge r2.x, r2.x, r2.y
      and r2.x, r2.x, l(0x3f800000)
      add r9.zw, r9.zzzw, -r10.xxxy
      add r4.xyz, -r0.xywx, r4.xwzx
      mov r11.xyzw, l(0,0,0,0)
      mov r12.xyz, r5.xyzx
      mov r13.xyz, r6.xyzx
      mov r15.xz, r8.xxyx
      mov r2.y, r1.z
      mov r15.y, r2.z
      mov r14.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r2.y
        breakc_nz r4.w
        mad r10.zw, r8.zzzw, cb0[13].wwww, -r15.xxxz
        mul r10.zw, r1.xxxy, |r10.zzzw|
        max r4.w, r10.w, r10.z
        sample_l r16.xyzw, r15.xzxx, t3.xyzw, s1, l(0.000000)
        mad r4.w, r4.w, cb0[18].w, |r15.y|
        add r4.w, -r4.w, r16.w
        mad r10.zw, r9.xxxy, cb0[13].wwww, -r15.xxxz
        dp2 r5.w, r10.zwzz, r10.zwzz
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r4.w, -r5.w, cb0[12].y, r4.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r17.xyz, r5.wwww, cb0[11].xyzx
          mul r17.w, r4.w, l(0.400000)
          mul r4.w, r2.w, r2.y
          mad r10.zw, r4.wwww, r9.zzzw, r10.xxxy
          sample_l r18.xyzw, r10.zwzz, t4.xyzw, s5, l(0.000000)
          dp4 r5.w, r18.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mad r18.xyz, r4.wwww, r4.xyzx, r0.xywx
          add r18.xyz, r18.xyzx, -cb0[31].xyzx
          dp3 r4.w, r18.xyzx, r18.xyzx
          sqrt r4.w, r4.w
          add_sat r4.w, -r4.w, r5.w
          mul r5.w, r1.w, r14.w
          add r4.w, r4.w, l(-1.000000)
          mad r5.w, r5.w, r4.w, l(1.000000)
          mad r4.w, cb0[32].z, r4.w, l(1.000000)
          mul r17.xyzw, r4.wwww, r17.xyzw
          dp3 r4.w, r12.xyzx, r12.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r6.w, r13.xyzx, r13.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          mul r18.xyz, r4.wwww, cb0[23].xyzx
          mad r18.xyz, cb0[25].xyzx, r6.wwww, r18.xyzx
          mul r18.xyz, r17.wwww, r18.xyzx
          mad r16.xyz, r16.xyzx, r5.wwww, r18.xyzx
          mul r16.xyz, r17.wwww, r16.xyzx
          mul r17.xyz, r16.xyzx, r17.xyzx
          add r4.w, -r14.w, l(1.000000)
          mad r16.xyzw, r17.xyzw, r4.wwww, r14.xyzw
          lt r4.w, l(0.990000), r16.w
          if_nz r4.w
            mov r11.xyzw, r17.xyzw
            mov r14.xyzw, r16.xyzw
            break
          endif
          mov r11.xyzw, r17.xyzw
          mov r14.xyzw, r16.xyzw
        endif
        add r12.xyz, r3.yzwy, r12.xyzx
        add r13.xyz, r3.yzwy, r13.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r15.xyz, r7.xyzx, r15.xyzx
      endloop
      lt r0.x, r14.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r14.w, l(1.000000)
      mul r0.w, r2.y, r2.x
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.w, r0.x
      mad r1.xyzw, r11.xyzw, r0.xxxx, r14.xyzw
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.z, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t5.xyzw, s0
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r3.xyzx, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used