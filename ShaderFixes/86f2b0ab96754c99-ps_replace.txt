// 3DMigoto: 86f2b0ab96754c99 | Matched 2 variants of 1 shaders: Hidden/NGSS_Directional
//
//       Unity headers extracted from Hidden_NGSS_Directional
//       Shader "Hidden/NGSS_Directional" {
//    1:   SubShader 5/6 {
//    2:   SubShader 6/6 {
//    2:     Tags { "ShadowmapFilter"="PCF_5x5_FORCE_INV_PROJECTION_IN_PS" }
//    1:     Tags { "ShadowmapFilter"="PCF_SOFT_FORCE_INV_PROJECTION_IN_PS" }
//           Pass 1/1 {
//    2:       Tags { "ShadowmapFilter"="PCF_5x5_FORCE_INV_PROJECTION_IN_PS" }
//    1:       Tags { "ShadowmapFilter"="PCF_SOFT_FORCE_INV_PROJECTION_IN_PS" }
//             ZWrite Off
//             Program "fp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Hidden_NGSS_Directional:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201802150 83 1 4
//      undeciphered1a: 6
//      Keywords { "SHADOWS_SPLIT_SPHERES" "NGSS_PCSS_FILTER_DIR" "DIR_POISSON_32" "NGSS_USE_EARLY_BAILOUT_OPTIMIZATION_DIR" "NGSS_USE_BIAS_FADE_DIR" }
//      undeciphered2: 1 2 3 2 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 2144
//      Float 1088 [NGSS_POISSON_SAMPLING_NOISE_DIR]
//      Float 1092 [NGSS_PCSS_GLOBAL_SOFTNESS]
//      Float 1096 [NGSS_PCSS_FILTER_DIR_MIN]
//      Float 1100 [NGSS_PCSS_FILTER_DIR_MAX]
//      Float 1104 [NGSS_BIAS_FADE_DIR]
//      ConstBuffer "UnityPerCameraRare" 352
//      Matrix 160 [unity_CameraInvProjection]
//      Matrix 288 [unity_CameraToWorld]
//      ConstBuffer "UnityShadows" 416
//      Vector 0 [unity_ShadowSplitSpheres0]
//      Vector 16 [unity_ShadowSplitSpheres1]
//      Vector 32 [unity_ShadowSplitSpheres2]
//      Vector 48 [unity_ShadowSplitSpheres3]
//      Vector 64 [unity_ShadowSplitSqRadii]
//      Vector 384 [_LightShadowData]
//      Matrix 128 [unity_WorldToShadow0]
//      Matrix 192 [unity_WorldToShadow1]
//      Matrix 256 [unity_WorldToShadow2]
//      Matrix 320 [unity_WorldToShadow3]
//      SetTexture 0 [_CameraDepthTexture] 2D 0
//      SetTexture 1 [_ShadowMapTexture] 2D -1
//      BindCB "$Globals" 0
//      BindCB "UnityPerCameraRare" 1
//      BindCB "UnityShadows" 2
//      SetSampler 1 84
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.3.16 on Sat Sep 07 09:33:46 2019
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);


// Unity constant buffers reconstructed with DarkStarSword's hlsltool.py:
// hlsltool.py --reconstruct-unity-cbuffers -I /home/dss/3d-fixes/Green Hell/ --fxc /home/dss/fxc.exe 86f2b0ab96754c99-ps_replace.txt

cbuffer UnityShadows : register(b2) {
  float4 unity_ShadowSplitSpheres0 : packoffset(c0);
  float4 unity_ShadowSplitSpheres1 : packoffset(c1);
  float4 unity_ShadowSplitSpheres2 : packoffset(c2);
  float4 unity_ShadowSplitSpheres3 : packoffset(c3);
  float4 unity_ShadowSplitSqRadii : packoffset(c4);
  row_major matrix unity_WorldToShadow0 : packoffset(c8);
  row_major matrix unity_WorldToShadow1 : packoffset(c12);
  row_major matrix unity_WorldToShadow2 : packoffset(c16);
  row_major matrix unity_WorldToShadow3 : packoffset(c20);
  float4 _LightShadowData : packoffset(c24);
}

cbuffer UnityPerCameraRare : register(b1) {
  row_major matrix unity_CameraInvProjection : packoffset(c10);
  row_major matrix unity_CameraToWorld : packoffset(c18);
}

cbuffer Globals : register(b0) {
  float NGSS_POISSON_SAMPLING_NOISE_DIR : packoffset(c68);
  float NGSS_PCSS_GLOBAL_SOFTNESS : packoffset(c68.y);
  float NGSS_PCSS_FILTER_DIR_MIN : packoffset(c68.z);
  float NGSS_PCSS_FILTER_DIR_MAX : packoffset(c68.w);
  float NGSS_BIAS_FADE_DIR : packoffset(c69);
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { 0.487390, -0.856960, 0, 0},
                              { 0.346374, -0.338794, 0, 0},
                              { 0.629005, -0.473531, 0, 0},
                              { 0.185585, -0.884814, 0, 0},
                              { 0.767792, 0.026912, 0, 0},
                              { 0.300914, -0.636587, 0, 0},
                              { 0.426842, -0.006138, 0, 0},
                              { -0.066830, -0.783381, 0, 0},
                              { 0.034726, -0.399412, 0, 0},
                              { 0.449469, 0.520661, 0, 0},
                              { 0.219377, 0.243884, 0, 0},
                              { 0.128577, -0.121555, 0, 0},
                              { 0.890705, 0.433493, 0, 0},
                              { 0.255647, 0.766552, 0, 0},
                              { -0.036924, 0.362924, 0, 0},
                              { 0.665110, 0.728681, 0, 0},
                              { -0.429309, -0.228226, 0, 0},
                              { -0.273097, -0.468351, 0, 0},
                              { -0.275599, 0.732791, 0, 0},
                              { -0.332970, 0.175464, 0, 0},
                              { -0.173133, -0.108772, 0, 0},
                              { 0.921223, -0.371664, 0, 0},
                              { -0.538823, 0.460397, 0, 0},
                              { -0.630732, 0.761592, 0, 0},
                              { -0.770917, -0.088949, 0, 0},
                              { -0.720597, -0.360949, 0, 0},
                              { -0.538620, -0.584716, 0, 0},
                              { -0.652083, 0.178528, 0, 0},
                              { -0.931058, 0.204034, 0, 0},
                              { -0.828178, 0.555960, 0, 0},
                              { 0.629784, 0.294650, 0, 0},
                              { -0.058361, 0.900681, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r0.z = 1 + -r0.x;
  r0.xy = v1.zw;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.xyzw = unity_CameraInvProjection[1].xyzw * r0.yyyy;
  r1.xyzw = unity_CameraInvProjection[0].xyzw * r0.xxxx + r1.xyzw;
  r0.xyzw = unity_CameraInvProjection[2].xyzw * r0.zzzz + r1.xyzw;
  r0.xyzw = unity_CameraInvProjection[3].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;
  r1.xyzw = unity_CameraToWorld[1].xyzw * r0.yyyy;
  r1.xyzw = unity_CameraToWorld[0].xyzw * r0.xxxx + r1.xyzw;
  r0.xyzw = unity_CameraToWorld[2].xyzw * -r0.zzzz + r1.xyzw;
  r0.xyzw = unity_CameraToWorld[3].xyzw + r0.xyzw;
  r1.xyz = -unity_ShadowSplitSpheres0.xyz + r0.xyz;
  r2.xyz = -unity_ShadowSplitSpheres1.xyz + r0.xyz;
  r3.xyz = -unity_ShadowSplitSpheres2.xyz + r0.xyz;
  r4.xyz = -unity_ShadowSplitSpheres3.xyz + r0.xyz;
  r1.x = dot(r1.xyz, r1.xyz);
  r1.y = dot(r2.xyz, r2.xyz);
  r1.z = dot(r3.xyz, r3.xyz);
  r1.w = dot(r4.xyz, r4.xyz);
  r1.xyzw = cmp(r1.xyzw < unity_ShadowSplitSqRadii.xyzw);
  r2.xyzw = r1.xyzw ? float4(1,1,1,1) : 0;
  r1.xyz = r1.xyz ? float3(-1,-1,-1) : float3(-0,-0,-0);
  r1.xyz = r2.yzw + r1.xyz;
  r2.yzw = max(float3(0,0,0), r1.xyz);
  r1.xyz = unity_WorldToShadow0[1].xyz * r0.yyy;
  r1.xyz = unity_WorldToShadow0[0].xyz * r0.xxx + r1.xyz;
  r1.xyz = unity_WorldToShadow0[2].xyz * r0.zzz + r1.xyz;
  r1.xyz = unity_WorldToShadow0[3].xyz * r0.www + r1.xyz;
  r3.xyz = unity_WorldToShadow1[1].xyz * r0.yyy;
  r3.xyz = unity_WorldToShadow1[0].xyz * r0.xxx + r3.xyz;
  r3.xyz = unity_WorldToShadow1[2].xyz * r0.zzz + r3.xyz;
  r3.xyz = unity_WorldToShadow1[3].xyz * r0.www + r3.xyz;
  r4.xyz = unity_WorldToShadow2[1].xyz * r0.yyy;
  r4.xyz = unity_WorldToShadow2[0].xyz * r0.xxx + r4.xyz;
  r4.xyz = unity_WorldToShadow2[2].xyz * r0.zzz + r4.xyz;
  r4.xyz = unity_WorldToShadow2[3].xyz * r0.www + r4.xyz;
  r5.xyz = unity_WorldToShadow3[1].xyz * r0.yyy;
  r5.xyz = unity_WorldToShadow3[0].xyz * r0.xxx + r5.xyz;
  r0.xyz = unity_WorldToShadow3[2].xyz * r0.zzz + r5.xyz;
  r0.xyz = unity_WorldToShadow3[3].xyz * r0.www + r0.xyz;
  r3.xyz = r3.xyz * r2.yyy;
  r1.xyz = r1.xyz * r2.xxx + r3.xyz;
  r1.xyz = r4.xyz * r2.zzz + r1.xyz;
  r0.xyz = r0.xyz * r2.www + r1.xyz;
  r0.w = dot(r2.xyzw, float4(1,1,1,1));
  r0.z = r0.z + -r0.w;
  r0.z = 1 + r0.z;
  r0.w = dot(v1.zww, float3(12.9898005,78.2330017,45.5432014));
  r0.w = sin(r0.w);
  r0.w = 43758.5469 * r0.w;
  r0.w = frac(r0.w);
  r0.w = NGSS_POISSON_SAMPLING_NOISE_DIR * r0.w;
  sincos(r0.w, r1.x, r2.x);
  r0.w = 0.00100000005 + NGSS_PCSS_GLOBAL_SOFTNESS;
  r1.yzw = float3(0,0,0);
  while (true) {
    r2.y = (int)r1.w;
    r2.y = cmp(r2.y >= 32);
    if (r2.y != 0) break;
    r2.yz = icb[r1.w+0].yx * r0.ww;
    r3.xy = r2.yz * r1.xx;
    r4.x = r2.z * r2.x + -r3.x;
    r4.y = r2.y * r2.x + r3.y;
    r2.yz = r4.xy + r0.xy;
    r3.xyzw = t1.SampleLevel(s1_s, r2.yz, 0).xyzw;
    r2.y = cmp(r3.x >= r0.z);
    r3.y = r3.x + r1.z;
    r3.x = 1 + r1.y;
    r1.yz = r2.yy ? r3.xy : r1.yz;
    r1.w = (int)r1.w + 1;
  }
  r1.w = cmp(r1.y < 1);
  r2.y = cmp(r1.y == 32.000000);
  r2.y = (int)r1.w | (int)r2.y;
  if (r2.y == 0) {
    r1.y = r1.z / r1.y;
    r1.y = 1 + -r1.y;
    r1.z = 1 + -r0.z;
    r1.y = r1.z + -r1.y;
    r1.y = max(NGSS_PCSS_FILTER_DIR_MIN, r1.y);
    r1.y = min(NGSS_PCSS_FILTER_DIR_MAX, r1.y);
    r0.w = r1.y * r0.w;
    r1.yz = float2(0,0);
    while (true) {
      r2.y = (int)r1.z;
      r2.y = cmp(r2.y >= 32);
      if (r2.y != 0) break;
      r2.yz = icb[r1.z+0].yx * r0.ww;
      r3.xy = r2.yz * r1.xx;
      r4.x = r2.z * r2.x + -r3.x;
      r4.y = r2.y * r2.x + r3.y;
      r2.yz = r4.xy + r0.xy;
      r3.xyzw = t1.SampleLevel(s1_s, r2.yz, 0).xyzw;
      r2.y = -r3.x + r0.z;
      r2.y = saturate(r2.y / NGSS_BIAS_FADE_DIR);
      r1.y = r2.y + r1.y;
      r1.z = (int)r1.z + 1;
    }
    r0.x = r1.y * 0.03125 + _LightShadowData.x;
  } else {
    r0.x = r1.w ? 1 : _LightShadowData.x;
  }
  o0.xyzw = r0.xxxx;
  return;
}
