// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d7035c5ee65c0d07-ps.txt
// 3DMigoto: d7035c5ee65c0d07 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 137 4 12
//   undeciphered1a: 24
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_POINT_LIGHT4" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 640
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 416 [_FogPointLightPosition2] 3
//   Vector 432 [_FogPointLightColor2] 3
//   Vector 448 [_FogPointLightPosition3] 3
//   Vector 464 [_FogPointLightColor3] 3
//   Vector 480 [_FogPointLightPosition4] 3
//   Vector 496 [_FogPointLightColor4] 3
//   Vector 528 [_SunDir] 3
//   Vector 544 [_SunColor] 3
//   Vector 576 [_FogScatteringData2]
//   Float 592 [_Jitter]
//   Float 608 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:16:39 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[39], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 26
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r24.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d7035c5ee65c0d07-ps.txt

mul r24.w, -r24.x, r24.y
mad r25.xyz, -r24.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r25.y
mov r1.xz, r25.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
lt r0.z, cb0[13].y, r1.y
lt r0.w, cb0[13].y, r0.y
and r0.z, r0.w, r0.z
lt r0.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r0.w
or r0.y, r0.y, r0.z
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r0.xyzw, r0.xyxx, t2.wxyz, s3
    ge r0.y, l(0.000000), r0.x
  else
    mov r0.xy, l(1.000000,0,0,0)
  endif
  if_z r0.y
    add r2.w, r2.y, l(0.000010)
    add r0.yzw, -r1.xxyz, r2.xxwz
    dp3 r1.w, r0.yzwy, r0.yzwy
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.xyz, r1.wwww, r0.yzwy
    div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r5.xyz, -r2.xyzx, -r4.xyzx
    mul r5.xyz, r3.xyzx, r5.xyzx
    add r2.xyz, -r2.xyzx, r4.xyzx
    mul r2.xyz, r2.xyzx, r3.xyzx
    min r4.xyz, r5.xyzx, r2.xyzx
    max r4.xy, r4.yzyy, r4.xxxx
    max r2.w, r4.y, r4.x
    max r2.w, r2.w, l(0.000000)
    max r2.xyz, r5.xyzx, r2.xyzx
    min r2.xy, r2.yzyy, r2.xxxx
    min r2.x, r2.y, r2.x
    min r2.y, r1.w, cb0[12].z
    min r2.x, r2.y, r2.x
    add r2.x, -r2.w, r2.x
    lt r2.z, l(0.000000), r2.x
    if_nz r2.z
      div r3.xyz, r2.wwww, r3.xyzx
      add r1.xyz, r1.xyzx, r3.xyzx
      div r3.xy, cb0[18].xzxx, cb0[13].wwww
      log r2.z, r2.x
      mul r2.z, r2.z, l(0.693147182)
      max r2.z, r2.z, l(0.000000)
      mad r2.z, r2.z, cb0[15].x, l(0.100000)
      mul r2.z, r2.z, cb0[13].z
      mul_sat r3.z, r2.y, cb0[15].y
      mul r2.z, r2.z, r3.z
      add r2.y, -r2.w, r2.y
      max r2.z, r2.z, l(0.010000)
      mul r4.xyz, r0.yzwy, r2.zzzz
      div r4.xyz, r4.xyzx, r1.wwww
      div r2.z, r2.x, r2.z
      add r5.xyz, r1.xyzx, -cb0[22].xyzx
      add r6.xyz, r1.xyzx, -cb0[24].xyzx
      add r7.xyz, r1.xyzx, -cb0[26].xyzx
      add r8.xyz, r1.xyzx, -cb0[28].xyzx
      add r9.xyz, r1.xyzx, -cb0[30].xyzx
      mul r10.xz, r4.xxzx, cb0[13].wwww
      mul r2.w, cb0[13].z, cb0[13].y
      div r10.y, r4.y, r2.w
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r2.w
      add r3.zw, cb0[14].xxxz, cb0[17].xxxz
      add r11.xy, cb0[14].xzxx, r25.xzxx
      frc r2.w, cb0[38].x
      mad r2.z, r2.w, cb0[37].x, r2.z
      ge r2.x, r2.x, r2.y
      and r2.x, r2.x, l(0x3f800000)
      mov r12.xyzw, l(0,0,0,0)
      mov r13.xyz, r5.xyzx
      mov r14.xyz, r6.xyzx
      mov r15.xyz, r7.xyzx
      mov r16.xyz, r8.xyzx
      mov r17.xyz, r9.xyzx
      mov r2.y, r2.z
      mov r19.xyz, r1.xyzx
      mov r18.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r2.y
        breakc_nz r2.w
        mad r11.zw, r3.zzzw, cb0[13].wwww, -r19.xxxz
        mul r11.zw, r3.xxxy, |r11.zzzw|
        max r2.w, r11.w, r11.z
        sample_l r20.xyzw, r19.xzxx, t3.xyzw, s0, l(0.000000)
        mad r2.w, r2.w, cb0[18].w, |r19.y|
        add r2.w, -r2.w, r20.w
        mad r11.zw, r11.xxxy, cb0[13].wwww, -r19.xxxz
        dp2 r4.w, r11.zwzz, r11.zwzz
        add r4.w, -r4.w, cb0[12].x
        max r4.w, r4.w, l(0.000000)
        mad r2.w, -r4.w, cb0[12].y, r2.w
        lt r4.w, l(0.000000), r2.w
        if_nz r4.w
          add r4.w, -r2.w, l(1.000000)
          mul r21.xyz, r4.wwww, cb0[11].xyzx
          mul r22.w, r2.w, l(0.400000)
          dp3 r2.w, r13.xyzx, r13.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          dp3 r4.w, r14.xyzx, r14.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r15.xyzx, r15.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r6.w, r16.xyzx, r16.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r17.xyzx, r17.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          mul r23.xyz, r6.wwww, cb0[29].xyzx
          mad r23.xyz, cb0[31].xyzx, r7.wwww, r23.xyzx
          mad r23.xyz, cb0[27].xyzx, r5.wwww, r23.xyzx
          mad r23.xyz, cb0[25].xyzx, r4.wwww, r23.xyzx
          mad r23.xyz, cb0[23].xyzx, r2.wwww, r23.xyzx
          mad r20.xyz, r23.xyzx, r22.wwww, r20.xyzx
          mul r20.xyz, r22.wwww, r20.xyzx
          mul r22.xyz, r20.xyzx, r21.xyzx
          add r2.w, -r18.w, l(1.000000)
          mad r20.xyzw, r22.xyzw, r2.wwww, r18.xyzw
          lt r2.w, l(0.990000), r20.w
          if_nz r2.w
            mov r12.xyzw, r22.xyzw
            mov r18.xyzw, r20.xyzw
            break
          endif
          mov r12.xyzw, r22.xyzw
          mov r18.xyzw, r20.xyzw
        endif
        add r13.xyz, r4.xyzx, r13.xyzx
        add r14.xyz, r4.xyzx, r14.xyzx
        add r15.xyz, r4.xyzx, r15.xyzx
        add r16.xyz, r4.xyzx, r16.xyzx
        add r17.xyz, r4.xyzx, r17.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r19.xyz, r10.xyzx, r19.xyzx
      endloop
      lt r1.x, r18.w, l(0.990000)
      and r1.x, r1.x, l(0x3f800000)
      add r1.y, -r18.w, l(1.000000)
      mul r1.z, r2.y, r2.x
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r2.xyzw, r12.xyzw, r1.xxxx, r18.xyzw
      div r0.yzw, r0.yyzw, r1.wwww
      dp3 r0.y, r0.yzwy, cb0[33].xyzx
      mul r0.y, r0.y, cb0[36].w
      max r0.y, r0.y, l(0.000000)
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r2.w, r0.y
      add r1.xyz, -r2.xyzx, cb0[34].xyzx
      mad r2.xyz, r0.yyyy, r1.xyzx, r2.xyzx
      mul r1.xyzw, r2.xyzw, cb0[10].wwww
      mul o0.xyzw, r0.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used