// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed af6b86e1a058c8b9-ps.txt
// 3DMigoto: af6b86e1a058c8b9 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 145 4 11
//   undeciphered1a: 21
//   Keywords { "FOG_AREA_SPHERE" "FOG_VOID_SPHERE" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT3" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 592
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 400 [_FogPointLightPosition2] 3
//   Vector 416 [_FogPointLightColor2] 3
//   Vector 432 [_FogPointLightPosition3] 3
//   Vector 448 [_FogPointLightColor3] 3
//   Vector 464 [_SunPosition] 3
//   Vector 480 [_SunDir] 3
//   Vector 496 [_SunColor] 3
//   Vector 512 [_FogScatteringData]
//   Vector 528 [_FogScatteringData2]
//   Float 544 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:57:49 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 23
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r21.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed af6b86e1a058c8b9-ps.txt

mul r21.w, -r21.x, r21.y
mad r22.xyz, -r21.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.z, -cb0[13].x, r22.z
mov r1.xy, r22.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.zzwz
and r2.y, r2.z, r2.y
lt r2.z, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.xyzx, r0.wwww
  dp3 r1.w, r3.xyzx, r2.yzwy
  dp3 r2.y, r2.yzwy, r2.yzwy
  add r2.y, r2.y, -cb0[20].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.z, r2.y, l(0.000000)
  sqrt r2.w, r2.y
  movc r2.y, r2.z, r2.w, r2.y
  add r2.z, -r1.w, -r2.y
  max r2.z, r2.z, l(0.000000)
  min r2.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r2.w, r1.w
  add r1.w, -r2.z, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r1.xyz, r3.xyzx, r2.zzzz, r1.xyzx
    mul r4.xyz, r0.xyzx, r1.wwww
    div r4.xyz, r4.xyzx, r0.wwww
    add r4.xyz, r1.xyzx, r4.xyzx
    add r4.xyz, -r4.xyzx, cb0[17].xyzx
    dp3 r2.y, r4.xyzx, r4.xyzx
    sqrt r2.y, r2.y
    mad r2.y, r2.y, cb0[18].x, l(-1.000000)
    mad_sat r2.y, cb0[18].w, r2.y, l(1.000000)
    lt r3.w, l(0.000000), r2.y
    if_nz r3.w
      log r3.w, r1.w
      mul r3.w, r3.w, l(0.693147182)
      max r3.w, r3.w, l(0.000000)
      mad r3.w, r3.w, cb0[15].x, l(0.100000)
      mul r3.w, r3.w, cb0[13].z
      mul_sat r4.x, r2.w, cb0[15].y
      mul r3.w, r3.w, r4.x
      add r2.z, -r2.z, r2.w
      max r2.w, r3.w, l(0.010000)
      mul r0.xyz, r0.xyzx, r2.wwww
      div r0.xyz, r0.xyzx, r0.wwww
      div r0.w, r1.w, r2.w
      add r4.xyz, r1.xyzx, -cb0[21].xyzx
      add r5.xyz, r1.xyzx, -cb0[23].xyzx
      add r6.xyz, r1.xyzx, -cb0[25].xyzx
      add r7.xyz, r1.xyzx, -cb0[27].xyzx
      mul r8.xy, r0.xyxx, cb0[13].wwww
      mul r2.w, cb0[13].z, cb0[13].y
      div r8.z, r0.z, r2.w
      add r1.xy, r1.xyxx, cb0[14].xzxx
      mul r1.xy, r1.xyxx, cb0[13].wwww
      div r1.z, r1.z, r2.w
      add r9.xy, cb0[14].xyxx, cb0[19].xyxx
      frc r2.w, r2.x
      mad r0.w, r2.w, cb0[34].x, r0.w
      ge r1.w, r1.w, r2.z
      and r1.w, r1.w, l(0x3f800000)
      mov r10.xyzw, l(0,0,0,0)
      mov r11.xyz, r4.xyzx
      mov r12.xyz, r5.xyzx
      mov r13.xyz, r6.xyzx
      mov r14.xyz, r7.xyzx
      mov r2.z, r0.w
      mov r16.xyz, r1.xyzx
      mov r15.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r2.z
        breakc_nz r2.w
        mad r9.zw, r9.xxxy, cb0[13].wwww, -r16.xxxy
        mul r9.zw, r9.zzzw, cb0[20].xxxx
        dp2 r2.w, r9.zwzz, r9.zwzz
        sample_l r17.xyzw, r16.xyxx, t2.xyzw, s1, l(0.000000)
        mad r2.w, r2.w, cb0[20].w, |r16.z|
        add r2.w, -r2.w, r17.w
        lt r3.w, l(0.000000), r2.w
        if_nz r3.w
          add r3.w, -r2.w, l(1.000000)
          mul r18.xyz, r3.wwww, cb0[11].xyzx
          mul r19.w, r2.w, l(0.400000)
          dp3 r2.w, r11.xyzx, r11.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          dp3 r3.w, r12.xyzx, r12.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          dp3 r4.w, r13.xyzx, r13.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r14.xyzx, r14.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mul r20.xyz, r4.wwww, cb0[26].xyzx
          mad r20.xyz, cb0[28].xyzx, r5.wwww, r20.xyzx
          mad r20.xyz, cb0[24].xyzx, r3.wwww, r20.xyzx
          mad r20.xyz, cb0[22].xyzx, r2.wwww, r20.xyzx
          mad r17.xyz, r20.xyzx, r19.wwww, r17.xyzx
          mul r17.xyz, r19.wwww, r17.xyzx
          mul r19.xyz, r17.xyzx, r18.xyzx
          add r2.w, -r15.w, l(1.000000)
          mad r17.xyzw, r19.xyzw, r2.wwww, r15.xyzw
          lt r2.w, l(0.990000), r17.w
          if_nz r2.w
            mov r10.xyzw, r19.xyzw
            mov r15.xyzw, r17.xyzw
            break
          endif
          mov r10.xyzw, r19.xyzw
          mov r15.xyzw, r17.xyzw
        endif
        add r11.xyz, r0.xyzx, r11.xyzx
        add r12.xyz, r0.xyzx, r12.xyzx
        add r13.xyz, r0.xyzx, r13.xyzx
        add r14.xyz, r0.xyzx, r14.xyzx
        add r2.z, r2.z, l(-1.000000)
        add r16.xyz, r8.xyzx, r16.xyzx
      endloop
      lt r0.x, r15.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r15.w, l(1.000000)
      mul r0.z, r1.w, r2.z
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.z, r0.x
      mad r0.xyzw, r10.xyzw, r0.xxxx, r15.xyzw
      dp3 r1.x, r3.xyzx, cb0[30].xyzx
      mul r1.x, r1.x, cb0[33].w
      max r1.x, r1.x, l(0.000000)
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r0.w, r1.x
      add r1.yzw, -r0.xxyz, cb0[31].xxyz
      mad r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
      mul r0.xyzw, r0.xyzw, cb0[10].wwww
      mul r0.xyzw, r2.yyyy, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.xyzw, r1.xxxx
sample r4.xyzw, v1.xyxx, t3.xyzw, s0
sample r5.xyzw, v1.zwzz, t4.xyzw, s4
add r0.xyz, -r4.xyzx, r5.xyzx
mad r0.xyz, r3.wwww, r0.xyzx, r4.xyzx
mad_sat r0.w, -r0.w, r1.x, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, r3.xyzx
lt r0.w, cb0[2].y, l(0.000000)
add r1.x, -cb0[29].y, l(1.000000)
movc r0.w, r0.w, r1.x, cb0[29].y
add r1.x, -v1.x, cb0[29].x
add r1.y, r0.w, -v1.y
mad r0.w, r2.x, cb0[33].z, l(1.000000)
mul r0.w, r0.w, cb0[32].x
mov r2.xyz, l(0,0,0,0)
mov r1.zw, v1.xxxy
mov r2.w, cb0[33].x
mov r3.x, cb0[32].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r1.zw, r1.xxxy, r0.wwww, r1.zzzw
  sample_l r4.xyzw, r1.zwzz, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r2.wwww, r4.xyzx
  mad r2.xyz, r4.xyzx, cb0[32].wwww, r2.xyzx
  mul r2.w, r2.w, cb0[33].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r2.xyzx, cb0[32].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used