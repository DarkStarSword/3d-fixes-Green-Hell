// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a96a781ef37e0be3-ps.txt
// 3DMigoto: a96a781ef37e0be3 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 156 4 12
//   undeciphered1a: 20
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_BLUR_ON" "FOG_POINT_LIGHT2" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 416 [_FogPointLightPosition2] 3
//   Vector 432 [_FogPointLightColor2] 3
//   Vector 528 [_VolumetricFogSunWorldPos]
//   Vector 544 [_VolumetricFogSunShadowsData]
//   Float 560 [_Jitter]
//   Matrix 464 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_FogOfWar] 2D 4
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:54:09 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 22
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r20.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a96a781ef37e0be3-ps.txt

mul r20.w, -r20.x, r20.y
mad r21.xyz, -r20.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r21.y
mov r1.xz, r21.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r1.w
or r0.y, r0.y, r0.w
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r3.xyzw, r0.xyxx, t1.wxyz, s4
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r0.xyw, -r1.xyxz, r2.xwxz
    dp3 r1.w, r0.xywx, r0.xywx
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.yzw, r0.xxyw, r1.wwww
    dp3 r2.w, r3.yzwy, r2.xyzx
    dp3 r2.x, r2.xyzx, r2.xyzx
    add r2.x, r2.x, -cb0[18].y
    mad r2.x, r2.w, r2.w, -r2.x
    ge r2.y, r2.x, l(0.000000)
    sqrt r2.z, r2.x
    movc r2.x, r2.y, r2.z, r2.x
    add r2.y, -r2.x, -r2.w
    max r2.y, r2.y, l(0.000000)
    min r2.z, r1.w, cb0[12].z
    add r2.x, r2.x, -r2.w
    min r2.x, r2.z, r2.x
    add r2.x, -r2.y, r2.x
    ge r2.w, r2.x, l(0.000000)
    if_nz r2.w
      mad r4.xyz, r3.yzwy, r2.yyyy, r1.xyzx
      log r1.x, r2.x
      mul r1.x, r1.x, l(0.693147182)
      max r1.x, r1.x, l(0.000000)
      mad r1.x, r1.x, cb0[15].x, l(0.100000)
      mul r1.x, r1.x, cb0[13].z
      mul_sat r1.y, r2.z, cb0[15].y
      mul r1.x, r1.y, r1.x
      add r1.y, -r2.y, r2.z
      max r1.x, r1.x, l(0.010000)
      mul r3.yzw, r0.xxyw, r1.xxxx
      div r3.yzw, r3.yyzw, r1.wwww
      div r1.x, r2.x, r1.x
      add r5.xyz, r4.xyzx, -cb0[22].xyzx
      add r6.xyz, r4.xyzx, -cb0[24].xyzx
      add r7.xyz, r4.xyzx, -cb0[26].xyzx
      mul r8.xz, r3.yywy, cb0[13].wwww
      mul r1.z, cb0[13].z, cb0[13].y
      div r8.y, r3.z, r1.z
      add r2.zw, r4.xxxz, cb0[14].xxxz
      mul r2.zw, r2.zzzw, cb0[13].wwww
      div r1.z, r4.y, r1.z
      add r9.xy, cb0[14].xzxx, cb0[17].xzxx
      add r9.zw, cb0[14].xxxz, r21.xxxz
      frc r5.w, r0.z
      mad r1.x, r5.w, cb0[35].x, r1.x
      add r4.w, r4.y, cb0[13].x
      mul r10.xyz, r4.wwww, cb0[30].xywx
      mad r10.xyz, cb0[29].xywx, r4.xxxx, r10.xyzx
      mad r10.xyz, cb0[31].xywx, r4.zzzz, r10.xyzx
      add r10.xyz, r10.xyzx, cb0[32].xywx
      div r10.xy, r10.xyxx, r10.zzzz
      mad r10.xy, r10.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mad r4.y, r0.z, cb0[34].y, l(1.000000)
      mul r4.y, r2.x, r4.y
      mul r0.xyw, r0.xyxw, r4.yyyy
      div r0.xyw, r0.xyxw, r1.wwww
      add r0.xyw, r0.xyxw, r4.xwxz
      mul r11.xyz, r0.yyyy, cb0[30].xywx
      mad r11.xyz, cb0[29].xywx, r0.xxxx, r11.xyzx
      mad r11.xyz, cb0[31].xywx, r0.wwww, r11.xyzx
      add r11.xyz, r11.xyzx, cb0[32].xywx
      div r10.zw, r11.xxxy, r11.zzzz
      mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r1.w, -r2.y, cb0[33].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[34].x
      div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
      ge r1.y, r2.x, r1.y
      and r1.y, r1.y, l(0x3f800000)
      add r10.xy, -r10.zwzz, r10.xyxx
      add r4.xyz, -r0.xywx, r4.xwzx
      mov r11.xyzw, l(0,0,0,0)
      mov r12.xyz, r5.xyzx
      mov r13.xyz, r6.xyzx
      mov r14.xyz, r7.xyzx
      mov r16.xz, r2.zzwz
      mov r2.x, r1.x
      mov r16.y, r1.z
      mov r15.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r2.x
        breakc_nz r4.w
        mad r17.xy, r9.xyxx, cb0[13].wwww, -r16.xzxx
        mul r17.xy, r17.xyxx, cb0[18].xxxx
        dp2 r4.w, r17.xyxx, r17.xyxx
        sample_l r17.xyzw, r16.xzxx, t2.xyzw, s1, l(0.000000)
        mad r4.w, r4.w, cb0[18].w, |r16.y|
        add r4.w, -r4.w, r17.w
        mad r18.xy, r9.zwzz, cb0[13].wwww, -r16.xzxx
        dp2 r5.w, r18.xyxx, r18.xyxx
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r4.w, -r5.w, cb0[12].y, r4.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r18.xyz, r5.wwww, cb0[11].xyzx
          mul r18.w, r4.w, l(0.400000)
          mul r4.w, r2.y, r2.x
          mad r19.xy, r4.wwww, r10.xyxx, r10.zwzz
          sample_l r19.xyzw, r19.xyxx, t3.xyzw, s5, l(0.000000)
          dp4 r5.w, r19.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mad r19.xyz, r4.wwww, r4.xyzx, r0.xywx
          add r19.xyz, r19.xyzx, -cb0[33].xyzx
          dp3 r4.w, r19.xyzx, r19.xyzx
          sqrt r4.w, r4.w
          add_sat r4.w, -r4.w, r5.w
          mul r5.w, r1.w, r15.w
          add r4.w, r4.w, l(-1.000000)
          mad r5.w, r5.w, r4.w, l(1.000000)
          mad r4.w, cb0[34].z, r4.w, l(1.000000)
          mul r18.xyzw, r4.wwww, r18.xyzw
          dp3 r4.w, r12.xyzx, r12.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r6.w, r13.xyzx, r13.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r14.xyzx, r14.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          mul r19.xyz, r6.wwww, cb0[25].xyzx
          mad r19.xyz, cb0[27].xyzx, r7.wwww, r19.xyzx
          mad r19.xyz, cb0[23].xyzx, r4.wwww, r19.xyzx
          mul r19.xyz, r18.wwww, r19.xyzx
          mad r17.xyz, r17.xyzx, r5.wwww, r19.xyzx
          mul r17.xyz, r18.wwww, r17.xyzx
          mul r18.xyz, r17.xyzx, r18.xyzx
          add r4.w, -r15.w, l(1.000000)
          mad r17.xyzw, r18.xyzw, r4.wwww, r15.xyzw
          lt r4.w, l(0.990000), r17.w
          if_nz r4.w
            mov r11.xyzw, r18.xyzw
            mov r15.xyzw, r17.xyzw
            break
          endif
          mov r11.xyzw, r18.xyzw
          mov r15.xyzw, r17.xyzw
        endif
        add r12.xyz, r3.yzwy, r12.xyzx
        add r13.xyz, r3.yzwy, r13.xyzx
        add r14.xyz, r3.yzwy, r14.xyzx
        add r2.x, r2.x, l(-1.000000)
        add r16.xyz, r8.xyzx, r16.xyzx
      endloop
      lt r0.x, r15.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r15.w, l(1.000000)
      mul r0.w, r1.y, r2.x
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.w, r0.x
      mad r1.xyzw, r11.xyzw, r0.xxxx, r15.xyzw
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.z, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
sample r4.xyzw, v1.zwzz, t5.xyzw, s3
add r0.yzw, -r3.xxyz, r4.xxyz
mad r0.yzw, r2.wwww, r0.yyzw, r3.xxyz
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r0.yzwy, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used