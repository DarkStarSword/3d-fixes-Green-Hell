// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 489a707b46e7228d-ps.txt
// 3DMigoto: 489a707b46e7228d |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 167 2 10
//   undeciphered1a: 21
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_VOID_BOX" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 640
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 416 [_SunDir] 3
//   Vector 432 [_SunColor] 3
//   Vector 464 [_FogScatteringData2]
//   Vector 560 [_VolumetricFogSunWorldPos]
//   Vector 576 [_VolumetricFogSunShadowsData]
//   Float 592 [_Jitter]
//   Matrix 496 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:57:59 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[38], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 23
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r21.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 489a707b46e7228d-ps.txt

mul r21.w, -r21.x, r21.y
mad r22.xyz, -r21.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.y, -cb0[13].x, r22.y
mov r2.xz, r22.xxzx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.y, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.ywyy
and r3.x, r3.y, r3.x
lt r3.y, r2.y, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.y, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xwzx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[19].xyzx
  div r4.xyz, r1.wwww, r1.xyzx
  div r5.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r6.xyz, -r3.xyzx, -r5.xyzx
  mul r6.xyz, r4.xyzx, r6.xyzx
  add r3.xyz, -r3.xyzx, r5.xyzx
  mul r3.xyz, r3.xyzx, r4.xyzx
  min r5.xyz, r6.xyzx, r3.xyzx
  max r5.xy, r5.yzyy, r5.xxxx
  max r2.w, r5.y, r5.x
  max r2.w, r2.w, l(0.000000)
  max r3.xyz, r6.xyzx, r3.xyzx
  min r3.xy, r3.yzyy, r3.xxxx
  min r3.x, r3.y, r3.x
  min r3.y, r1.w, cb0[12].z
  min r3.x, r3.y, r3.x
  add r3.x, -r2.w, r3.x
  lt r3.z, l(0.000000), r3.x
  if_nz r3.z
    div r4.xyz, r2.wwww, r4.xyzx
    add r4.xyz, r2.xyzx, r4.xyzx
    mul r2.xyz, r1.xyzx, r3.xxxx
    div r2.xyz, r2.xyzx, r1.wwww
    add r2.xyz, r2.xyzx, r4.xyzx
    add r2.xyz, -r2.xyzx, cb0[17].xyzx
    mul r2.xyz, |r2.xyzx|, cb0[18].xyzx
    max r2.x, r2.y, r2.x
    max r2.x, r2.z, r2.x
    add r2.x, r2.x, l(-1.000000)
    mad_sat r2.x, cb0[18].w, r2.x, l(1.000000)
    lt r2.y, l(0.000000), r2.x
    if_nz r2.y
      mul r2.yz, v1.xxyx, cb1[6].xxyx
      dp2 r2.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.yzyy
      frc r2.y, r2.y
      add r2.y, r2.y, l(-0.500000)
      div r3.zw, cb0[20].xxxz, cb0[13].wwww
      log r2.z, r3.x
      mul r2.z, r2.z, l(0.693147182)
      max r2.z, r2.z, l(0.000000)
      mad r2.z, r2.z, cb0[15].x, l(0.100000)
      mul r2.z, r2.z, cb0[13].z
      mul_sat r5.x, r3.y, cb0[15].y
      mul r2.z, r2.z, r5.x
      add r3.y, -r2.w, r3.y
      max r2.z, r2.z, l(0.010000)
      mul r5.xyz, r1.xyzx, r2.zzzz
      div r5.xyz, r5.xyzx, r1.wwww
      div r2.z, r3.x, r2.z
      add r6.xyz, r4.xyzx, -cb0[21].xyzx
      add r7.xyz, r4.xyzx, -cb0[23].xyzx
      mul r8.xz, r5.xxzx, cb0[13].wwww
      mul r5.w, cb0[13].z, cb0[13].y
      div r8.y, r5.y, r5.w
      add r9.xy, r4.xzxx, cb0[14].xzxx
      mul r9.xy, r9.xyxx, cb0[13].wwww
      div r5.w, r4.y, r5.w
      add r9.zw, cb0[14].xxxz, cb0[19].xxxz
      add r10.xy, cb0[14].xzxx, r22.xzxx
      frc r6.w, r2.y
      mad r2.z, r6.w, cb0[37].x, r2.z
      add r4.w, r4.y, cb0[13].x
      mul r11.xyz, r4.wwww, cb0[32].xywx
      mad r11.xyz, cb0[31].xywx, r4.xxxx, r11.xyzx
      mad r11.xyz, cb0[33].xywx, r4.zzzz, r11.xyzx
      add r11.xyz, r11.xyzx, cb0[34].xywx
      div r10.zw, r11.xxxy, r11.zzzz
      mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r2.y, r2.y, cb0[36].y, l(1.000000)
      mul r2.y, r2.y, r3.x
      mul r11.xyz, r1.xyzx, r2.yyyy
      div r11.xyz, r11.xyzx, r1.wwww
      add r11.xyz, r4.xwzx, r11.xyzx
      mul r12.xyz, r11.yyyy, cb0[32].xywx
      mad r12.xyz, cb0[31].xywx, r11.xxxx, r12.xyzx
      mad r12.xyz, cb0[33].xywx, r11.zzzz, r12.xyzx
      add r12.xyz, r12.xyzx, cb0[34].xywx
      div r12.xy, r12.xyxx, r12.zzzz
      mad r12.xy, r12.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r2.y, -r2.w, cb0[35].w
      mul_sat r2.y, r2.y, l(0.0285714287)
      mul r2.y, r2.y, cb0[36].x
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
      ge r3.x, r3.x, r3.y
      and r3.x, r3.x, l(0x3f800000)
      add r10.zw, r10.zzzw, -r12.xxxy
      add r4.xyz, r4.xwzx, -r11.xyzx
      mov r13.xyzw, l(0,0,0,0)
      mov r14.xyz, r6.xyzx
      mov r15.xyz, r7.xyzx
      mov r17.xz, r9.xxyx
      mov r3.y, r2.z
      mov r17.y, r5.w
      mov r16.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r3.y
        breakc_nz r4.w
        mad r12.zw, r9.zzzw, cb0[13].wwww, -r17.xxxz
        mul r12.zw, r3.zzzw, |r12.zzzw|
        max r4.w, r12.w, r12.z
        sample_l r18.xyzw, r17.xzxx, t1.xyzw, s0, l(0.000000)
        mad r4.w, r4.w, cb0[20].w, |r17.y|
        add r4.w, -r4.w, r18.w
        mad r12.zw, r10.xxxy, cb0[13].wwww, -r17.xxxz
        dp2 r6.w, r12.zwzz, r12.zwzz
        add r6.w, -r6.w, cb0[12].x
        max r6.w, r6.w, l(0.000000)
        mad r4.w, -r6.w, cb0[12].y, r4.w
        lt r6.w, l(0.000000), r4.w
        if_nz r6.w
          add r6.w, -r4.w, l(1.000000)
          mul r19.xyz, r6.wwww, cb0[11].xyzx
          mul r19.w, r4.w, l(0.400000)
          mul r4.w, r2.w, r3.y
          mad r12.zw, r4.wwww, r10.zzzw, r12.xxxy
          sample_l r20.xyzw, r12.zwzz, t2.xyzw, s2, l(0.000000)
          dp4 r6.w, r20.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          mad r20.xyz, r4.wwww, r4.xyzx, r11.xyzx
          add r20.xyz, r20.xyzx, -cb0[35].xyzx
          dp3 r4.w, r20.xyzx, r20.xyzx
          sqrt r4.w, r4.w
          add_sat r4.w, -r4.w, r6.w
          mul r6.w, r2.y, r16.w
          add r4.w, r4.w, l(-1.000000)
          mad r6.w, r6.w, r4.w, l(1.000000)
          mad r4.w, cb0[36].z, r4.w, l(1.000000)
          mul r19.xyzw, r4.wwww, r19.xyzw
          dp3 r4.w, r14.xyzx, r14.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r7.w, r15.xyzx, r15.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          mul r20.xyz, r4.wwww, cb0[22].xyzx
          mad r20.xyz, cb0[24].xyzx, r7.wwww, r20.xyzx
          mul r20.xyz, r19.wwww, r20.xyzx
          mad r18.xyz, r18.xyzx, r6.wwww, r20.xyzx
          mul r18.xyz, r19.wwww, r18.xyzx
          mul r19.xyz, r18.xyzx, r19.xyzx
          add r4.w, -r16.w, l(1.000000)
          mad r18.xyzw, r19.xyzw, r4.wwww, r16.xyzw
          lt r4.w, l(0.990000), r18.w
          if_nz r4.w
            mov r13.xyzw, r19.xyzw
            mov r16.xyzw, r18.xyzw
            break
          endif
          mov r13.xyzw, r19.xyzw
          mov r16.xyzw, r18.xyzw
        endif
        add r14.xyz, r5.xyzx, r14.xyzx
        add r15.xyz, r5.xyzx, r15.xyzx
        add r3.y, r3.y, l(-1.000000)
        add r17.xyz, r8.xyzx, r17.xyzx
      endloop
      lt r2.y, r16.w, l(0.990000)
      and r2.y, r2.y, l(0x3f800000)
      add r2.z, -r16.w, l(1.000000)
      mul r2.w, r3.y, r3.x
      mul r2.y, r2.z, r2.y
      mul r2.y, r2.w, r2.y
      mad r3.xyzw, r13.xyzw, r2.yyyy, r16.xyzw
      div r1.xyz, r1.xyzx, r1.wwww
      dp3 r1.x, r1.xyzx, cb0[26].xyzx
      mul r1.x, r1.x, cb0[29].w
      max r1.x, r1.x, l(0.000000)
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r3.w, r1.x
      add r1.yzw, -r3.xxyz, cb0[27].xxyz
      mad r3.xyz, r1.xxxx, r1.yzwy, r3.xyzx
      mul r1.xyzw, r3.xyzw, cb0[10].wwww
      mul o0.xyzw, r2.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used