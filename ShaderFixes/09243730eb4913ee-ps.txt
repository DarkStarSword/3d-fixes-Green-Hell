// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 09243730eb4913ee-ps.txt
// 3DMigoto: 09243730eb4913ee |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 191 3 13
//   undeciphered1a: 27
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT5" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 784
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 416 [_FogPointLightPosition2] 3
//   Vector 432 [_FogPointLightColor2] 3
//   Vector 448 [_FogPointLightPosition3] 3
//   Vector 464 [_FogPointLightColor3] 3
//   Vector 480 [_FogPointLightPosition4] 3
//   Vector 496 [_FogPointLightColor4] 3
//   Vector 512 [_FogPointLightPosition5] 3
//   Vector 528 [_FogPointLightColor5] 3
//   Vector 544 [_SunPosition] 3
//   Vector 560 [_SunDir] 3
//   Vector 576 [_SunColor] 3
//   Vector 592 [_FogScatteringData]
//   Vector 608 [_FogScatteringData2]
//   Vector 704 [_VolumetricFogSunWorldPos]
//   Vector 720 [_VolumetricFogSunShadowsData]
//   Float 736 [_Jitter]
//   Matrix 640 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_FogOfWar] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 4 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:27:41 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[47], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 29
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r27.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 09243730eb4913ee-ps.txt

mul r27.w, -r27.x, r27.y
mad r28.xyz, -r27.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.z, -cb0[13].x, r28.z
mov r1.xy, r28.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.z, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.z
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.z, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r1.w
or r0.y, r0.y, r0.w
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xyxx, cb0[20].xyxx
    add r0.xy, r0.xyxx, -cb0[21].xyxx
    sample r3.xyzw, r0.xyxx, t1.wxyz, s3
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.z, l(0.000010)
    add r0.xyw, -r1.xyxz, r2.xyxw
    dp3 r1.w, r0.xywx, r0.xywx
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.yzw, r0.xxyw, r1.wwww
    dp3 r2.w, r3.yzwy, r2.xyzx
    dp3 r2.x, r2.xyzx, r2.xyzx
    add r2.x, r2.x, -cb0[18].y
    mad r2.x, r2.w, r2.w, -r2.x
    ge r2.y, r2.x, l(0.000000)
    sqrt r2.z, r2.x
    movc r2.x, r2.y, r2.z, r2.x
    add r2.y, -r2.x, -r2.w
    max r2.y, r2.y, l(0.000000)
    min r2.z, r1.w, cb0[12].z
    add r2.x, r2.x, -r2.w
    min r2.x, r2.z, r2.x
    add r2.x, -r2.y, r2.x
    ge r2.w, r2.x, l(0.000000)
    if_nz r2.w
      mad r4.xyz, r3.yzwy, r2.yyyy, r1.xyzx
      log r1.x, r2.x
      mul r1.x, r1.x, l(0.693147182)
      max r1.x, r1.x, l(0.000000)
      mad r1.x, r1.x, cb0[15].x, l(0.100000)
      mul r1.x, r1.x, cb0[13].z
      mul_sat r1.y, r2.z, cb0[15].y
      mul r1.x, r1.y, r1.x
      add r1.y, -r2.y, r2.z
      max r1.x, r1.x, l(0.010000)
      mul r5.xyz, r0.xywx, r1.xxxx
      div r5.xyz, r5.xyzx, r1.wwww
      div r1.x, r2.x, r1.x
      add r6.xyz, r4.xyzx, -cb0[22].xyzx
      add r7.xyz, r4.xyzx, -cb0[24].xyzx
      add r8.xyz, r4.xyzx, -cb0[26].xyzx
      add r9.xyz, r4.xyzx, -cb0[28].xyzx
      add r10.xyz, r4.xyzx, -cb0[30].xyzx
      add r11.xyz, r4.xyzx, -cb0[32].xyzx
      mul r12.xy, r5.xyxx, cb0[13].wwww
      mul r1.z, cb0[13].z, cb0[13].y
      div r12.z, r5.z, r1.z
      add r2.zw, r4.xxxy, cb0[14].xxxz
      mul r2.zw, r2.zzzw, cb0[13].wwww
      div r1.z, r4.z, r1.z
      add r13.xy, cb0[14].xyxx, cb0[17].xyxx
      add r13.zw, cb0[14].xxxy, r28.xxxy
      frc r5.w, r0.z
      mad r1.x, r5.w, cb0[46].x, r1.x
      add r4.w, r4.z, cb0[13].x
      mul r14.xyz, r4.yyyy, cb0[41].xywx
      mad r14.xyz, cb0[40].xywx, r4.xxxx, r14.xyzx
      mad r14.xyz, cb0[42].xywx, r4.wwww, r14.xyzx
      add r14.xyz, r14.xyzx, cb0[43].xywx
      div r14.xy, r14.xyxx, r14.zzzz
      mad r14.xy, r14.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mad r4.z, r0.z, cb0[45].y, l(1.000000)
      mul r4.z, r2.x, r4.z
      mul r0.xyw, r0.xyxw, r4.zzzz
      div r0.xyw, r0.xyxw, r1.wwww
      add r0.xyw, r0.xyxw, r4.xyxw
      mul r15.xyz, r0.yyyy, cb0[41].xywx
      mad r15.xyz, cb0[40].xywx, r0.xxxx, r15.xyzx
      mad r15.xyz, cb0[42].xywx, r0.wwww, r15.xyzx
      add r15.xyz, r15.xyzx, cb0[43].xywx
      div r14.zw, r15.xxxy, r15.zzzz
      mad r14.zw, r14.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r1.w, -r2.y, cb0[44].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[45].x
      div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
      ge r1.y, r2.x, r1.y
      and r1.y, r1.y, l(0x3f800000)
      add r14.xy, -r14.zwzz, r14.xyxx
      add r4.xyz, -r0.xywx, r4.xywx
      mov r15.xyzw, l(0,0,0,0)
      mov r16.xyz, r6.xyzx
      mov r17.xyz, r7.xyzx
      mov r18.xyz, r8.xyzx
      mov r19.xyz, r9.xyzx
      mov r20.xyz, r10.xyzx
      mov r21.xyz, r11.xyzx
      mov r23.xy, r2.zwzz
      mov r2.x, r1.x
      mov r23.z, r1.z
      mov r22.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r2.x
        breakc_nz r4.w
        mad r24.xy, r13.xyxx, cb0[13].wwww, -r23.xyxx
        mul r24.xy, r24.xyxx, cb0[18].xxxx
        dp2 r4.w, r24.xyxx, r24.xyxx
        sample_l r24.xyzw, r23.xyxx, t2.xyzw, s1, l(0.000000)
        mad r4.w, r4.w, cb0[18].w, |r23.z|
        add r4.w, -r4.w, r24.w
        mad r25.xy, r13.zwzz, cb0[13].wwww, -r23.xyxx
        dp2 r5.w, r25.xyxx, r25.xyxx
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r4.w, -r5.w, cb0[12].y, r4.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r25.xyz, r5.wwww, cb0[11].xyzx
          mul r25.w, r4.w, l(0.400000)
          mul r4.w, r2.y, r2.x
          mad r26.xy, r4.wwww, r14.xyxx, r14.zwzz
          sample_l r26.xyzw, r26.xyxx, t3.xyzw, s4, l(0.000000)
          dp4 r5.w, r26.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mad r26.xyz, r4.wwww, r4.xyzx, r0.xywx
          add r26.xyz, r26.xyzx, -cb0[44].xyzx
          dp3 r4.w, r26.xyzx, r26.xyzx
          sqrt r4.w, r4.w
          add_sat r4.w, -r4.w, r5.w
          mul r5.w, r1.w, r22.w
          add r4.w, r4.w, l(-1.000000)
          mad r5.w, r5.w, r4.w, l(1.000000)
          mad r4.w, cb0[45].z, r4.w, l(1.000000)
          mul r25.xyzw, r4.wwww, r25.xyzw
          dp3 r4.w, r16.xyzx, r16.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r6.w, r17.xyzx, r17.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r18.xyzx, r18.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          dp3 r8.w, r19.xyzx, r19.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          dp3 r9.w, r20.xyzx, r20.xyzx
          div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
          dp3 r10.w, r21.xyzx, r21.xyzx
          div r10.w, l(1.000000, 1.000000, 1.000000, 1.000000), r10.w
          mul r26.xyz, r9.wwww, cb0[31].xyzx
          mad r26.xyz, cb0[33].xyzx, r10.wwww, r26.xyzx
          mad r26.xyz, cb0[29].xyzx, r8.wwww, r26.xyzx
          mad r26.xyz, cb0[27].xyzx, r7.wwww, r26.xyzx
          mad r26.xyz, cb0[25].xyzx, r6.wwww, r26.xyzx
          mad r26.xyz, cb0[23].xyzx, r4.wwww, r26.xyzx
          mul r26.xyz, r25.wwww, r26.xyzx
          mad r24.xyz, r24.xyzx, r5.wwww, r26.xyzx
          mul r24.xyz, r25.wwww, r24.xyzx
          mul r25.xyz, r24.xyzx, r25.xyzx
          add r4.w, -r22.w, l(1.000000)
          mad r24.xyzw, r25.xyzw, r4.wwww, r22.xyzw
          lt r4.w, l(0.990000), r24.w
          if_nz r4.w
            mov r15.xyzw, r25.xyzw
            mov r22.xyzw, r24.xyzw
            break
          endif
          mov r15.xyzw, r25.xyzw
          mov r22.xyzw, r24.xyzw
        endif
        add r16.xyz, r5.xyzx, r16.xyzx
        add r17.xyz, r5.xyzx, r17.xyzx
        add r18.xyz, r5.xyzx, r18.xyzx
        add r19.xyz, r5.xyzx, r19.xyzx
        add r20.xyz, r5.xyzx, r20.xyzx
        add r21.xyz, r5.xyzx, r21.xyzx
        add r2.x, r2.x, l(-1.000000)
        add r23.xyz, r12.xyzx, r23.xyzx
      endloop
      lt r0.x, r22.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r22.w, l(1.000000)
      mul r0.w, r1.y, r2.x
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.w, r0.x
      mad r1.xyzw, r15.xyzw, r0.xxxx, r22.xyzw
      dp3 r0.x, r3.yzwy, cb0[35].xyzx
      mul r0.x, r0.x, cb0[38].w
      max r0.x, r0.x, l(0.000000)
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r1.w, r0.x
      add r2.xyz, -r1.xyzx, cb0[36].xyzx
      mad r1.xyz, r0.xxxx, r2.xyzx, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.z, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad r0.xyw, r3.xyxz, r0.xxxx, r2.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[34].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[34].y
add r2.x, -v1.x, cb0[34].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[38].z, l(1.000000)
mul r0.z, r0.z, cb0[37].x
mov r1.xyz, l(0,0,0,0)
mov r3.xy, v1.xyxx
mov r1.w, cb0[38].x
mov r2.z, cb0[37].y
loop
  ge r3.z, l(0.000000), r2.z
  breakc_nz r3.z
  mad r3.xy, r2.xyxx, r0.zzzz, r3.xyxx
  sample_l r4.xyzw, r3.xyxx, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[37].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[38].y
  add r2.z, r2.z, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[37].zzzz, r0.xywx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used