// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4d0be86c871a68d8-ps.txt
// 3DMigoto: 4d0be86c871a68d8 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 205 5 10
//   undeciphered1a: 29
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT5" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 752
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogSkyColor]
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_FogPointLightPosition2] 3
//   Vector 400 [_FogPointLightColor2] 3
//   Vector 416 [_FogPointLightPosition3] 3
//   Vector 432 [_FogPointLightColor3] 3
//   Vector 448 [_FogPointLightPosition4] 3
//   Vector 464 [_FogPointLightColor4] 3
//   Vector 480 [_FogPointLightPosition5] 3
//   Vector 496 [_FogPointLightColor5] 3
//   Vector 512 [_SunPosition] 3
//   Vector 528 [_SunDir] 3
//   Vector 544 [_SunColor] 3
//   Vector 560 [_FogScatteringData]
//   Vector 576 [_FogScatteringData2]
//   Vector 672 [_VolumetricFogSunWorldPos]
//   Vector 688 [_VolumetricFogSunShadowsData]
//   Float 704 [_Jitter]
//   Matrix 608 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:00:09 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[45], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 31
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r29.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4d0be86c871a68d8-ps.txt

mul r29.w, -r29.x, r29.y
mad r30.xyz, -r29.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r30.y
mov r1.xz, r30.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  add r4.xyz, r1.xyzx, -cb0[17].xyzx
  div r5.xyz, r3.xyzx, r0.wwww
  dp3 r1.w, r5.xyzx, r4.xyzx
  dp3 r2.y, r4.xyzx, r4.xyzx
  add r2.y, r2.y, -cb0[18].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.w, r2.y, l(0.000000)
  sqrt r3.w, r2.y
  movc r2.y, r2.w, r3.w, r2.y
  add r2.w, -r1.w, -r2.y
  max r2.w, r2.w, l(0.000000)
  min r3.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r3.w, r1.w
  add r1.w, -r2.w, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r4.xyz, r5.xyzx, r2.wwww, r1.xyzx
    log r1.x, r1.w
    mul r1.x, r1.x, l(0.693147182)
    max r1.x, r1.x, l(0.000000)
    mad r1.x, r1.x, cb0[15].x, l(0.100000)
    mul r1.x, r1.x, cb0[13].z
    mul_sat r1.y, r3.w, cb0[15].y
    mul r1.x, r1.y, r1.x
    add r1.y, -r2.w, r3.w
    max r1.x, r1.x, l(0.010000)
    mul r6.xyz, r1.xxxx, r3.xyzx
    div r6.xyz, r6.xyzx, r0.wwww
    div r1.x, r1.w, r1.x
    add r7.xyz, r4.xyzx, -cb0[20].xyzx
    add r8.xyz, r4.xyzx, -cb0[22].xyzx
    add r9.xyz, r4.xyzx, -cb0[24].xyzx
    add r10.xyz, r4.xyzx, -cb0[26].xyzx
    add r11.xyz, r4.xyzx, -cb0[28].xyzx
    add r12.xyz, r4.xyzx, -cb0[30].xyzx
    mul r13.xz, r6.xxzx, cb0[13].wwww
    mul r1.z, cb0[13].z, cb0[13].y
    div r13.y, r6.y, r1.z
    add r14.xy, r4.xzxx, cb0[14].xzxx
    mul r14.xy, r14.xyxx, cb0[13].wwww
    div r1.z, r4.y, r1.z
    add r14.zw, cb0[14].xxxz, cb0[17].xxxz
    add r15.xy, cb0[14].xzxx, r30.xzxx
    frc r2.y, r0.z
    mad r1.x, r2.y, cb0[44].x, r1.x
    add r4.w, r4.y, cb0[13].x
    mul r16.xyz, r4.wwww, cb0[39].xywx
    mad r16.xyz, cb0[38].xywx, r4.xxxx, r16.xyzx
    mad r16.xyz, cb0[40].xywx, r4.zzzz, r16.xyzx
    add r16.xyz, r16.xyzx, cb0[41].xywx
    div r15.zw, r16.xxxy, r16.zzzz
    mad r15.zw, r15.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    mad r2.y, r0.z, cb0[43].y, l(1.000000)
    mul r2.y, r1.w, r2.y
    mul r3.xyz, r3.xyzx, r2.yyyy
    div r3.xyz, r3.xyzx, r0.wwww
    add r3.xyz, r3.xyzx, r4.xwzx
    mul r16.xyz, r3.yyyy, cb0[39].xywx
    mad r16.xyz, cb0[38].xywx, r3.xxxx, r16.xyzx
    mad r16.xyz, cb0[40].xywx, r3.zzzz, r16.xyzx
    add r16.xyz, r16.xyzx, cb0[41].xywx
    div r16.xy, r16.xyxx, r16.zzzz
    mad r16.xy, r16.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r0.w, -r2.w, cb0[42].w
    mul_sat r0.w, r0.w, l(0.0285714287)
    mul r0.w, r0.w, cb0[43].x
    div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
    ge r1.y, r1.w, r1.y
    and r1.y, r1.y, l(0x3f800000)
    add r15.zw, r15.zzzw, -r16.xxxy
    add r4.xyz, -r3.xyzx, r4.xwzx
    mov r17.xyzw, l(0,0,0,0)
    mov r18.xyz, r7.xyzx
    mov r19.xyz, r8.xyzx
    mov r20.xyz, r9.xyzx
    mov r21.xyz, r10.xyzx
    mov r22.xyz, r11.xyzx
    mov r23.xyz, r12.xyzx
    mov r25.xz, r14.xxyx
    mov r1.w, r1.x
    mov r25.y, r1.z
    mov r24.xyzw, l(0,0,0,0)
    loop
      ge r2.w, l(1.000000), r1.w
      breakc_nz r2.w
      mad r16.zw, r14.zzzw, cb0[13].wwww, -r25.xxxz
      mul r16.zw, r16.zzzw, cb0[18].xxxx
      dp2 r2.w, r16.zwzz, r16.zwzz
      sample_l r26.xyzw, r25.xzxx, t2.xyzw, s1, l(0.000000)
      mad r2.w, r2.w, cb0[18].w, |r25.y|
      add r2.w, -r2.w, r26.w
      mad r16.zw, r15.xxxy, cb0[13].wwww, -r25.xxxz
      dp2 r3.w, r16.zwzz, r16.zwzz
      add r3.w, -r3.w, cb0[12].x
      max r3.w, r3.w, l(0.000000)
      mad r2.w, -r3.w, cb0[12].y, r2.w
      lt r3.w, l(0.000000), r2.w
      if_nz r3.w
        add r3.w, -r2.w, l(1.000000)
        mul r27.xyz, r3.wwww, cb0[11].xyzx
        mul r27.w, r2.w, l(0.400000)
        mul r2.w, r2.y, r1.w
        mad r16.zw, r2.wwww, r15.zzzw, r16.xxxy
        sample_l r28.xyzw, r16.zwzz, t3.xyzw, s5, l(0.000000)
        dp4 r3.w, r28.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        mad r28.xyz, r2.wwww, r4.xyzx, r3.xyzx
        add r28.xyz, r28.xyzx, -cb0[42].xyzx
        dp3 r2.w, r28.xyzx, r28.xyzx
        sqrt r2.w, r2.w
        add_sat r2.w, -r2.w, r3.w
        mul r3.w, r0.w, r24.w
        add r2.w, r2.w, l(-1.000000)
        mad r3.w, r3.w, r2.w, l(1.000000)
        mad r2.w, cb0[43].z, r2.w, l(1.000000)
        mul r27.xyzw, r2.wwww, r27.xyzw
        dp3 r2.w, r18.xyzx, r18.xyzx
        div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
        dp3 r4.w, r19.xyzx, r19.xyzx
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        dp3 r5.w, r20.xyzx, r20.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        dp3 r6.w, r21.xyzx, r21.xyzx
        div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
        dp3 r7.w, r22.xyzx, r22.xyzx
        div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
        dp3 r8.w, r23.xyzx, r23.xyzx
        div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
        mul r28.xyz, r7.wwww, cb0[29].xyzx
        mad r28.xyz, cb0[31].xyzx, r8.wwww, r28.xyzx
        mad r28.xyz, cb0[27].xyzx, r6.wwww, r28.xyzx
        mad r28.xyz, cb0[25].xyzx, r5.wwww, r28.xyzx
        mad r28.xyz, cb0[23].xyzx, r4.wwww, r28.xyzx
        mad r28.xyz, cb0[21].xyzx, r2.wwww, r28.xyzx
        mul r28.xyz, r27.wwww, r28.xyzx
        mad r26.xyz, r26.xyzx, r3.wwww, r28.xyzx
        mul r26.xyz, r27.wwww, r26.xyzx
        mul r27.xyz, r26.xyzx, r27.xyzx
        add r2.w, -r24.w, l(1.000000)
        mad r26.xyzw, r27.xyzw, r2.wwww, r24.xyzw
        lt r2.w, l(0.990000), r26.w
        if_nz r2.w
          mov r17.xyzw, r27.xyzw
          mov r24.xyzw, r26.xyzw
          break
        endif
        mov r17.xyzw, r27.xyzw
        mov r24.xyzw, r26.xyzw
      endif
      add r18.xyz, r6.xyzx, r18.xyzx
      add r19.xyz, r6.xyzx, r19.xyzx
      add r20.xyz, r6.xyzx, r20.xyzx
      add r21.xyz, r6.xyzx, r21.xyzx
      add r22.xyz, r6.xyzx, r22.xyzx
      add r23.xyz, r6.xyzx, r23.xyzx
      add r1.w, r1.w, l(-1.000000)
      add r25.xyz, r13.xyzx, r25.xyzx
    endloop
    lt r0.w, r24.w, l(0.990000)
    and r0.w, r0.w, l(0x3f800000)
    add r1.x, -r24.w, l(1.000000)
    mul r1.y, r1.w, r1.y
    mul r0.w, r0.w, r1.x
    mul r0.w, r1.y, r0.w
    mad r1.xyzw, r17.xyzw, r0.wwww, r24.xyzw
    dp3 r0.w, r5.xyzx, cb0[33].xyzx
    mul r0.w, r0.w, cb0[36].w
    max r0.w, r0.w, l(0.000000)
    mul r0.w, r0.w, r0.w
    mul r0.w, r0.w, r0.w
    mul r0.w, r0.w, r0.w
    mul r0.w, r1.w, r0.w
    add r3.xyz, -r1.xyzx, cb0[34].xyzx
    mad r1.xyz, r0.wwww, r3.xyzx, r1.xyzx
    mul r1.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r2.y, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
sample r5.xyzw, v1.zwzz, t5.xyzw, s4
add r1.xyz, -r4.xyzx, r5.xyzx
mad r1.xyz, r3.wwww, r1.xyzx, r4.xyzx
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r2.xz, r0.xxxx, r2.xxzx
  mad r2.xz, r2.xxzx, cb0[13].wwww, cb0[16].zzzz
  sample r4.xyzw, r2.xzxx, t2.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r4.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r2.xzw, -r1.xxyz, cb0[19].xxyz
  mad r1.xyz, r0.xxxx, r2.xzwx, r1.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyw, r1.xyxz, r0.xxxx, r3.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[32].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[32].y
add r2.x, -v1.x, cb0[32].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[36].z, l(1.000000)
mul r0.z, r0.z, cb0[35].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[36].x
mov r3.x, cb0[35].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.zzzz, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[35].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[36].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[35].zzzz, r0.xywx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used