// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 62986bee47d30c81-ps.txt
// 3DMigoto: 62986bee47d30c81 |    Unity headers extracted from Amplify_mia_disappear_hair
//    Shader "Amplify/mia_disappear_hair" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="Transparent" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry+0" "RenderType"="Transparent" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_mia_disappear_hair:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 157 6 6
//   undeciphered1a: 14
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "INSTANCING_ON" }
//   undeciphered2: 1 8 10 7 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 144
//   Vector 32 [_LightColor0]
//   Vector 64 [_Normal_ST]
//   Float 80 [_useRtomultiply]
//   Vector 96 [_Albedo_ST]
//   Float 112 [_use_albedo_alpha]
//   Float 116 [_Cutoff]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "UnityDrawCallInfo" 16
//   ScalarInt 0 [unity_BaseInstanceID]
//   ConstBuffer "UnityInstancing_PerDraw0" 256
//   Struct 0 [unity_Builtins0Array] 2 128
//   Matrix 0 [unity_ObjectToWorldArray]
//   Matrix 64 [unity_WorldToObjectArray]
//   ConstBuffer "UnityInstancing_Amplifymia_disappear_hair" 256
//   Struct 0 [Amplifymia_disappear_hairArray] 2 128
//   Vector 0 [_Albedo_color_multiply]
//   Vector 16 [_AlbedoTint]
//   Vector 32 [_AdditionalTint]
//   Vector 48 [_emmisive]
//   Vector 64 [_SpecularTint]
//   Float 80 [_main_normal_scale]
//   Float 84 [_detail_normal_scale]
//   Float 88 [_detail_tiling]
//   Float 92 [_anistropyX]
//   Float 96 [_anistropyy]
//   Float 100 [_specularintensity]
//   Float 104 [_smooothnes]
//   Float 108 [_disappear_mask_multiply]
//   Float 112 [_disolve_texture_tile]
//   Float 116 [_disappear_mask_size]
//   SetTexture 0 [_Normal] 2D 3
//   SetTexture 1 [_Normal_detail] 2D 4
//   SetTexture 2 [_Albedo] 2D 5
//   SetTexture 3 [_dissolveguide] 2D 6
//   SetTexture 4 [_ShadowMapTexture] 2D 2
//   SetTexture 5 [unity_SpecCube0] CUBE 0
//   SetTexture 6 [unity_SpecCube1] CUBE -1
//   SetTexture 7 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerFrame" 4
//   BindCB "UnityReflectionProbes" 5
//   BindCB "UnityProbeVolume" 6
//   BindCB "UnityDrawCallInfo" 7
//   BindCB "UnityInstancing_PerDraw0" 8
//   BindCB "UnityInstancing_Amplifymia_disappear_hair" 9
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:11:50 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float
// TEXCOORD                 7   xyzw        6     NONE   float   xy w
// TEXCOORD                 8   xyzw        7     NONE   float
// SV_InstanceID            0   x           8     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_constantbuffer cb5[8], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_constantbuffer cb7[1], immediateIndexed
dcl_constantbuffer cb8[16], dynamicIndexed
dcl_constantbuffer cb9[16], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v6.xyw
dcl_input_ps constant v8.x
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 62986bee47d30c81-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

iadd r0.x, v8.x, cb7[0].x
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r0.yzw, -r1.xxyz, r15.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r2.xyz, r0.yzwy, r1.wwww
ishl r0.x, r0.x, l(3)
mad r3.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
mul r3.zw, v1.xxxy, cb9[r0.x + 5].zzzz
sample r4.xyzw, r3.xyxx, t0.xyzw, s3
mul r4.x, r4.w, r4.x
mad r3.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r4.xy, r3.xyxx, cb9[r0.x + 5].xxxx
dp2 r2.w, r4.xyxx, r4.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r2.w, r2.w
sample r4.xyzw, r3.zwzz, t1.xyzw, s4
mul r4.x, r4.w, r4.x
mad r3.zw, r4.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r3.zw, r3.zzzw, cb9[r0.x + 5].yyyy
dp2 r4.x, r3.zwzz, r3.zwzz
min r4.x, r4.x, l(1.000000)
add r4.x, -r4.x, l(1.000000)
sqrt r4.x, r4.x
mad r3.xy, r3.xyxx, cb9[r0.x + 5].xxxx, r3.zwzz
mul r3.z, r2.w, r4.x
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
mad r4.xy, v1.xyxx, cb0[6].xyxx, cb0[6].zwzz
sample r4.xyzw, r4.xyxx, t2.xyzw, s5
add r5.xyz, -r4.xyzx, r4.xxxx
mad r5.xyz, cb0[5].xxxx, r5.xyzx, r4.xyzx
mul r5.xyz, r5.xyzx, cb9[r0.x + 0].xyzx
mul r6.xyz, v3.wwww, cb8[r0.x + 5].xyzx
mad r6.xyz, cb8[r0.x + 4].xyzx, v2.wwww, r6.xyzx
mad r6.xyz, cb8[r0.x + 6].xyzx, v4.wwww, r6.xyzx
add r6.xyz, r6.xyzx, cb8[r0.x + 7].xyzx
mul r2.w, r6.y, cb8[r0.x + 1].y
mad r2.w, cb8[r0.x + 0].y, r6.x, r2.w
mad r2.w, cb8[r0.x + 2].y, r6.z, r2.w
mul r6.xy, v1.xyxx, cb9[r0.x + 7].xxxx
sample r6.xyzw, r6.xyxx, t3.xyzw, s6
mad r2.w, r6.x, cb9[r0.x + 7].y, r2.w
ge r2.w, r2.w, cb9[r0.x + 6].w
movc r6.xy, r2.wwww, l(0,-0.000000,0,0), l(1.000000,-1.000000,0,0)
mad r2.w, r4.w, r6.x, r6.y
mad r2.w, cb0[7].x, r2.w, r6.x
add r2.w, r2.w, -cb0[7].y
lt r2.w, r2.w, l(0.000000)
discard_nz r2.w
mov r6.x, cb4[9].z
mov r6.y, cb4[10].z
mov r6.z, cb4[11].z
dp3 r2.w, r0.yzwy, r6.xyzx
add r6.xyz, r1.xyzx, -cb3[25].xyzx
dp3 r3.w, r6.xyzx, r6.xyzx
sqrt r3.w, r3.w
add r3.w, -r2.w, r3.w
mad r2.w, cb3[25].w, r3.w, r2.w
mad_sat r2.w, r2.w, cb3[24].z, cb3[24].w
eq r3.w, cb6[0].x, l(1.000000)
if_nz r3.w
  eq r3.w, cb6[0].y, l(1.000000)
  mul r6.xyz, v3.wwww, cb6[2].xyzx
  mad r6.xyz, cb6[1].xyzx, v2.wwww, r6.xyzx
  mad r6.xyz, cb6[3].xyzx, v4.wwww, r6.xyzx
  add r6.xyz, r6.xyzx, cb6[4].xyzx
  movc r6.xyz, r3.wwww, r6.xyzx, r1.xyzx
  add r6.xyz, r6.xyzx, -cb6[6].xyzx
  mul r6.yzw, r6.xxyz, cb6[5].xxyz
  mad r3.w, r6.y, l(0.250000), l(0.750000)
  mad r4.w, cb6[0].z, l(0.500000), l(0.750000)
  max r6.x, r3.w, r4.w
  sample r6.xyzw, r6.xzwx, t7.xyzw, s1
else
  mov r6.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r3.w, r6.xyzw, cb2[46].xyzw
div r6.xy, v6.xyxx, v6.wwww
sample r6.xyzw, r6.xyxx, t4.xyzw, s2
add r3.w, r3.w, -r6.x
mad r2.w, r2.w, r3.w, r6.x
dp3 r6.x, v2.xyzx, r3.xyzx
dp3 r6.y, v3.xyzx, r3.xyzx
dp3 r6.z, v4.xyzx, r3.xyzx
dp3 r3.x, r6.xyzx, r6.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, r6.xyzx
add r3.w, l(1.000000), -cb9[r0.x + 6].z
dp3 r4.w, -r2.xyzx, r3.xyzx
add r4.w, r4.w, r4.w
mad r6.xyz, r3.xyzx, -r4.wwww, -r2.xyzx
mul r7.xyz, r2.wwww, cb0[2].xyzx
lt r2.w, l(0.000000), cb5[2].w
if_nz r2.w
  dp3 r2.w, r6.xyzx, r6.xyzx
  rsq r2.w, r2.w
  mul r8.xyz, r2.wwww, r6.xyzx
  add r9.xyz, -r1.xyzx, cb5[0].xyzx
  div r9.xyz, r9.xyzx, r8.xyzx
  add r10.xyz, -r1.xyzx, cb5[1].xyzx
  div r10.xyz, r10.xyzx, r8.xyzx
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
  movc r9.xyz, r11.xyzx, r9.xyzx, r10.xyzx
  min r2.w, r9.y, r9.x
  min r2.w, r9.z, r2.w
  add r9.xyz, r1.xyzx, -cb5[2].xyzx
  mad r8.xyz, r8.xyzx, r2.wwww, r9.xyzx
else
  mov r8.xyz, r6.xyzx
endif
mad r2.w, -r3.w, l(0.700000), l(1.700000)
mul r2.w, r2.w, r3.w
mul r2.w, r2.w, l(6.000000)
sample_l r8.xyzw, r8.xyzx, t5.xyzw, s0, r2.w
add r4.w, r8.w, l(-1.000000)
mad r4.w, cb5[3].w, r4.w, l(1.000000)
log r4.w, r4.w
mul r4.w, r4.w, cb5[3].y
exp r4.w, r4.w
mul r4.w, r4.w, cb5[3].x
mul r9.xyz, r8.xyzx, r4.wwww
lt r5.w, cb5[1].w, l(0.999990)
if_nz r5.w
  lt r5.w, l(0.000000), cb5[6].w
  if_nz r5.w
    dp3 r5.w, r6.xyzx, r6.xyzx
    rsq r5.w, r5.w
    mul r10.xyz, r5.wwww, r6.xyzx
    add r11.xyz, -r1.xyzx, cb5[4].xyzx
    div r11.xyz, r11.xyzx, r10.xyzx
    add r12.xyz, -r1.xyzx, cb5[5].xyzx
    div r12.xyz, r12.xyzx, r10.xyzx
    lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
    min r5.w, r11.y, r11.x
    min r5.w, r11.z, r5.w
    add r1.xyz, r1.xyzx, -cb5[6].xyzx
    mad r6.xyz, r10.xyzx, r5.wwww, r1.xyzx
  endif
  sample_l r6.xyzw, r6.xyzx, t6.xyzw, s0, r2.w
  add r1.x, r6.w, l(-1.000000)
  mad r1.x, cb5[7].w, r1.x, l(1.000000)
  log r1.x, r1.x
  mul r1.x, r1.x, cb5[7].y
  exp r1.x, r1.x
  mul r1.x, r1.x, cb5[7].x
  mul r1.xyz, r6.xyzx, r1.xxxx
  mad r6.xyz, r4.wwww, r8.xyzx, -r1.xyzx
  mad r9.xyz, cb5[1].wwww, r6.xyzx, r1.xyzx
endif
mad r0.yzw, r0.yyzw, r1.wwww, cb2[0].xxyz
dp3 r1.x, r0.yzwy, r0.yzwy
max r1.x, r1.x, l(0.001000)
rsq r1.x, r1.x
mul r0.yzw, r0.yyzw, r1.xxxx
dp3 r1.x, r3.xyzx, r2.xyzx
dp3_sat r1.y, r3.xyzx, cb2[0].xyzx
dp3_sat r0.y, cb2[0].xyzx, r0.yzwy
mul r0.y, r0.y, r0.y
dp2 r0.y, r0.yyyy, r3.wwww
add r0.y, r0.y, l(-0.500000)
add r0.z, -r1.y, l(1.000000)
mul r0.w, r0.z, r0.z
mul r0.w, r0.w, r0.w
mul r0.z, r0.z, r0.w
mad r0.z, r0.y, r0.z, l(1.000000)
add r0.w, -|r1.x|, l(1.000000)
mul r1.x, r0.w, r0.w
mul r1.x, r1.x, r1.x
mul r0.w, r0.w, r1.x
mad r0.y, r0.y, r0.w, l(1.000000)
mul r0.y, r0.y, r0.z
mul r0.y, r1.y, r0.y
mul r0.z, r3.w, r3.w
max r0.z, r0.z, l(0.002000)
mad r0.z, r0.z, r0.z, l(1.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mov_sat r1.x, cb9[r0.x + 6].z
mul r1.yzw, r0.yyyy, r7.xxyz
mul r2.xyz, r9.xyzx, r0.zzzz
mul r0.y, r0.w, r1.x
mul r0.yzw, r0.yyyy, r2.xxyz
mad r0.yzw, r5.xxyz, r1.yyzw, r0.yyzw
mad o0.xyz, r4.xyzx, cb9[r0.x + 3].xyzx, r0.yzwy
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used