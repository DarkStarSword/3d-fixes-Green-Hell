// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 2646115701146446-ps.txt
// 3DMigoto: 2646115701146446 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 159 3 8
//   undeciphered1a: 20
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 384 [_SunDir] 3
//   Vector 400 [_SunColor] 3
//   Vector 432 [_FogScatteringData2]
//   Vector 528 [_VolumetricFogSunWorldPos]
//   Vector 544 [_VolumetricFogSunShadowsData]
//   Float 560 [_Jitter]
//   Matrix 464 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:41:22 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 22
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r20.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 2646115701146446-ps.txt

mul r20.w, -r20.x, r20.y
mad r21.xyz, -r20.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.z, -cb0[13].x, r21.z
mov r1.xy, r21.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
lt r2.xy, cb0[13].yyyy, r1.zwzz
and r2.x, r2.y, r2.x
lt r2.y, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.y
or r1.w, r1.w, r2.x
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.xyz, r1.xyzx, -cb0[17].xyzx
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r5.xyz, -r2.xyzx, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.xyz, -r2.xyzx, r4.xyzx
  mul r2.xyz, r2.xyzx, r3.xyzx
  min r4.xyz, r5.xyzx, r2.xyzx
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.xyz, r5.xyzx, r2.xyzx
  min r2.xy, r2.yzyy, r2.xxxx
  min r2.x, r2.y, r2.x
  min r2.y, r0.w, cb0[12].z
  min r2.x, r2.y, r2.x
  add r2.x, -r1.w, r2.x
  lt r2.z, l(0.000000), r2.x
  if_nz r2.z
    mul r2.zw, v1.xxxy, cb1[6].xxxy
    dp2 r2.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.zwzz
    frc r2.z, r2.z
    add r2.z, r2.z, l(-0.500000)
    div r3.xyz, r1.wwww, r3.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    div r1.xy, cb0[18].xyxx, cb0[13].wwww
    log r1.z, r2.x
    mul r1.z, r1.z, l(0.693147182)
    max r1.z, r1.z, l(0.000000)
    mad r1.z, r1.z, cb0[15].x, l(0.100000)
    mul r1.z, r1.z, cb0[13].z
    mul_sat r2.w, r2.y, cb0[15].y
    mul r1.z, r1.z, r2.w
    add r2.y, -r1.w, r2.y
    max r1.z, r1.z, l(0.010000)
    mul r4.xyz, r0.xyzx, r1.zzzz
    div r4.xyz, r4.xyzx, r0.wwww
    div r1.z, r2.x, r1.z
    add r5.xyz, r3.xyzx, -cb0[19].xyzx
    add r6.xyz, r3.xyzx, -cb0[21].xyzx
    mul r7.xy, r4.xyxx, cb0[13].wwww
    mul r2.w, cb0[13].z, cb0[13].y
    div r7.z, r4.z, r2.w
    add r8.xy, r3.xyxx, cb0[14].xzxx
    mul r8.xy, r8.xyxx, cb0[13].wwww
    div r2.w, r3.z, r2.w
    add r8.zw, cb0[14].xxxy, cb0[17].xxxy
    add r9.xy, cb0[14].xyxx, r21.xyxx
    frc r4.w, r2.z
    mad r1.z, r4.w, cb0[35].x, r1.z
    add r3.w, r3.z, cb0[13].x
    mul r10.xyz, r3.yyyy, cb0[30].xywx
    mad r10.xyz, cb0[29].xywx, r3.xxxx, r10.xyzx
    mad r10.xyz, cb0[31].xywx, r3.wwww, r10.xyzx
    add r10.xyz, r10.xyzx, cb0[32].xywx
    div r9.zw, r10.xxxy, r10.zzzz
    mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    mad r2.z, r2.z, cb0[34].y, l(1.000000)
    mul r2.z, r2.z, r2.x
    mul r10.xyz, r0.xyzx, r2.zzzz
    div r10.xyz, r10.xyzx, r0.wwww
    add r10.xyz, r3.xywx, r10.xyzx
    mul r11.xyz, r10.yyyy, cb0[30].xywx
    mad r11.xyz, cb0[29].xywx, r10.xxxx, r11.xyzx
    mad r11.xyz, cb0[31].xywx, r10.zzzz, r11.xyzx
    add r11.xyz, r11.xyzx, cb0[32].xywx
    div r11.xy, r11.xyxx, r11.zzzz
    mad r11.xy, r11.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r1.w, -r1.w, cb0[33].w
    mul_sat r1.w, r1.w, l(0.0285714287)
    mul r1.w, r1.w, cb0[34].x
    div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
    ge r2.x, r2.x, r2.y
    and r2.x, r2.x, l(0x3f800000)
    add r9.zw, r9.zzzw, -r11.xxxy
    add r3.xyz, r3.xywx, -r10.xyzx
    mov r12.xyzw, l(0,0,0,0)
    mov r13.xyz, r5.xyzx
    mov r14.xyz, r6.xyzx
    mov r16.xy, r8.xyxx
    mov r2.y, r1.z
    mov r16.z, r2.w
    mov r15.xyzw, l(0,0,0,0)
    loop
      ge r3.w, l(1.000000), r2.y
      breakc_nz r3.w
      mad r11.zw, r8.zzzw, cb0[13].wwww, -r16.xxxy
      mul r11.zw, r1.xxxy, |r11.zzzw|
      max r3.w, r11.w, r11.z
      sample_l r17.xyzw, r16.xyxx, t2.xyzw, s0, l(0.000000)
      mad r3.w, r3.w, cb0[18].w, |r16.z|
      add r3.w, -r3.w, r17.w
      mad r11.zw, r9.xxxy, cb0[13].wwww, -r16.xxxy
      dp2 r4.w, r11.zwzz, r11.zwzz
      add r4.w, -r4.w, cb0[12].x
      max r4.w, r4.w, l(0.000000)
      mad r3.w, -r4.w, cb0[12].y, r3.w
      lt r4.w, l(0.000000), r3.w
      if_nz r4.w
        add r4.w, -r3.w, l(1.000000)
        mul r18.xyz, r4.wwww, cb0[11].xyzx
        mul r18.w, r3.w, l(0.400000)
        mul r3.w, r2.z, r2.y
        mad r11.zw, r3.wwww, r9.zzzw, r11.xxxy
        sample_l r19.xyzw, r11.zwzz, t3.xyzw, s3, l(0.000000)
        dp4 r4.w, r19.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        mad r19.xyz, r3.wwww, r3.xyzx, r10.xyzx
        add r19.xyz, r19.xyzx, -cb0[33].xyzx
        dp3 r3.w, r19.xyzx, r19.xyzx
        sqrt r3.w, r3.w
        add_sat r3.w, -r3.w, r4.w
        mul r4.w, r1.w, r15.w
        add r3.w, r3.w, l(-1.000000)
        mad r4.w, r4.w, r3.w, l(1.000000)
        mad r3.w, cb0[34].z, r3.w, l(1.000000)
        mul r18.xyzw, r3.wwww, r18.xyzw
        dp3 r3.w, r13.xyzx, r13.xyzx
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        dp3 r5.w, r14.xyzx, r14.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        mul r19.xyz, r3.wwww, cb0[20].xyzx
        mad r19.xyz, cb0[22].xyzx, r5.wwww, r19.xyzx
        mul r19.xyz, r18.wwww, r19.xyzx
        mad r17.xyz, r17.xyzx, r4.wwww, r19.xyzx
        mul r17.xyz, r18.wwww, r17.xyzx
        mul r18.xyz, r17.xyzx, r18.xyzx
        add r3.w, -r15.w, l(1.000000)
        mad r17.xyzw, r18.xyzw, r3.wwww, r15.xyzw
        lt r3.w, l(0.990000), r17.w
        if_nz r3.w
          mov r12.xyzw, r18.xyzw
          mov r15.xyzw, r17.xyzw
          break
        endif
        mov r12.xyzw, r18.xyzw
        mov r15.xyzw, r17.xyzw
      endif
      add r13.xyz, r4.xyzx, r13.xyzx
      add r14.xyz, r4.xyzx, r14.xyzx
      add r2.y, r2.y, l(-1.000000)
      add r16.xyz, r7.xyzx, r16.xyzx
    endloop
    lt r1.x, r15.w, l(0.990000)
    and r1.x, r1.x, l(0x3f800000)
    add r1.y, -r15.w, l(1.000000)
    mul r1.z, r2.y, r2.x
    mul r1.x, r1.y, r1.x
    mul r1.x, r1.z, r1.x
    mad r1.xyzw, r12.xyzw, r1.xxxx, r15.xyzw
    div r0.xyz, r0.xyzx, r0.wwww
    dp3 r0.x, r0.xyzx, cb0[24].xyzx
    mul r0.x, r0.x, cb0[27].w
    max r0.x, r0.x, l(0.000000)
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, r0.x
    mul r0.x, r1.w, r0.x
    add r0.yzw, -r1.xxyz, cb0[25].xxyz
    mad r1.xyz, r0.xxxx, r0.yzwy, r1.xyzx
    mul o0.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used