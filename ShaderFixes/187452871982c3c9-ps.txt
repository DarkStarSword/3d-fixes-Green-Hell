// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 187452871982c3c9-ps.txt
// 3DMigoto: 187452871982c3c9 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 176 4 10
//   undeciphered1a: 24
//   Keywords { "FOG_DISTANCE_ON" "FOG_USE_XY_PLANE" "FOG_BLUR_ON" "FOG_POINT_LIGHT4" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 592
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogPointLightPosition0] 3
//   Vector 288 [_FogPointLightColor0] 3
//   Vector 304 [_FogPointLightPosition1] 3
//   Vector 320 [_FogPointLightColor1] 3
//   Vector 336 [_FogPointLightPosition2] 3
//   Vector 352 [_FogPointLightColor2] 3
//   Vector 368 [_FogPointLightPosition3] 3
//   Vector 384 [_FogPointLightColor3] 3
//   Vector 400 [_FogPointLightPosition4] 3
//   Vector 416 [_FogPointLightColor4] 3
//   Vector 512 [_VolumetricFogSunWorldPos]
//   Vector 528 [_VolumetricFogSunShadowsData]
//   Float 544 [_Jitter]
//   Matrix 448 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:35:04 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 26
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r24.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 187452871982c3c9-ps.txt

mul r24.w, -r24.x, r24.y
mad r25.xyz, -r24.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.z, r0.y, r25.z
mov r1.xy, r25.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.z, l(0.000010)
mul r0.yw, v1.xxxy, cb1[6].xxxy
dp2 r0.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.ywyy
frc r0.y, r0.y
add r0.y, r0.y, l(-0.500000)
lt r0.w, cb0[13].y, r1.z
lt r1.w, cb0[13].y, r0.x
and r0.w, r0.w, r1.w
lt r1.w, r1.z, r0.z
lt r3.x, r0.x, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.z, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xywx
  dp3 r0.w, r2.xyzx, r2.xyzx
  sqrt r0.w, r0.w
  dp2 r1.w, r2.xyxx, r2.xyxx
  sqrt r1.w, r1.w
  div r3.xy, r2.xyxx, r1.wwww
  div r1.w, r1.w, r2.z
  max r2.w, r0.z, r1.z
  min r4.z, r2.w, cb0[13].y
  add r2.w, r1.z, -r4.z
  mul r2.w, r1.w, r2.w
  mad r4.xy, -r3.xyxx, r2.wwww, r25.xyxx
  min r2.w, r0.w, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xyzx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.y, r1.x, r2.w
  if_nz r1.y
    lt r1.y, l(0.000000), r1.w
    lt r3.z, l(-0.500000), r0.x
    and r1.y, r1.y, r3.z
    lt r3.z, r1.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r3.z
    and r0.x, r0.z, r0.x
    movc r5.z, r1.y, cb0[13].y, r0.x
    add r0.x, -r1.z, r5.z
    mul r0.x, r0.x, r1.w
    mad r5.xy, -r3.xyxx, r0.xxxx, r25.xyxx
    add r1.yzw, r4.xxyz, -r5.xxyz
    dp3 r0.x, r1.yzwy, r1.yzwy
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r2.w
    min r0.x, r0.z, r0.x
    lt r1.y, l(0.000000), r0.x
    if_nz r1.y
      log r1.y, r0.x
      mul r1.y, r1.y, l(0.693147182)
      max r1.y, r1.y, l(0.000000)
      mad r1.y, r1.y, cb0[15].x, l(0.100000)
      mul r1.y, r1.y, cb0[13].z
      mul_sat r1.z, r2.w, cb0[15].y
      mul r1.y, r1.z, r1.y
      max r1.y, r1.y, l(0.010000)
      mul r3.xyz, r1.yyyy, r2.xyzx
      div r3.xyz, r3.xyzx, r0.wwww
      div r1.y, r0.x, r1.y
      add r5.xyz, r4.xyzx, -cb0[17].xyzx
      add r6.xyz, r4.xyzx, -cb0[19].xyzx
      add r7.xyz, r4.xyzx, -cb0[21].xyzx
      add r8.xyz, r4.xyzx, -cb0[23].xyzx
      add r9.xyz, r4.xyzx, -cb0[25].xyzx
      mul r10.xy, r3.xyxx, cb0[13].wwww
      mul r1.z, cb0[13].z, cb0[13].y
      div r10.z, r3.z, r1.z
      add r11.xy, r4.xyxx, cb0[14].xzxx
      mul r11.xy, r11.xyxx, cb0[13].wwww
      div r1.z, r4.z, r1.z
      add r11.zw, cb0[14].xxxy, r25.xxxy
      frc r1.w, r0.y
      mad r1.y, r1.w, cb0[34].x, r1.y
      add r4.w, r4.z, cb0[13].x
      mul r12.xyz, r4.yyyy, cb0[29].xywx
      mad r12.xyz, cb0[28].xywx, r4.xxxx, r12.xyzx
      mad r12.xyz, cb0[30].xywx, r4.wwww, r12.xyzx
      add r12.xyz, r12.xyzx, cb0[31].xywx
      div r12.xy, r12.xyxx, r12.zzzz
      mad r12.xy, r12.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mad r1.w, r0.y, cb0[33].y, l(1.000000)
      mul r1.w, r0.x, r1.w
      mul r2.xyz, r2.xyzx, r1.wwww
      div r2.xyz, r2.xyzx, r0.wwww
      add r2.xyz, r2.xyzx, r4.xywx
      mul r13.xyz, r2.yyyy, cb0[29].xywx
      mad r13.xyz, cb0[28].xywx, r2.xxxx, r13.xyzx
      mad r13.xyz, cb0[30].xywx, r2.zzzz, r13.xyzx
      add r13.xyz, r13.xyzx, cb0[31].xywx
      div r12.zw, r13.xxxy, r13.zzzz
      mad r12.zw, r12.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r0.w, -r1.x, cb0[32].w
      mul_sat r0.w, r0.w, l(0.0285714287)
      mul r0.w, r0.w, cb0[33].x
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
      ge r0.x, r0.x, r0.z
      add r12.xy, -r12.zwzz, r12.xyxx
      add r4.xyz, -r2.xyzx, r4.xywx
      mov r13.xyzw, l(0,0,0,0)
      mov r14.xyz, r5.xyzx
      mov r15.xyz, r6.xyzx
      mov r16.xyz, r7.xyzx
      mov r17.xyz, r8.xyzx
      mov r18.xyz, r9.xyzx
      mov r20.xy, r11.xyxx
      mov r0.z, r1.y
      mov r20.z, r1.z
      mov r19.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r0.z
        breakc_nz r2.w
        sample_l r21.xyzw, r20.xyxx, t2.xyzw, s1, l(0.000000)
        add r2.w, -|r20.z|, r21.w
        mad r22.xy, r11.zwzz, cb0[13].wwww, -r20.xyxx
        dp2 r3.w, r22.xyxx, r22.xyxx
        add r3.w, -r3.w, cb0[12].x
        max r3.w, r3.w, l(0.000000)
        mad r2.w, -r3.w, cb0[12].y, r2.w
        lt r3.w, l(0.000000), r2.w
        if_nz r3.w
          add r3.w, -r2.w, l(1.000000)
          mul r22.xyz, r3.wwww, cb0[11].xyzx
          mul r22.w, r2.w, l(0.400000)
          mul r2.w, r1.w, r0.z
          mad r23.xy, r2.wwww, r12.xyxx, r12.zwzz
          sample_l r23.xyzw, r23.xyxx, t3.xyzw, s5, l(0.000000)
          dp4 r3.w, r23.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          mad r23.xyz, r2.wwww, r4.xyzx, r2.xyzx
          add r23.xyz, r23.xyzx, -cb0[32].xyzx
          dp3 r2.w, r23.xyzx, r23.xyzx
          sqrt r2.w, r2.w
          add_sat r2.w, -r2.w, r3.w
          mul r3.w, r0.w, r19.w
          add r2.w, r2.w, l(-1.000000)
          mad r3.w, r3.w, r2.w, l(1.000000)
          mad r2.w, cb0[33].z, r2.w, l(1.000000)
          mul r22.xyzw, r2.wwww, r22.xyzw
          dp3 r2.w, r14.xyzx, r14.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          dp3 r4.w, r15.xyzx, r15.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r16.xyzx, r16.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r6.w, r17.xyzx, r17.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r18.xyzx, r18.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          mul r23.xyz, r6.wwww, cb0[24].xyzx
          mad r23.xyz, cb0[26].xyzx, r7.wwww, r23.xyzx
          mad r23.xyz, cb0[22].xyzx, r5.wwww, r23.xyzx
          mad r23.xyz, cb0[20].xyzx, r4.wwww, r23.xyzx
          mad r23.xyz, cb0[18].xyzx, r2.wwww, r23.xyzx
          mul r23.xyz, r22.wwww, r23.xyzx
          mad r21.xyz, r21.xyzx, r3.wwww, r23.xyzx
          mul r21.xyz, r22.wwww, r21.xyzx
          mul r22.xyz, r21.xyzx, r22.xyzx
          add r2.w, -r19.w, l(1.000000)
          mad r21.xyzw, r22.xyzw, r2.wwww, r19.xyzw
          lt r2.w, l(0.990000), r21.w
          if_nz r2.w
            mov r13.xyzw, r22.xyzw
            mov r19.xyzw, r21.xyzw
            break
          endif
          mov r13.xyzw, r22.xyzw
          mov r19.xyzw, r21.xyzw
        endif
        add r14.xyz, r3.xyzx, r14.xyzx
        add r15.xyz, r3.xyzx, r15.xyzx
        add r16.xyz, r3.xyzx, r16.xyzx
        add r17.xyz, r3.xyzx, r17.xyzx
        add r18.xyz, r3.xyzx, r18.xyzx
        add r0.z, r0.z, l(-1.000000)
        add r20.xyz, r10.xyzx, r20.xyzx
      endloop
      lt r0.w, r19.w, l(0.990000)
      and r0.xw, r0.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
      add r1.y, -r19.w, l(1.000000)
      mul r0.x, r0.z, r0.x
      mul r0.z, r0.w, r1.y
      mul r0.x, r0.x, r0.z
      mad r2.xyzw, r13.xyzw, r0.xxxx, r19.xyzw
      mul r2.xyzw, r2.xyzw, cb0[10].wwww
      add r0.x, -r1.x, cb0[12].z
      div_sat r0.x, r0.x, cb0[12].w
      mul r0.x, r0.x, r0.x
      mul r1.xyzw, r0.xxxx, r2.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.y, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
sample r4.xyzw, v1.zwzz, t5.xyzw, s4
add r0.yzw, -r3.xxyz, r4.xxyz
mad r0.yzw, r2.wwww, r0.yyzw, r3.xxyz
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r0.yzwy, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used