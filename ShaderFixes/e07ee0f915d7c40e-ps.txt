// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e07ee0f915d7c40e-ps.txt
// 3DMigoto: e07ee0f915d7c40e |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 168 2 10
//   undeciphered1a: 23
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_VOID_SPHERE" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT3" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 624
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 400 [_FogPointLightPosition2] 3
//   Vector 416 [_FogPointLightColor2] 3
//   Vector 432 [_FogPointLightPosition3] 3
//   Vector 448 [_FogPointLightColor3] 3
//   Vector 544 [_VolumetricFogSunWorldPos]
//   Vector 560 [_VolumetricFogSunShadowsData]
//   Float 576 [_Jitter]
//   Matrix 480 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 3
//   SetTexture 3 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:20:57 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[37], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 25
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r23.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e07ee0f915d7c40e-ps.txt

mul r23.w, -r23.x, r23.y
mad r24.xyz, -r23.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.z, -cb0[13].x, r24.z
mov r1.xy, r24.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.zzwz
and r2.y, r2.z, r2.y
lt r2.z, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r5.xyz, -r2.yzwy, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.yzw, -r2.yyzw, r4.xxyz
  mul r2.yzw, r2.yyzw, r3.xxyz
  min r4.xyz, r5.xyzx, r2.yzwy
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.yzw, r5.xxyz, r2.yyzw
  min r2.yz, r2.zzwz, r2.yyyy
  min r2.y, r2.z, r2.y
  min r2.z, r0.w, cb0[12].z
  min r2.y, r2.z, r2.y
  add r2.y, -r1.w, r2.y
  lt r2.w, l(0.000000), r2.y
  if_nz r2.w
    div r3.xyz, r1.wwww, r3.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    mul r1.xyz, r0.xyzx, r2.yyyy
    div r1.xyz, r1.xyzx, r0.wwww
    add r1.xyz, r1.xyzx, r3.xyzx
    add r1.xyz, -r1.xyzx, cb0[17].xyzx
    dp3 r1.x, r1.xyzx, r1.xyzx
    sqrt r1.x, r1.x
    mad r1.x, r1.x, cb0[18].x, l(-1.000000)
    mad_sat r1.x, cb0[18].w, r1.x, l(1.000000)
    lt r1.y, l(0.000000), r1.x
    if_nz r1.y
      div r1.yz, cb0[20].xxyx, cb0[13].wwww
      log r2.w, r2.y
      mul r2.w, r2.w, l(0.693147182)
      max r2.w, r2.w, l(0.000000)
      mad r2.w, r2.w, cb0[15].x, l(0.100000)
      mul r2.w, r2.w, cb0[13].z
      mul_sat r4.x, r2.z, cb0[15].y
      mul r2.w, r2.w, r4.x
      add r2.z, -r1.w, r2.z
      max r2.w, r2.w, l(0.010000)
      mul r4.xyz, r0.xyzx, r2.wwww
      div r4.xyz, r4.xyzx, r0.wwww
      div r2.w, r2.y, r2.w
      add r5.xyz, r3.xyzx, -cb0[21].xyzx
      add r6.xyz, r3.xyzx, -cb0[23].xyzx
      add r7.xyz, r3.xyzx, -cb0[25].xyzx
      add r8.xyz, r3.xyzx, -cb0[27].xyzx
      mul r9.xy, r4.xyxx, cb0[13].wwww
      mul r4.w, cb0[13].z, cb0[13].y
      div r9.z, r4.z, r4.w
      add r10.xy, r3.xyxx, cb0[14].xzxx
      mul r10.xy, r10.xyxx, cb0[13].wwww
      div r4.w, r3.z, r4.w
      add r10.zw, cb0[14].xxxy, cb0[19].xxxy
      add r11.xy, cb0[14].xyxx, r24.xyxx
      frc r5.w, r2.x
      mad r2.w, r5.w, cb0[36].x, r2.w
      add r3.w, r3.z, cb0[13].x
      mul r12.xyz, r3.yyyy, cb0[31].xywx
      mad r12.xyz, cb0[30].xywx, r3.xxxx, r12.xyzx
      mad r12.xyz, cb0[32].xywx, r3.wwww, r12.xyzx
      add r12.xyz, r12.xyzx, cb0[33].xywx
      div r11.zw, r12.xxxy, r12.zzzz
      mad r11.zw, r11.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r3.z, r2.x, cb0[35].y, l(1.000000)
      mul r3.z, r2.y, r3.z
      mul r0.xyz, r0.xyzx, r3.zzzz
      div r0.xyz, r0.xyzx, r0.wwww
      add r0.xyz, r0.xyzx, r3.xywx
      mul r12.xyz, r0.yyyy, cb0[31].xywx
      mad r12.xyz, cb0[30].xywx, r0.xxxx, r12.xyzx
      mad r12.xyz, cb0[32].xywx, r0.zzzz, r12.xyzx
      add r12.xyz, r12.xyzx, cb0[33].xywx
      div r12.xy, r12.xyxx, r12.zzzz
      mad r12.xy, r12.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r0.w, -r1.w, cb0[34].w
      mul_sat r0.w, r0.w, l(0.0285714287)
      mul r0.w, r0.w, cb0[35].x
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
      ge r2.y, r2.y, r2.z
      and r2.y, r2.y, l(0x3f800000)
      add r11.zw, r11.zzzw, -r12.xxxy
      add r3.xyz, -r0.xyzx, r3.xywx
      mov r13.xyzw, l(0,0,0,0)
      mov r14.xyz, r5.xyzx
      mov r15.xyz, r6.xyzx
      mov r16.xyz, r7.xyzx
      mov r17.xyz, r8.xyzx
      mov r19.xy, r10.xyxx
      mov r2.z, r2.w
      mov r19.z, r4.w
      mov r18.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r2.z
        breakc_nz r3.w
        mad r12.zw, r10.zzzw, cb0[13].wwww, -r19.xxxy
        mul r12.zw, r1.yyyz, |r12.zzzw|
        max r3.w, r12.w, r12.z
        sample_l r20.xyzw, r19.xyxx, t1.xyzw, s1, l(0.000000)
        mad r3.w, r3.w, cb0[20].w, |r19.z|
        add r3.w, -r3.w, r20.w
        mad r12.zw, r11.xxxy, cb0[13].wwww, -r19.xxxy
        dp2 r5.w, r12.zwzz, r12.zwzz
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r3.w, -r5.w, cb0[12].y, r3.w
        lt r5.w, l(0.000000), r3.w
        if_nz r5.w
          add r5.w, -r3.w, l(1.000000)
          mul r21.xyz, r5.wwww, cb0[11].xyzx
          mul r21.w, r3.w, l(0.400000)
          mul r3.w, r1.w, r2.z
          mad r12.zw, r3.wwww, r11.zzzw, r12.xxxy
          sample_l r22.xyzw, r12.zwzz, t2.xyzw, s3, l(0.000000)
          dp4 r5.w, r22.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mad r22.xyz, r3.wwww, r3.xyzx, r0.xyzx
          add r22.xyz, r22.xyzx, -cb0[34].xyzx
          dp3 r3.w, r22.xyzx, r22.xyzx
          sqrt r3.w, r3.w
          add_sat r3.w, -r3.w, r5.w
          mul r5.w, r0.w, r18.w
          add r3.w, r3.w, l(-1.000000)
          mad r5.w, r5.w, r3.w, l(1.000000)
          mad r3.w, cb0[35].z, r3.w, l(1.000000)
          mul r21.xyzw, r3.wwww, r21.xyzw
          dp3 r3.w, r14.xyzx, r14.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          dp3 r6.w, r15.xyzx, r15.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r16.xyzx, r16.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          dp3 r8.w, r17.xyzx, r17.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          mul r22.xyz, r7.wwww, cb0[26].xyzx
          mad r22.xyz, cb0[28].xyzx, r8.wwww, r22.xyzx
          mad r22.xyz, cb0[24].xyzx, r6.wwww, r22.xyzx
          mad r22.xyz, cb0[22].xyzx, r3.wwww, r22.xyzx
          mul r22.xyz, r21.wwww, r22.xyzx
          mad r20.xyz, r20.xyzx, r5.wwww, r22.xyzx
          mul r20.xyz, r21.wwww, r20.xyzx
          mul r21.xyz, r20.xyzx, r21.xyzx
          add r3.w, -r18.w, l(1.000000)
          mad r20.xyzw, r21.xyzw, r3.wwww, r18.xyzw
          lt r3.w, l(0.990000), r20.w
          if_nz r3.w
            mov r13.xyzw, r21.xyzw
            mov r18.xyzw, r20.xyzw
            break
          endif
          mov r13.xyzw, r21.xyzw
          mov r18.xyzw, r20.xyzw
        endif
        add r14.xyz, r4.xyzx, r14.xyzx
        add r15.xyz, r4.xyzx, r15.xyzx
        add r16.xyz, r4.xyzx, r16.xyzx
        add r17.xyz, r4.xyzx, r17.xyzx
        add r2.z, r2.z, l(-1.000000)
        add r19.xyz, r9.xyzx, r19.xyzx
      endloop
      lt r0.x, r18.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r18.w, l(1.000000)
      mul r0.z, r2.z, r2.y
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.z, r0.x
      mad r0.xyzw, r13.xyzw, r0.xxxx, r18.xyzw
      mul r0.xyzw, r0.xyzw, cb0[10].wwww
      mul r0.xyzw, r1.xxxx, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xyzw, r1.xxxx
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
mad_sat r0.x, -r0.w, r1.x, l(1.000000)
mad o0.xyz, r3.xyzx, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used