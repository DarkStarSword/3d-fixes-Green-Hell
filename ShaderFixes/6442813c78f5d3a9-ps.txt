// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 6442813c78f5d3a9-ps.txt
// 3DMigoto: 6442813c78f5d3a9 |    Unity headers extracted from DynamicFog_Image Effect_Orthogonal
//    Shader "DynamicFog/Image Effect/Orthogonal" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Image Effect_Orthogonal:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 76 2 4
//   undeciphered1a: 6
//   undeciphered2: 1 2 2 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 224
//   Float 80 [_FogAlpha]
//   Vector 160 [_FogDistance]
//   Vector 176 [_FogHeightData]
//   Vector 192 [_FogColor]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CameraDepthTexture] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:12:58 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[13], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 8
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r6.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 6442813c78f5d3a9-ps.txt

mul r6.w, -r6.x, r6.y
mad r7.xyz, -r6.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s0
sample r1.xyzw, v1.zwzz, t1.xyzw, s1
mad r1.x, cb1[7].x, r1.x, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.y, -cb0[11].y, r7.y
mov r2.xz, r7.xxzx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.y, l(0.000010)
lt r3.xy, cb0[11].zzzz, r2.ywyy
and r3.x, r3.y, r3.x
if_z r3.x
  add r1.w, r1.y, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xwzx
  dp2 r1.w, r1.xzxx, r1.xzxx
  sqrt r1.w, r1.w
  div r3.xy, r1.xzxx, r1.wwww
  div r1.w, r1.w, r1.y
  min r4.y, r2.y, cb0[11].z
  add r3.z, r2.y, -r4.y
  mul r3.z, r1.w, r3.z
  mad r4.xz, -r3.xxyx, r3.zzzz, r7.xxzx
  dp3 r1.x, r1.xyzx, r1.xyzx
  add r5.xyz, -r2.xyzx, r4.xyzx
  dp3 r1.z, r5.xyzx, r5.xyzx
  sqrt r1.xz, r1.xxzx
  lt r2.x, r1.z, r1.x
  if_nz r2.x
    lt r2.x, l(0.000000), r1.w
    lt r2.z, l(-0.500000), r2.w
    and r2.x, r2.z, r2.x
    lt r2.z, r1.w, l(0.000000)
    lt r3.z, r2.w, l(0.500000)
    and r2.z, r2.z, r3.z
    and r2.z, r2.w, r2.z
    movc r5.y, r2.x, cb0[11].z, r2.z
    add r2.x, -r2.y, r5.y
    mul r1.w, r1.w, r2.x
    mad r5.xz, -r3.xxyx, r1.wwww, r7.xxzx
    add r2.xyz, r4.xyzx, -r5.xyzx
    dp3 r1.w, r2.xyzx, r2.xyzx
    sqrt r1.w, r1.w
    add r2.x, -r1.z, r1.x
    min r1.w, r1.w, r2.x
    lt r2.x, l(0.000000), r1.w
    div r1.x, r1.y, r1.x
    mul r1.x, r1.w, r1.x
    add r1.y, -r4.y, cb0[11].x
    mul r2.y, cb0[11].w, cb0[11].x
    div r1.y, r1.y, r2.y
    add r1.y, r1.y, l(-0.100000)
    add r2.z, r1.z, -cb0[10].x
    div r2.z, r2.z, cb0[10].y
    max_sat r1.y, r1.y, r2.z
    mul r3.w, r1.y, cb0[12].w
    mul r3.xyz, r3.wwww, cb0[12].xyzx
    mad r2.z, r1.x, l(0.500000), r4.y
    mad r1.z, r1.w, l(0.500000), r1.z
    add r2.w, -r2.z, cb0[11].x
    div r2.w, r2.w, r2.y
    add r2.w, r2.w, l(-0.100000)
    add r4.x, r1.z, -cb0[10].x
    div r4.x, r4.x, cb0[10].y
    max_sat r2.w, r2.w, r4.x
    mul r4.w, r2.w, cb0[12].w
    mul r4.xyz, r4.wwww, cb0[12].xyzx
    mad r1.y, -cb0[12].w, r1.y, l(1.000000)
    mad r3.xyzw, r4.xyzw, r1.yyyy, r3.xyzw
    mad r1.x, r1.x, l(0.500000), r2.z
    mad r1.y, r1.w, l(0.500000), r1.z
    add r1.x, -r1.x, cb0[11].x
    div r1.x, r1.x, r2.y
    add r1.x, r1.x, l(-0.100000)
    add r1.y, r1.y, -cb0[10].x
    div r1.y, r1.y, cb0[10].y
    max_sat r1.x, r1.y, r1.x
    mul r1.w, r1.x, cb0[12].w
    mul r1.xyz, r1.wwww, cb0[12].xyzx
    add r2.y, -r3.w, l(1.000000)
    mad r1.xyzw, r1.xyzw, r2.yyyy, r3.xyzw
    mul r3.xyzw, r1.xyzw, cb0[5].xxxx
    mad r1.x, -r1.w, cb0[5].x, l(1.000000)
    mad r1.xyzw, r0.xyzw, r1.xxxx, r3.xyzw
    movc o0.xyzw, r2.xxxx, r1.xyzw, r0.xyzw
  else
    mov o0.xyzw, r0.xyzw
  endif
else
  mov o0.xyzw, r0.xyzw
endif
ret
// Approximately 0 instruction slots used