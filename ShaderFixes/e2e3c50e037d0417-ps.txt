// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e2e3c50e037d0417-ps.txt
// 3DMigoto: e2e3c50e037d0417 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 163 4 11
//   undeciphered1a: 17
//   Keywords { "FOG_HAZE_ON" "FOG_POINT_LIGHT0" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 480
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogSkyColor]
//   Vector 288 [_FogPointLightPosition0] 3
//   Vector 304 [_FogPointLightColor0] 3
//   Vector 400 [_VolumetricFogSunWorldPos]
//   Vector 416 [_VolumetricFogSunShadowsData]
//   Float 432 [_Jitter]
//   Matrix 336 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 4 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:22:08 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[28], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 19
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r17.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e2e3c50e037d0417-ps.txt

mul r17.w, -r17.x, r17.y
mad r18.xyz, -r17.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r18.y
mov r1.xz, r18.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r3.xy, v1.xyxx, cb1[6].xyxx
dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xyxx
frc r0.w, r0.w
add r0.w, r0.w, l(-0.500000)
lt r1.w, cb0[13].y, r1.y
lt r3.x, cb0[13].y, r0.y
and r1.w, r1.w, r3.x
lt r3.x, r1.y, r0.z
lt r3.y, r0.y, r0.z
and r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
if_z r1.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r1.w, r1.w
  dp2 r2.y, r3.xzxx, r3.xzxx
  sqrt r2.y, r2.y
  div r4.xy, r3.xzxx, r2.yyyy
  div r2.y, r2.y, r3.y
  max r2.w, r0.z, r1.y
  min r5.z, r2.w, cb0[13].y
  add r2.w, r1.y, -r5.z
  mul r2.w, r2.w, r2.y
  mad r5.xy, -r4.xyxx, r2.wwww, r18.xzxx
  min r2.w, r1.w, cb0[12].z
  add r6.xyz, -r1.xyzx, r5.xzyx
  dp3 r1.x, r6.xyzx, r6.xyzx
  sqrt r1.x, r1.x
  lt r1.z, r1.x, r2.w
  if_nz r1.z
    lt r1.z, l(0.000000), r2.y
    lt r3.w, l(-0.500000), r0.y
    and r1.z, r1.z, r3.w
    lt r3.w, r2.y, l(0.000000)
    lt r4.z, r0.y, l(0.500000)
    and r3.w, r3.w, r4.z
    and r0.z, r0.z, r3.w
    movc r6.y, r1.z, cb0[13].y, r0.z
    add r0.z, -r1.y, r6.y
    mul r0.z, r0.z, r2.y
    mad r6.xz, -r4.xxyx, r0.zzzz, r18.xxzx
    add r4.xyz, r5.xzyx, -r6.xyzx
    dp3 r0.z, r4.xyzx, r4.xyzx
    sqrt r0.z, r0.z
    add r1.y, -r1.x, r2.w
    min r0.z, r0.z, r1.y
    lt r1.z, l(0.000000), r0.z
    if_nz r1.z
      log r1.z, r0.z
      mul r1.z, r1.z, l(0.693147182)
      max r1.z, r1.z, l(0.000000)
      mad r1.z, r1.z, cb0[15].x, l(0.100000)
      mul r1.z, r1.z, cb0[13].z
      mul_sat r2.y, r2.w, cb0[15].y
      mul r1.z, r1.z, r2.y
      max r1.z, r1.z, l(0.010000)
      mul r4.xyz, r1.zzzz, r3.xyzx
      div r4.xyz, r4.xyzx, r1.wwww
      div r1.z, r0.z, r1.z
      add r6.xyz, r5.xzyx, -cb0[18].xyzx
      mul r7.xz, r4.xxzx, cb0[13].wwww
      mul r2.y, cb0[13].z, cb0[13].y
      div r7.y, r4.y, r2.y
      add r8.xy, r5.xyxx, cb0[14].xzxx
      mul r8.xy, r8.xyxx, cb0[13].wwww
      div r2.y, r5.z, r2.y
      frc r2.w, r0.w
      mad r1.z, r2.w, cb0[27].x, r1.z
      add r5.w, r5.z, cb0[13].x
      mul r9.xyz, r5.wwww, cb0[22].xywx
      mad r9.xyz, cb0[21].xywx, r5.xxxx, r9.xyzx
      mad r9.xyz, cb0[23].xywx, r5.yyyy, r9.xyzx
      add r9.xyz, r9.xyzx, cb0[24].xywx
      div r8.zw, r9.xxxy, r9.zzzz
      mad r8.zw, r8.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r2.w, r0.w, cb0[26].y, l(1.000000)
      mul r2.w, r0.z, r2.w
      mul r3.xyz, r3.xyzx, r2.wwww
      div r3.xyz, r3.xyzx, r1.wwww
      add r3.xyz, r3.xyzx, r5.xwyx
      mul r9.xyz, r3.yyyy, cb0[22].xywx
      mad r9.xyz, cb0[21].xywx, r3.xxxx, r9.xyzx
      mad r9.xyz, cb0[23].xywx, r3.zzzz, r9.xyzx
      add r9.xyz, r9.xyzx, cb0[24].xywx
      div r9.xy, r9.xyxx, r9.zzzz
      mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r1.w, -r1.x, cb0[25].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[26].x
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
      ge r0.z, r0.z, r1.y
      and r0.z, r0.z, l(0x3f800000)
      add r8.zw, r8.zzzw, -r9.xxxy
      add r5.xyz, -r3.xyzx, r5.xwyx
      mov r10.xyzw, l(0,0,0,0)
      mov r11.xyz, r6.xyzx
      mov r13.xz, r8.xxyx
      mov r1.y, r1.z
      mov r13.y, r2.y
      mov r12.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r1.y
        breakc_nz r3.w
        sample_l r14.xyzw, r13.xzxx, t2.xyzw, s1, l(0.000000)
        add r3.w, -|r13.y|, r14.w
        lt r4.w, l(0.000000), r3.w
        if_nz r4.w
          add r4.w, -r3.w, l(1.000000)
          mul r15.xyz, r4.wwww, cb0[11].xyzx
          mul r15.w, r3.w, l(0.400000)
          mul r3.w, r2.w, r1.y
          mad r9.zw, r3.wwww, r8.zzzw, r9.xxxy
          sample_l r16.xyzw, r9.zwzz, t3.xyzw, s4, l(0.000000)
          dp4 r4.w, r16.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mad r16.xyz, r3.wwww, r5.xyzx, r3.xyzx
          add r16.xyz, r16.xyzx, -cb0[25].xyzx
          dp3 r3.w, r16.xyzx, r16.xyzx
          sqrt r3.w, r3.w
          add_sat r3.w, -r3.w, r4.w
          mul r4.w, r1.w, r12.w
          add r3.w, r3.w, l(-1.000000)
          mad r4.w, r4.w, r3.w, l(1.000000)
          mad r3.w, cb0[26].z, r3.w, l(1.000000)
          mul r15.xyzw, r3.wwww, r15.xyzw
          dp3 r3.w, r11.xyzx, r11.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          mul r16.xyz, r3.wwww, cb0[19].xyzx
          mul r16.xyz, r15.wwww, r16.xyzx
          mad r14.xyz, r14.xyzx, r4.wwww, r16.xyzx
          mul r14.xyz, r15.wwww, r14.xyzx
          mul r15.xyz, r14.xyzx, r15.xyzx
          add r3.w, -r12.w, l(1.000000)
          mad r14.xyzw, r15.xyzw, r3.wwww, r12.xyzw
          lt r3.w, l(0.990000), r14.w
          if_nz r3.w
            mov r10.xyzw, r15.xyzw
            mov r12.xyzw, r14.xyzw
            break
          endif
          mov r10.xyzw, r15.xyzw
          mov r12.xyzw, r14.xyzw
        endif
        add r11.xyz, r4.xyzx, r11.xyzx
        add r1.y, r1.y, l(-1.000000)
        add r13.xyz, r7.xyzx, r13.xyzx
      endloop
      lt r1.z, r12.w, l(0.990000)
      and r1.z, r1.z, l(0x3f800000)
      add r1.w, -r12.w, l(1.000000)
      mul r0.z, r0.z, r1.y
      mul r1.y, r1.w, r1.z
      mul r0.z, r0.z, r1.y
      mad r3.xyzw, r10.xyzw, r0.zzzz, r12.xyzw
      mul r3.xyzw, r3.xyzw, cb0[10].wwww
      add r0.z, -r1.x, cb0[12].z
      div_sat r0.z, r0.z, cb0[12].w
      mul r0.z, r0.z, r0.z
      mul r1.xyzw, r0.zzzz, r3.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.z, r0.w, cb0[15].w
mad r0.w, r0.w, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.wwww, r1.xyzw
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r1.xy, r0.xxxx, r2.xzxx
  mad r1.xy, r1.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r2.xyzw, r1.xyxx, t2.xyzw, s1
  mad r0.y, r0.z, l(3.000000), r2.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[17].w
  add r1.xyz, -r4.xyzx, cb0[17].xyzx
  mad r4.xyz, r0.xxxx, r1.xyzx, r4.xyzx
endif
mad_sat r0.x, -r1.w, r0.w, l(1.000000)
mad o0.xyz, r4.xyzx, r0.xxxx, r3.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used