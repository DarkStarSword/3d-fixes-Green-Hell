// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 5316743bc6da38a6-ps.txt
// 3DMigoto: 5316743bc6da38a6 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 158 5 15
//   undeciphered1a: 23
//   Keywords { "FOG_OF_WAR_ON" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT4" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 288 [_FogOfWarSize] 3
//   Vector 304 [_FogOfWarCenterAdjusted] 3
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_FogPointLightPosition2] 3
//   Vector 400 [_FogPointLightColor2] 3
//   Vector 416 [_FogPointLightPosition3] 3
//   Vector 432 [_FogPointLightColor3] 3
//   Vector 448 [_FogPointLightPosition4] 3
//   Vector 464 [_FogPointLightColor4] 3
//   Vector 480 [_SunPosition] 3
//   Vector 496 [_SunDir] 3
//   Vector 512 [_SunColor] 3
//   Vector 528 [_FogScatteringData]
//   Vector 544 [_FogScatteringData2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_FogOfWar] 2D 5
//   SetTexture 3 [_NoiseTex] 2D 1
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:02:55 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 25
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r23.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 5316743bc6da38a6-ps.txt

mul r23.w, -r23.x, r23.y
mad r24.xyz, -r23.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.z, r0.y, r24.z
mov r1.xy, r24.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.z, l(0.000010)
mul r3.xy, v1.xyxx, cb1[6].xyxx
dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xyxx
frc r0.w, r0.w
add r0.w, r0.w, l(-0.500000)
lt r1.w, cb0[13].y, r1.z
lt r3.x, cb0[13].y, r0.y
and r1.w, r1.w, r3.x
lt r3.x, r1.z, r0.z
lt r3.y, r0.y, r0.z
and r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
if_z r1.w
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r3.xy, r2.xyxx, cb0[18].xyxx
    add r3.xy, r3.xyxx, -cb0[19].xyxx
    sample r3.xyzw, r3.xyxx, t2.wxyz, s5
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.z, l(0.000010)
    add r2.xyz, -r1.xyzx, r2.xywx
    dp3 r0.x, r2.xyzx, r2.xyzx
    sqrt r0.x, r0.x
    dp2 r1.w, r2.xyxx, r2.xyxx
    sqrt r1.w, r1.w
    div r3.yz, r2.xxyx, r1.wwww
    div r1.w, r1.w, r2.z
    max r2.w, r0.z, r1.z
    min r4.z, r2.w, cb0[13].y
    add r2.w, r1.z, -r4.z
    mul r2.w, r1.w, r2.w
    mad r4.xy, -r3.yzyy, r2.wwww, r24.xyxx
    min r2.w, r0.x, cb0[12].z
    add r5.xyz, -r1.xyzx, r4.xyzx
    dp3 r1.x, r5.xyzx, r5.xyzx
    sqrt r1.x, r1.x
    lt r1.y, r1.x, r2.w
    if_nz r1.y
      lt r1.y, l(0.000000), r1.w
      lt r3.w, l(-0.500000), r0.y
      and r1.y, r1.y, r3.w
      lt r3.w, r1.w, l(0.000000)
      lt r0.y, r0.y, l(0.500000)
      and r0.y, r0.y, r3.w
      and r0.y, r0.z, r0.y
      movc r5.z, r1.y, cb0[13].y, r0.y
      add r0.y, -r1.z, r5.z
      mul r0.y, r0.y, r1.w
      mad r5.xy, -r3.yzyy, r0.yyyy, r24.xyxx
      add r1.yzw, r4.xxyz, -r5.xxyz
      dp3 r0.y, r1.yzwy, r1.yzwy
      sqrt r0.y, r0.y
      add r0.z, -r1.x, r2.w
      min r0.y, r0.z, r0.y
      lt r1.y, l(0.000000), r0.y
      if_nz r1.y
        log r1.y, r0.y
        mul r1.y, r1.y, l(0.693147182)
        max r1.y, r1.y, l(0.000000)
        mad r1.y, r1.y, cb0[15].x, l(0.100000)
        mul r1.y, r1.y, cb0[13].z
        mul_sat r1.z, r2.w, cb0[15].y
        mul r1.y, r1.z, r1.y
        max r1.y, r1.y, l(0.010000)
        mul r3.yzw, r1.yyyy, r2.xxyz
        div r3.yzw, r3.yyzw, r0.xxxx
        div r1.y, r0.y, r1.y
        add r5.xyz, r4.xyzx, -cb0[20].xyzx
        add r6.xyz, r4.xyzx, -cb0[22].xyzx
        add r7.xyz, r4.xyzx, -cb0[24].xyzx
        add r8.xyz, r4.xyzx, -cb0[26].xyzx
        add r9.xyz, r4.xyzx, -cb0[28].xyzx
        mul r10.xy, r3.yzyy, cb0[13].wwww
        mul r1.z, cb0[13].z, cb0[13].y
        div r10.z, r3.w, r1.z
        add r4.xy, r4.xyxx, cb0[14].xzxx
        mul r4.xy, r4.xyxx, cb0[13].wwww
        div r1.z, r4.z, r1.z
        ge r0.y, r0.y, r0.z
        and r0.y, r0.y, l(0x3f800000)
        mov r11.xyzw, l(0,0,0,0)
        mov r12.xyz, r5.xyzx
        mov r13.xyz, r6.xyzx
        mov r14.xyz, r7.xyzx
        mov r15.xyz, r8.xyzx
        mov r16.xyz, r9.xyzx
        mov r18.xy, r4.xyxx
        mov r0.z, r1.y
        mov r18.z, r1.z
        mov r17.xyzw, l(0,0,0,0)
        loop
          ge r1.w, l(1.000000), r0.z
          breakc_nz r1.w
          sample_l r19.xyzw, r18.xyxx, t3.xyzw, s1, l(0.000000)
          add r1.w, -|r18.z|, r19.w
          lt r2.w, l(0.000000), r1.w
          if_nz r2.w
            add r2.w, -r1.w, l(1.000000)
            mul r20.xyz, r2.wwww, cb0[11].xyzx
            mul r21.w, r1.w, l(0.400000)
            dp3 r1.w, r12.xyzx, r12.xyzx
            div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
            dp3 r2.w, r13.xyzx, r13.xyzx
            div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
            dp3 r4.z, r14.xyzx, r14.xyzx
            div r4.z, l(1.000000, 1.000000, 1.000000, 1.000000), r4.z
            dp3 r4.w, r15.xyzx, r15.xyzx
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            dp3 r5.w, r16.xyzx, r16.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            mul r22.xyz, r4.wwww, cb0[27].xyzx
            mad r22.xyz, cb0[29].xyzx, r5.wwww, r22.xyzx
            mad r22.xyz, cb0[25].xyzx, r4.zzzz, r22.xyzx
            mad r22.xyz, cb0[23].xyzx, r2.wwww, r22.xyzx
            mad r22.xyz, cb0[21].xyzx, r1.wwww, r22.xyzx
            mad r19.xyz, r22.xyzx, r21.wwww, r19.xyzx
            mul r19.xyz, r21.wwww, r19.xyzx
            mul r21.xyz, r19.xyzx, r20.xyzx
            add r1.w, -r17.w, l(1.000000)
            mad r19.xyzw, r21.xyzw, r1.wwww, r17.xyzw
            lt r1.w, l(0.990000), r19.w
            if_nz r1.w
              mov r11.xyzw, r21.xyzw
              mov r17.xyzw, r19.xyzw
              break
            endif
            mov r11.xyzw, r21.xyzw
            mov r17.xyzw, r19.xyzw
          endif
          add r12.xyz, r3.yzwy, r12.xyzx
          add r13.xyz, r3.yzwy, r13.xyzx
          add r14.xyz, r3.yzwy, r14.xyzx
          add r15.xyz, r3.yzwy, r15.xyzx
          add r16.xyz, r3.yzwy, r16.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r18.xyz, r10.xyzx, r18.xyzx
        endloop
        lt r1.y, r17.w, l(0.990000)
        and r1.y, r1.y, l(0x3f800000)
        add r1.z, -r17.w, l(1.000000)
        mul r0.y, r0.z, r0.y
        mul r0.z, r1.z, r1.y
        mul r0.y, r0.y, r0.z
        mad r4.xyzw, r11.xyzw, r0.yyyy, r17.xyzw
        div r0.xyz, r2.xyzx, r0.xxxx
        dp3 r0.x, r0.xyzx, cb0[31].xyzx
        mul r0.x, r0.x, cb0[34].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r4.w, r0.x
        add r1.yzw, -r4.xxyz, cb0[32].xxyz
        mad r4.xyz, r0.xxxx, r1.yzwy, r4.xyzx
        mul r2.xyzw, r4.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r1.xyzw, r0.xxxx, r2.xyzw
        mul r1.xyzw, r3.xxxx, r1.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.w, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
sample r4.xyzw, v1.zwzz, t5.xyzw, s4
add r1.xyz, -r3.xyzx, r4.xyzx
mad r1.xyz, r2.wwww, r1.xyzx, r3.xyzx
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad r0.xyz, r1.xyzx, r0.xxxx, r2.xyzx
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[30].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[30].y
add r2.x, -v1.x, cb0[30].x
add r2.y, r1.x, -v1.y
mad r0.w, r0.w, cb0[34].z, l(1.000000)
mul r0.w, r0.w, cb0[33].x
mov r1.xyz, l(0,0,0,0)
mov r3.xy, v1.xyxx
mov r1.w, cb0[34].x
mov r2.z, cb0[33].y
loop
  ge r3.z, l(0.000000), r2.z
  breakc_nz r3.z
  mad r3.xy, r2.xyxx, r0.wwww, r3.xyxx
  sample_l r4.xyzw, r3.xyxx, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[33].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[34].y
  add r2.z, r2.z, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[33].zzzz, r0.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used