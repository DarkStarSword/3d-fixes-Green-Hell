// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 3a22892885ac4ba4-ps.txt
// 3DMigoto: 3a22892885ac4ba4 |    Unity headers extracted from DynamicFog_Image Effect_Orthographic Desktop Plus Orthogonal
//    Shader "DynamicFog/Image Effect/Orthographic Desktop Plus Orthogonal" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Image Effect_Orthographic Desktop Plus Orthogonal:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 217 2 3
//   undeciphered1a: 9
//   Keywords { "DITHER_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 304
//   Vector 32 [_MainTex_TexelSize]
//   Float 48 [_FogDither]
//   Float 80 [_FogAlpha]
//   Vector 160 [_FogDistance]
//   Vector 176 [_FogHeightData]
//   Vector 192 [_FogNoiseData]
//   Float 224 [_FogSpeed]
//   Vector 240 [_FogColor]
//   Vector 256 [_FogColor2]
//   Vector 288 [_ClipDir] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CameraDepthTexture] 2D 1
//   SetTexture 2 [_Noise2Tex] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:50:47 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[19], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 11
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r9.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 3a22892885ac4ba4-ps.txt

mul r9.w, -r9.x, r9.y
mad r10.xyz, -r9.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s0
sample r1.xyzw, v1.zwzz, t1.xyzw, s1
add r1.x, -r1.x, l(1.000000)
add r2.y, -cb0[11].y, r10.y
mul r1.yzw, cb0[18].xxyz, cb1[5].zzzz
add r1.x, -r1.x, l(1.000000)
mad r1.xyz, -r1.yzwy, r1.xxxx, v2.xyzx
mov r2.xz, r10.xxzx
add r1.xyz, r1.xyzx, r2.xyzx
add r2.w, r1.y, l(0.000010)
lt r3.xy, cb0[11].zzzz, r2.ywyy
and r3.x, r3.y, r3.x
if_z r3.x
  add r1.w, r1.y, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xwzx
  dp2 r1.w, r1.xzxx, r1.xzxx
  sqrt r1.w, r1.w
  div r2.xz, r1.xxzx, r1.wwww
  div r3.x, r1.w, r1.y
  min r4.y, r2.y, cb0[11].z
  add r3.y, r2.y, -r4.y
  mul r3.y, r3.y, r3.x
  mul r3.zw, r2.xxxz, r3.yyyy
  dp2 r3.z, -r3.zwzz, -r3.zwzz
  sqrt r3.z, r3.z
  lt r3.w, r3.z, r1.w
  if_nz r3.w
    mad r4.xz, -r2.xxzx, r3.yyyy, r10.xxzx
    lt r3.y, l(0.000000), r3.x
    lt r3.w, l(-0.500000), r2.w
    and r3.y, r3.w, r3.y
    lt r3.w, r3.x, l(0.000000)
    lt r4.w, r2.w, l(0.500000)
    and r3.w, r3.w, r4.w
    and r2.w, r2.w, r3.w
    movc r2.w, r3.y, cb0[11].z, r2.w
    add r2.y, -r2.y, r2.w
    mul r2.y, r2.y, r3.x
    mad r2.xy, -r2.xzxx, r2.yyyy, r10.xzxx
    add r2.xy, -r2.xyxx, r4.xzxx
    dp2 r2.x, r2.xyxx, r2.xyxx
    sqrt r2.x, r2.x
    add r2.y, r1.w, -r3.z
    min r2.x, r2.y, r2.x
    lt r2.y, l(0.000000), r2.x
    if_nz r2.y
      div r1.xyz, r1.xyzx, r1.wwww
      mul r1.xyz, r2.xxxx, r1.xyzx
      add r1.w, -r4.y, cb0[11].x
      mul r2.y, cb0[11].w, cb0[11].x
      div r1.w, r1.w, r2.y
      add r1.w, r1.w, l(-0.100000)
      add r2.z, r3.z, -cb0[10].x
      div r2.z, r2.z, cb0[10].y
      max r1.w, r1.w, r2.z
      mul r2.z, cb0[14].x, cb1[0].w
      mad r3.xyw, r4.xyxz, cb0[12].wwww, r2.zzzz
      frc r5.xyz, r3.xywx
      add r3.xyw, r3.xyxw, -r5.xyxz
      mul r6.xyz, r5.xyzx, r5.xyzx
      mad r5.xyz, -r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
      mul r2.w, r5.z, r6.z
      mad r3.xy, r3.wwww, l(37.000000, 17.000000, 0.000000, 0.000000), r3.xyxx
      mad r3.xy, r6.xyxx, r5.xyxx, r3.xyxx
      add r3.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
      mul r3.xy, r3.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
      sample_l r5.xyzw, r3.xyxx, t2.xyzw, s2, l(0.000000)
      add r3.x, -r5.y, r5.x
      mad r2.w, r2.w, r3.x, r5.y
      div_sat r3.x, r4.y, cb0[11].x
      add r5.xyzw, -cb0[15].xyzw, cb0[16].xyzw
      mad r6.xyzw, r3.xxxx, r5.xyzw, cb0[15].xyzw
      mad r2.w, -r2.w, cb0[12].x, l(1.000000)
      mul_sat r1.w, r1.w, r2.w
      mul r7.w, r1.w, r6.w
      mul r7.xyz, r6.xyzx, r7.wwww
      mad r3.xyw, r1.xyxz, l(0.200000, 0.200000, 0.000000, 0.200000), r4.xyxz
      mad r2.w, r2.x, l(0.200000), r3.z
      add r3.z, -r3.y, cb0[11].x
      div r3.z, r3.z, r2.y
      add r3.z, r3.z, l(-0.100000)
      add r4.x, r2.w, -cb0[10].x
      div r4.x, r4.x, cb0[10].y
      max r3.z, r3.z, r4.x
      mad r4.xyz, r3.xywx, cb0[12].wwww, r2.zzzz
      frc r6.xyz, r4.xyzx
      add r4.xyz, r4.xyzx, -r6.xyzx
      mul r8.xyz, r6.xyzx, r6.xyzx
      mad r6.xyz, -r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
      mul r4.w, r6.z, r8.z
      mad r4.xy, r4.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r4.xyxx
      mad r4.xy, r8.xyxx, r6.xyxx, r4.xyxx
      add r4.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
      mul r4.xy, r4.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
      sample_l r8.xyzw, r4.xyxx, t2.xyzw, s2, l(0.000000)
      add r4.x, -r8.y, r8.x
      mad r4.x, r4.w, r4.x, r8.y
      div_sat r4.y, r3.y, cb0[11].x
      mad r8.xyzw, r4.yyyy, r5.xyzw, cb0[15].xyzw
      mad r4.x, -r4.x, cb0[12].x, l(1.000000)
      mul_sat r3.z, r3.z, r4.x
      mul r4.w, r3.z, r8.w
      mul r4.xyz, r4.wwww, r8.xyzx
      mad r1.w, -r6.w, r1.w, l(1.000000)
      mad r4.xyzw, r4.xyzw, r1.wwww, r7.xyzw
      mad r3.xyz, r1.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r3.xywx
      mad r1.w, r2.x, l(0.200000), r2.w
      add r2.w, -r3.y, cb0[11].x
      div r2.w, r2.w, r2.y
      add r2.w, r2.w, l(-0.100000)
      add r3.w, r1.w, -cb0[10].x
      div r3.w, r3.w, cb0[10].y
      max r2.w, r2.w, r3.w
      mad r6.xyz, r3.xyzx, cb0[12].wwww, r2.zzzz
      frc r7.xyz, r6.xyzx
      add r6.xyz, r6.xyzx, -r7.xyzx
      mul r8.xyz, r7.xyzx, r7.xyzx
      mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
      mul r3.w, r7.z, r8.z
      mad r6.xy, r6.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r6.xyxx
      mad r6.xy, r8.xyxx, r7.xyxx, r6.xyxx
      add r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
      mul r6.xy, r6.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
      sample_l r6.xyzw, r6.xyxx, t2.xyzw, s2, l(0.000000)
      add r6.x, -r6.y, r6.x
      mad r3.w, r3.w, r6.x, r6.y
      div_sat r6.x, r3.y, cb0[11].x
      mad r6.xyzw, r6.xxxx, r5.xyzw, cb0[15].xyzw
      mad r3.w, -r3.w, cb0[12].x, l(1.000000)
      mul_sat r2.w, r2.w, r3.w
      mul r7.w, r2.w, r6.w
      mul r7.xyz, r6.xyzx, r7.wwww
      add r2.w, -r4.w, l(1.000000)
      mad r4.xyzw, r7.xyzw, r2.wwww, r4.xyzw
      mad r3.xyz, r1.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r3.xyzx
      mad r1.w, r2.x, l(0.200000), r1.w
      add r2.w, -r3.y, cb0[11].x
      div r2.w, r2.w, r2.y
      add r2.w, r2.w, l(-0.100000)
      add r3.w, r1.w, -cb0[10].x
      div r3.w, r3.w, cb0[10].y
      max r2.w, r2.w, r3.w
      mad r6.xyz, r3.xyzx, cb0[12].wwww, r2.zzzz
      frc r7.xyz, r6.xyzx
      add r6.xyz, r6.xyzx, -r7.xyzx
      mul r8.xyz, r7.xyzx, r7.xyzx
      mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
      mul r3.w, r7.z, r8.z
      mad r6.xy, r6.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r6.xyxx
      mad r6.xy, r8.xyxx, r7.xyxx, r6.xyxx
      add r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
      mul r6.xy, r6.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
      sample_l r6.xyzw, r6.xyxx, t2.xyzw, s2, l(0.000000)
      add r6.x, -r6.y, r6.x
      mad r3.w, r3.w, r6.x, r6.y
      div_sat r6.x, r3.y, cb0[11].x
      mad r6.xyzw, r6.xxxx, r5.xyzw, cb0[15].xyzw
      mad r3.w, -r3.w, cb0[12].x, l(1.000000)
      mul_sat r2.w, r2.w, r3.w
      mul r7.w, r2.w, r6.w
      mul r7.xyz, r6.xyzx, r7.wwww
      add r2.w, -r4.w, l(1.000000)
      mad r4.xyzw, r7.xyzw, r2.wwww, r4.xyzw
      mad r3.xyz, r1.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r3.xyzx
      mad r1.w, r2.x, l(0.200000), r1.w
      add r2.w, -r3.y, cb0[11].x
      div r2.w, r2.w, r2.y
      add r2.w, r2.w, l(-0.100000)
      add r3.w, r1.w, -cb0[10].x
      div r3.w, r3.w, cb0[10].y
      max r2.w, r2.w, r3.w
      mad r6.xyz, r3.xyzx, cb0[12].wwww, r2.zzzz
      frc r7.xyz, r6.xyzx
      add r6.xyz, r6.xyzx, -r7.xyzx
      mul r8.xyz, r7.xyzx, r7.xyzx
      mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
      mul r3.w, r7.z, r8.z
      mad r6.xy, r6.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r6.xyxx
      mad r6.xy, r8.xyxx, r7.xyxx, r6.xyxx
      add r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
      mul r6.xy, r6.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
      sample_l r6.xyzw, r6.xyxx, t2.xyzw, s2, l(0.000000)
      add r6.x, -r6.y, r6.x
      mad r3.w, r3.w, r6.x, r6.y
      div_sat r6.x, r3.y, cb0[11].x
      mad r6.xyzw, r6.xxxx, r5.xyzw, cb0[15].xyzw
      mad r3.w, -r3.w, cb0[12].x, l(1.000000)
      mul_sat r2.w, r2.w, r3.w
      mul r7.w, r2.w, r6.w
      mul r7.xyz, r6.xyzx, r7.wwww
      add r2.w, -r4.w, l(1.000000)
      mad r4.xyzw, r7.xyzw, r2.wwww, r4.xyzw
      mad r1.xyz, r1.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r3.xyzx
      mad r1.w, r2.x, l(0.200000), r1.w
      add r2.x, -r1.y, cb0[11].x
      div r2.x, r2.x, r2.y
      add r2.x, r2.x, l(-0.100000)
      add r1.w, r1.w, -cb0[10].x
      div r1.w, r1.w, cb0[10].y
      max r1.w, r1.w, r2.x
      mad r2.xyz, r1.xyzx, cb0[12].wwww, r2.zzzz
      frc r3.xyz, r2.xyzx
      add r2.xyz, r2.xyzx, -r3.xyzx
      mul r6.xyz, r3.xyzx, r3.xyzx
      mad r3.xyz, -r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
      mul r1.x, r3.z, r6.z
      mad r2.xy, r2.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r2.xyxx
      mad r2.xy, r6.xyxx, r3.xyxx, r2.xyxx
      add r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
      mul r2.xy, r2.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
      sample_l r2.xyzw, r2.xyxx, t2.xyzw, s2, l(0.000000)
      add r1.z, -r2.y, r2.x
      mad r1.x, r1.x, r1.z, r2.y
      div_sat r1.y, r1.y, cb0[11].x
      mad r2.xyzw, r1.yyyy, r5.xyzw, cb0[15].xyzw
      mad r1.x, -r1.x, cb0[12].x, l(1.000000)
      mul_sat r1.x, r1.x, r1.w
      mul r1.w, r1.x, r2.w
      mul r1.xyz, r1.wwww, r2.xyzx
      add r2.x, -r4.w, l(1.000000)
      mad r1.xyzw, r1.xyzw, r2.xxxx, r4.xyzw
      mul r2.xyzw, r1.xyzw, cb0[5].xxxx
      mad r1.x, -r1.w, cb0[5].x, l(1.000000)
      mad r0.xyzw, r0.xyzw, r1.xxxx, r2.xyzw
    endif
  endif
endif
mul r1.xy, v1.xyxx, cb0[2].zwzz
dp2 r1.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r1.xyxx
frc r1.x, r1.x
add r1.x, r1.x, l(-0.400000)
mad r1.x, r1.x, cb0[3].x, l(1.000000)
mul o0.xyzw, r0.xyzw, r1.xxxx
ret
// Approximately 0 instruction slots used