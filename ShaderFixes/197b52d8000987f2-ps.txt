// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 197b52d8000987f2-ps.txt
// 3DMigoto: 197b52d8000987f2 |    Unity headers extracted from DynamicFog_Image Effect_Orthographic Desktop Plus
//    Shader "DynamicFog/Image Effect/Orthographic Desktop Plus" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Image Effect_Orthographic Desktop Plus:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 108 4 8
//   undeciphered1a: 11
//   Keywords { "FOG_OF_WAR_ON" "DITHER_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 352
//   Vector 32 [_MainTex_TexelSize]
//   Float 48 [_FogDither]
//   Float 80 [_FogAlpha]
//   Vector 96 [_FogDistance]
//   Vector 112 [_FogHeightData]
//   Vector 128 [_FogNoiseData] 3
//   Vector 144 [_FogSkyData]
//   Float 160 [_FogSpeed]
//   Vector 176 [_FogColor]
//   Vector 192 [_FogColor2]
//   Vector 224 [_FogOfWarSize] 3
//   Vector 240 [_FogOfWarCenterAdjusted] 3
//   Vector 336 [_ClipDir] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CameraDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_FogOfWar] 2D 4
//   SetTexture 4 [_Noise2Tex] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:35:33 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[22], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r11.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 197b52d8000987f2-ps.txt

mul r11.w, -r11.x, r11.y
mad r12.xyz, -r11.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s0
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
add r1.x, -r1.x, l(1.000000)
add r2.y, -cb0[7].y, r12.y
mul r1.yzw, cb0[21].xxyz, cb1[5].zzzz
add r2.w, -r1.x, l(1.000000)
mad r1.yzw, -r1.yyzw, r2.wwww, v2.xxyz
mov r2.xz, r12.xxzx
add r3.xyz, r1.yzwy, r2.xyzx
add r1.y, r3.y, l(0.000010)
lt r1.z, l(0.999000), r1.x
if_nz r1.z
  add r1.z, |r1.y|, l(2.000000)
  div r4.xy, r3.xzxx, r1.zzzz
  mul r1.w, cb0[9].y, cb1[0].x
  mad r4.xy, r4.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000), r1.wwww
  sample r4.xyzw, r4.xyxx, t2.xyzw, s1
  div_sat r1.w, r1.z, cb0[7].x
  add r5.xyzw, -cb0[11].xyzw, cb0[12].xyzw
  mad r5.xyzw, r1.wwww, r5.xyzw, cb0[11].xyzw
  div r1.z, cb0[9].x, r1.z
  mad r1.w, -r4.y, cb0[9].z, l(1.000000)
  mul_sat r1.z, r1.w, r1.z
  mul r1.z, r1.z, cb0[9].w
  add r4.xyzw, -r0.xyzw, r5.xyzw
  mad r0.xyzw, r1.zzzz, r4.xyzw, r0.xyzw
endif
lt r1.z, cb0[7].x, r2.y
lt r1.w, cb0[7].x, r1.y
and r1.z, r1.w, r1.z
if_z r1.z
  add r3.w, r3.y, l(0.000010)
  add r3.xyz, -r2.xyzx, r3.xwzx
  dp2 r1.z, r3.xzxx, r3.xzxx
  sqrt r1.z, r1.z
  div r4.xy, r3.xzxx, r1.zzzz
  div r1.z, r1.z, r3.y
  min r5.y, r2.y, cb0[7].x
  add r1.w, r2.y, -r5.y
  mul r1.w, r1.w, r1.z
  mad r5.xz, -r4.xxyx, r1.wwww, r12.xxzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r1.w, r1.w
  min r2.w, r1.w, cb0[6].z
  add r6.xyz, -r2.xyzx, r5.xyzx
  dp3 r2.x, r6.xyzx, r6.xyzx
  sqrt r2.x, r2.x
  lt r2.z, r2.x, r2.w
  if_nz r2.z
    lt r2.z, l(0.000000), r1.z
    lt r3.w, l(-0.500000), r1.y
    and r2.z, r2.z, r3.w
    lt r3.w, r1.z, l(0.000000)
    lt r4.z, r1.y, l(0.500000)
    and r3.w, r3.w, r4.z
    and r1.y, r1.y, r3.w
    movc r6.y, r2.z, cb0[7].x, r1.y
    add r1.y, -r2.y, r6.y
    mul r1.y, r1.y, r1.z
    mad r6.xz, -r4.xxyx, r1.yyyy, r12.xxzx
    add r4.xyz, r5.xyzx, -r6.xyzx
    dp3 r1.y, r4.xyzx, r4.xyzx
    sqrt r1.y, r1.y
    add r1.z, -r2.x, r2.w
    min r1.y, r1.z, r1.y
    lt r1.z, l(0.000000), r1.y
    if_nz r1.z
      div r2.yzw, r3.xxyz, r1.wwww
      mul r3.xyz, r1.yyyy, r2.yzwy
      lt r1.x, r1.x, l(0.999000)
      if_nz r1.x
        mad r1.xz, r2.yywy, r1.yyyy, r5.xxzx
        div r1.xz, r1.xxzx, cb0[14].xxzx
        add r1.xz, r1.xxzx, -cb0[15].xxzx
        sample r4.xyzw, r1.xzxx, t3.wxyz, s4
        ge r1.x, l(0.000000), r4.x
      else
        mov r4.x, l(1.000000)
        mov r1.x, l(0)
      endif
      if_z r1.x
        mul r1.x, cb0[7].w, cb0[7].x
        mul r1.z, cb0[10].x, cb1[0].w
        mul r1.z, r1.z, l(5.000000)
        add r6.xyzw, -cb0[11].xyzw, cb0[12].xyzw
        mov r1.w, r2.x
        mov r8.xyz, r5.xyzx
        mov r7.xyzw, l(0,0,0,0)
        mov r2.y, l(5)
        loop
          ilt r2.z, r2.y, l(0)
          breakc_nz r2.z
          add r2.z, -r8.y, cb0[7].x
          div r2.z, r2.z, r1.x
          add r2.z, r2.z, l(-0.100000)
          add r2.w, r1.w, -cb0[6].x
          div r2.w, r2.w, cb0[6].y
          min r2.z, r2.w, r2.z
          mad r4.yzw, r8.xxyz, l(0.000000, 0.100000, 0.100000, 0.100000), r1.zzzz
          frc r9.xyz, r4.yzwy
          add r4.yzw, r4.yyzw, -r9.xxyz
          mul r10.xyz, r9.xyzx, r9.xyzx
          mad r9.xyz, -r9.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
          mul r2.w, r9.z, r10.z
          mad r4.yz, r4.wwww, l(0.000000, 37.000000, 17.000000, 0.000000), r4.yyzy
          mad r4.yz, r10.xxyx, r9.xxyx, r4.yyzy
          add r4.yz, r4.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
          mul r4.yz, r4.yyzy, l(0.000000, 0.00390625000, 0.00390625000, 0.000000)
          sample_l r9.xyzw, r4.yzyy, t4.xyzw, s2, l(0.000000)
          add r3.w, -r9.y, r9.x
          mad r2.w, r2.w, r3.w, r9.y
          div_sat r3.w, r8.y, cb0[7].x
          mad r9.xyzw, r3.wwww, r6.xyzw, cb0[11].xyzw
          mad r2.w, -r2.w, cb0[8].x, l(1.000000)
          mul_sat r2.z, r2.w, r2.z
          mul r10.w, r2.z, r9.w
          mul r10.xyz, r9.xyzx, r10.wwww
          add r2.z, -r7.w, l(1.000000)
          mad r7.xyzw, r10.xyzw, r2.zzzz, r7.xyzw
          iadd r2.y, r2.y, l(-1)
          mad r8.xyz, r3.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r8.xyzx
          mad r1.w, r1.y, l(0.200000), r1.w
        endloop
        mul r1.x, r4.x, cb0[5].x
        mul r2.xyzw, r1.xxxx, r7.xyzw
        mad r1.x, -r7.w, r1.x, l(1.000000)
        mad r0.xyzw, r0.xyzw, r1.xxxx, r2.xyzw
      endif
    endif
  endif
endif
mul r1.xy, v1.xyxx, cb0[2].zwzz
dp2 r1.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r1.xyxx
frc r1.x, r1.x
add r1.x, r1.x, l(-0.400000)
mad r1.x, r1.x, cb0[3].x, l(1.000000)
mul o0.xyzw, r0.xyzw, r1.xxxx
ret
// Approximately 0 instruction slots used