// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 1e77488547c81b05-ps.txt
// 3DMigoto: 1e77488547c81b05 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 137 2 10
//   undeciphered1a: 26
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_VOID_SPHERE" "FOG_POINT_LIGHT5" }
//   undeciphered2: 1 2 2 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 656
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 400 [_FogPointLightPosition2] 3
//   Vector 416 [_FogPointLightColor2] 3
//   Vector 432 [_FogPointLightPosition3] 3
//   Vector 448 [_FogPointLightColor3] 3
//   Vector 464 [_FogPointLightPosition4] 3
//   Vector 480 [_FogPointLightColor4] 3
//   Vector 496 [_FogPointLightPosition5] 3
//   Vector 512 [_FogPointLightColor5] 3
//   Vector 544 [_SunDir] 3
//   Vector 560 [_SunColor] 3
//   Vector 592 [_FogScatteringData2]
//   Float 608 [_Jitter]
//   Float 624 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:37:42 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[40], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 28
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r26.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 1e77488547c81b05-ps.txt

mul r26.w, -r26.x, r26.y
mad r27.xyz, -r26.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.y, -cb0[13].x, r27.y
mov r2.xz, r27.xxzx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.y, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.ywyy
and r3.x, r3.y, r3.x
lt r3.y, r2.y, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.y, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xwzx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[19].xyzx
  div r4.xyz, r1.xyzx, r1.wwww
  dp3 r2.w, r4.xyzx, r3.xyzx
  dp3 r3.x, r3.xyzx, r3.xyzx
  add r3.x, r3.x, -cb0[20].y
  mad r3.x, r2.w, r2.w, -r3.x
  ge r3.y, r3.x, l(0.000000)
  sqrt r3.z, r3.x
  movc r3.x, r3.y, r3.z, r3.x
  add r3.y, -r2.w, -r3.x
  max r3.y, r3.y, l(0.000000)
  min r3.z, r1.w, cb0[12].z
  add r2.w, -r2.w, r3.x
  min r2.w, r3.z, r2.w
  add r2.w, -r3.y, r2.w
  ge r3.x, r2.w, l(0.000000)
  if_nz r3.x
    mad r2.xyz, r4.xyzx, r3.yyyy, r2.xyzx
    mul r5.xyz, r1.xyzx, r2.wwww
    div r5.xyz, r5.xyzx, r1.wwww
    add r5.xyz, r2.xyzx, r5.xyzx
    add r5.xyz, -r5.xyzx, cb0[17].xyzx
    dp3 r3.x, r5.xyzx, r5.xyzx
    sqrt r3.x, r3.x
    mad r3.x, r3.x, cb0[18].x, l(-1.000000)
    mad_sat r3.x, cb0[18].w, r3.x, l(1.000000)
    lt r3.w, l(0.000000), r3.x
    if_nz r3.w
      log r3.w, r2.w
      mul r3.w, r3.w, l(0.693147182)
      max r3.w, r3.w, l(0.000000)
      mad r3.w, r3.w, cb0[15].x, l(0.100000)
      mul r3.w, r3.w, cb0[13].z
      mul_sat r4.w, r3.z, cb0[15].y
      mul r3.w, r3.w, r4.w
      add r3.y, -r3.y, r3.z
      max r3.z, r3.w, l(0.010000)
      mul r1.xyz, r1.xyzx, r3.zzzz
      div r1.xyz, r1.xyzx, r1.wwww
      div r1.w, r2.w, r3.z
      add r5.xyz, r2.xyzx, -cb0[21].xyzx
      add r6.xyz, r2.xyzx, -cb0[23].xyzx
      add r7.xyz, r2.xyzx, -cb0[25].xyzx
      add r8.xyz, r2.xyzx, -cb0[27].xyzx
      add r9.xyz, r2.xyzx, -cb0[29].xyzx
      add r10.xyz, r2.xyzx, -cb0[31].xyzx
      mul r11.xz, r1.xxzx, cb0[13].wwww
      mul r3.z, cb0[13].z, cb0[13].y
      div r11.y, r1.y, r3.z
      add r2.xz, r2.xxzx, cb0[14].xxzx
      mul r2.xz, r2.xxzx, cb0[13].wwww
      div r2.y, r2.y, r3.z
      add r3.zw, cb0[14].xxxz, cb0[19].xxxz
      add r12.xy, cb0[14].xzxx, r27.xzxx
      frc r4.w, cb0[39].x
      mad r1.w, r4.w, cb0[38].x, r1.w
      ge r2.w, r2.w, r3.y
      and r2.w, r2.w, l(0x3f800000)
      mov r13.xyzw, l(0,0,0,0)
      mov r14.xyz, r5.xyzx
      mov r15.xyz, r6.xyzx
      mov r16.xyz, r7.xyzx
      mov r17.xyz, r8.xyzx
      mov r18.xyz, r9.xyzx
      mov r19.xyz, r10.xyzx
      mov r3.y, r1.w
      mov r21.xyz, r2.xyzx
      mov r20.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r3.y
        breakc_nz r4.w
        mad r12.zw, r3.zzzw, cb0[13].wwww, -r21.xxxz
        mul r12.zw, r12.zzzw, cb0[20].xxxx
        dp2 r4.w, r12.zwzz, r12.zwzz
        sample_l r22.xyzw, r21.xzxx, t1.xyzw, s0, l(0.000000)
        mad r4.w, r4.w, cb0[20].w, |r21.y|
        add r4.w, -r4.w, r22.w
        mad r12.zw, r12.xxxy, cb0[13].wwww, -r21.xxxz
        dp2 r5.w, r12.zwzz, r12.zwzz
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r4.w, -r5.w, cb0[12].y, r4.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r23.xyz, r5.wwww, cb0[11].xyzx
          mul r24.w, r4.w, l(0.400000)
          dp3 r4.w, r14.xyzx, r14.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r15.xyzx, r15.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r6.w, r16.xyzx, r16.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r17.xyzx, r17.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          dp3 r8.w, r18.xyzx, r18.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          dp3 r9.w, r19.xyzx, r19.xyzx
          div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
          mul r25.xyz, r8.wwww, cb0[30].xyzx
          mad r25.xyz, cb0[32].xyzx, r9.wwww, r25.xyzx
          mad r25.xyz, cb0[28].xyzx, r7.wwww, r25.xyzx
          mad r25.xyz, cb0[26].xyzx, r6.wwww, r25.xyzx
          mad r25.xyz, cb0[24].xyzx, r5.wwww, r25.xyzx
          mad r25.xyz, cb0[22].xyzx, r4.wwww, r25.xyzx
          mad r22.xyz, r25.xyzx, r24.wwww, r22.xyzx
          mul r22.xyz, r24.wwww, r22.xyzx
          mul r24.xyz, r22.xyzx, r23.xyzx
          add r4.w, -r20.w, l(1.000000)
          mad r22.xyzw, r24.xyzw, r4.wwww, r20.xyzw
          lt r4.w, l(0.990000), r22.w
          if_nz r4.w
            mov r13.xyzw, r24.xyzw
            mov r20.xyzw, r22.xyzw
            break
          endif
          mov r13.xyzw, r24.xyzw
          mov r20.xyzw, r22.xyzw
        endif
        add r14.xyz, r1.xyzx, r14.xyzx
        add r15.xyz, r1.xyzx, r15.xyzx
        add r16.xyz, r1.xyzx, r16.xyzx
        add r17.xyz, r1.xyzx, r17.xyzx
        add r18.xyz, r1.xyzx, r18.xyzx
        add r19.xyz, r1.xyzx, r19.xyzx
        add r3.y, r3.y, l(-1.000000)
        add r21.xyz, r11.xyzx, r21.xyzx
      endloop
      lt r1.x, r20.w, l(0.990000)
      and r1.x, r1.x, l(0x3f800000)
      add r1.y, -r20.w, l(1.000000)
      mul r1.z, r2.w, r3.y
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r1.xyzw, r13.xyzw, r1.xxxx, r20.xyzw
      dp3 r2.x, r4.xyzx, cb0[34].xyzx
      mul r2.x, r2.x, cb0[37].w
      max r2.x, r2.x, l(0.000000)
      mul r2.x, r2.x, r2.x
      mul r2.x, r2.x, r2.x
      mul r2.x, r2.x, r2.x
      mul r2.x, r1.w, r2.x
      add r2.yzw, -r1.xxyz, cb0[35].xxyz
      mad r1.xyz, r2.xxxx, r2.yzwy, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul o0.xyzw, r3.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used