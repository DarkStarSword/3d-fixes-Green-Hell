// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 17a3e52ef7410406-ps.txt
// 3DMigoto: 17a3e52ef7410406 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 104 3 8
//   undeciphered1a: 15
//   Keywords { "FOG_AREA_BOX" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT0" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 464
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 352 [_SunDir] 3
//   Vector 368 [_SunColor] 3
//   Vector 400 [_FogScatteringData2]
//   Float 416 [_Jitter]
//   Float 432 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:34:41 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[28], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 17
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 17a3e52ef7410406-ps.txt

mul r15.w, -r15.x, r15.y
mad r16.xyz, -r15.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.z, -cb0[13].x, r16.z
mov r1.xy, r16.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
lt r2.xy, cb0[13].yyyy, r1.zwzz
and r2.x, r2.y, r2.x
lt r2.y, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.y
or r1.w, r1.w, r2.x
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.xyz, r1.xyzx, -cb0[17].xyzx
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r5.xyz, -r2.xyzx, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.xyz, -r2.xyzx, r4.xyzx
  mul r2.xyz, r2.xyzx, r3.xyzx
  min r4.xyz, r5.xyzx, r2.xyzx
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.xyz, r5.xyzx, r2.xyzx
  min r2.xy, r2.yzyy, r2.xxxx
  min r2.x, r2.y, r2.x
  min r2.y, r0.w, cb0[12].z
  min r2.x, r2.y, r2.x
  add r2.x, -r1.w, r2.x
  lt r2.z, l(0.000000), r2.x
  if_nz r2.z
    div r3.xyz, r1.wwww, r3.xyzx
    add r1.xyz, r1.xyzx, r3.xyzx
    div r2.zw, cb0[18].xxxy, cb0[13].wwww
    log r3.x, r2.x
    mul r3.x, r3.x, l(0.693147182)
    max r3.x, r3.x, l(0.000000)
    mad r3.x, r3.x, cb0[15].x, l(0.100000)
    mul r3.x, r3.x, cb0[13].z
    mul_sat r3.y, r2.y, cb0[15].y
    mul r3.x, r3.y, r3.x
    add r1.w, -r1.w, r2.y
    max r2.y, r3.x, l(0.010000)
    mul r3.xyz, r0.xyzx, r2.yyyy
    div r3.xyz, r3.xyzx, r0.wwww
    div r2.y, r2.x, r2.y
    add r4.xyz, r1.xyzx, -cb0[19].xyzx
    mul r5.xy, r3.xyxx, cb0[13].wwww
    mul r3.w, cb0[13].z, cb0[13].y
    div r5.z, r3.z, r3.w
    add r1.xy, r1.xyxx, cb0[14].xzxx
    mul r1.xy, r1.xyxx, cb0[13].wwww
    div r1.z, r1.z, r3.w
    add r6.xy, cb0[14].xyxx, cb0[17].xyxx
    frc r3.w, cb0[27].x
    mad r2.y, r3.w, cb0[26].x, r2.y
    ge r1.w, r2.x, r1.w
    mov r7.xyzw, l(0,0,0,0)
    mov r8.xyz, r4.xyzx
    mov r2.x, r2.y
    mov r10.xyz, r1.xyzx
    mov r9.xyzw, l(0,0,0,0)
    loop
      ge r3.w, l(1.000000), r2.x
      breakc_nz r3.w
      mad r6.zw, r6.xxxy, cb0[13].wwww, -r10.xxxy
      mul r6.zw, r2.zzzw, |r6.zzzw|
      max r3.w, r6.w, r6.z
      sample_l r11.xyzw, r10.xyxx, t2.xyzw, s0, l(0.000000)
      mad r3.w, r3.w, cb0[18].w, |r10.z|
      add r3.w, -r3.w, r11.w
      lt r4.w, l(0.000000), r3.w
      if_nz r4.w
        add r4.w, -r3.w, l(1.000000)
        mul r12.xyz, r4.wwww, cb0[11].xyzx
        mul r13.w, r3.w, l(0.400000)
        dp3 r3.w, r8.xyzx, r8.xyzx
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        mul r14.xyz, r3.wwww, cb0[20].xyzx
        mad r11.xyz, r14.xyzx, r13.wwww, r11.xyzx
        mul r11.xyz, r13.wwww, r11.xyzx
        mul r13.xyz, r11.xyzx, r12.xyzx
        add r3.w, -r9.w, l(1.000000)
        mad r11.xyzw, r13.xyzw, r3.wwww, r9.xyzw
        lt r3.w, l(0.990000), r11.w
        if_nz r3.w
          mov r7.xyzw, r13.xyzw
          mov r9.xyzw, r11.xyzw
          break
        endif
        mov r7.xyzw, r13.xyzw
        mov r9.xyzw, r11.xyzw
      endif
      add r8.xyz, r3.xyzx, r8.xyzx
      add r2.x, r2.x, l(-1.000000)
      add r10.xyz, r5.xyzx, r10.xyzx
    endloop
    lt r1.x, r9.w, l(0.990000)
    and r1.xw, r1.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
    add r1.y, -r9.w, l(1.000000)
    mul r1.z, r2.x, r1.w
    mul r1.x, r1.y, r1.x
    mul r1.x, r1.z, r1.x
    mad r1.xyzw, r7.xyzw, r1.xxxx, r9.xyzw
    div r0.xyz, r0.xyzx, r0.wwww
    dp3 r0.x, r0.xyzx, cb0[22].xyzx
    mul r0.x, r0.x, cb0[25].w
    max r0.x, r0.x, l(0.000000)
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, r0.x
    mul r0.x, r1.w, r0.x
    add r0.yzw, -r1.xxyz, cb0[23].xxyz
    mad r1.xyz, r0.xxxx, r0.yzwy, r1.xyzx
    mul o0.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used