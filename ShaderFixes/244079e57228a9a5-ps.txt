// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 244079e57228a9a5-ps.txt
// 3DMigoto: 244079e57228a9a5 |    Unity headers extracted from DynamicFog_Opaque_Lambert Solid Color
//    Shader "DynamicFog/Opaque/Lambert Solid Color" {
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        LOD 200
//        Tags { "RenderType"="Opaque" }
//        Pass 1/3 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDBASE" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Opaque_Lambert Solid Color:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 114 4 6
//   undeciphered1a: 6
//   Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
//   undeciphered2: 1 1 4 1 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 128
//   Vector 32 [_LightColor0]
//   Vector 64 [_Color]
//   Vector 80 [_FogData]
//   Vector 96 [_FogColor]
//   Float 112 [_FogData2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 624 [unity_SHAr]
//   Vector 640 [unity_SHAg]
//   Vector 656 [unity_SHAb]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [unity_ProbeVolumeSH] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityProbeVolume" 3
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:40:24 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyz         1     NONE   float   xyz
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyz         3     NONE   float   xyz
// TEXCOORD                 3   xyzw        4     NONE   float
// TEXCOORD                 4   xyzw        5     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 8
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r6.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 244079e57228a9a5-ps.txt

mul r6.w, -r6.x, r6.y
mad r7.xyz, -r6.wwww, cb10[0].xyzw, cb1[4].xyzw

eq r0.x, cb3[0].x, l(1.000000)
if_nz r0.x
  eq r0.y, cb3[0].y, l(1.000000)
  mul r1.xyz, v2.yyyy, cb3[2].xyzx
  mad r1.xyz, cb3[1].xyzx, v2.xxxx, r1.xyzx
  mad r1.xyz, cb3[3].xyzx, v2.zzzz, r1.xyzx
  add r1.xyz, r1.xyzx, cb3[4].xyzx
  movc r0.yzw, r0.yyyy, r1.xxyz, v2.xxyz
  add r0.yzw, r0.yyzw, -cb3[6].xxyz
  mul r1.yzw, r0.yyzw, cb3[5].xxyz
  mad r0.y, r1.y, l(0.250000), l(0.750000)
  mad r0.z, cb3[0].z, l(0.500000), l(0.750000)
  max r1.x, r0.z, r0.y
  sample r1.xyzw, r1.xzwx, t0.xyzw, s0
else
  mov r1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r0.y, r1.xyzw, cb2[46].xyzw
mul r0.yzw, r0.yyyy, cb0[2].xxyz
if_nz r0.x
  eq r0.x, cb3[0].y, l(1.000000)
  mul r1.xyz, v2.yyyy, cb3[2].xyzx
  mad r1.xyz, cb3[1].xyzx, v2.xxxx, r1.xyzx
  mad r1.xyz, cb3[3].xyzx, v2.zzzz, r1.xyzx
  add r1.xyz, r1.xyzx, cb3[4].xyzx
  movc r1.xyz, r0.xxxx, r1.xyzx, v2.xyzx
  add r1.xyz, r1.xyzx, -cb3[6].xyzx
  mul r1.yzw, r1.xxyz, cb3[5].xxyz
  mul r0.x, r1.y, l(0.250000)
  mul r1.y, cb3[0].z, l(0.500000)
  mad r2.x, -cb3[0].z, l(0.500000), l(0.250000)
  max r0.x, r0.x, r1.y
  min r1.x, r2.x, r0.x
  sample r2.xyzw, r1.xzwx, t0.xyzw, s0
  add r3.xyz, r1.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r3.xyzw, r3.xyzx, t0.xyzw, s0
  add r1.xyz, r1.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r1.xyzw, r1.xyzx, t0.xyzw, s0
  mov r4.xyz, v1.xyzx
  mov r4.w, l(1.000000)
  dp4 r2.x, r2.xyzw, r4.xyzw
  dp4 r2.y, r3.xyzw, r4.xyzw
  dp4 r2.z, r1.xyzw, r4.xyzw
else
  mov r1.xyz, v1.xyzx
  mov r1.w, l(1.000000)
  dp4 r2.x, cb2[39].xyzw, r1.xyzw
  dp4 r2.y, cb2[40].xyzw, r1.xyzw
  dp4 r2.z, cb2[41].xyzw, r1.xyzw
endif
add r1.xyz, r2.xyzx, v3.xyzx
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r0.x, v1.xyzx, cb2[0].xyzx
max r0.x, r0.x, l(0.000000)
mul r0.yzw, r0.yyzw, cb0[4].xxyz
mul r1.xyz, r1.xyzx, cb0[4].xyzx
mad r0.xyz, r0.yzwy, r0.xxxx, r1.xyzx
add r1.y, v2.y, -cb0[5].y
add r0.w, cb0[5].y, l(0.000100)
add r2.y, -r0.w, r7.y
ge r0.w, cb0[5].x, r2.y
ge r1.w, cb0[5].x, r1.y
or r0.w, r0.w, r1.w
if_nz r0.w
  mov r2.xz, r7.xxzx
  mov r1.xz, v2.xxzx
  add r1.xzw, r1.xxyz, -r2.xxyz
  dp2 r0.w, r1.xwxx, r1.xwxx
  sqrt r0.w, r0.w
  div r3.xy, r1.xwxx, r0.wwww
  div r0.w, r0.w, r1.z
  min r4.y, r2.y, cb0[5].x
  add r2.w, r2.y, -r4.y
  mul r2.w, r0.w, r2.w
  mad r4.xz, -r3.xxyx, r2.wwww, r7.xxzx
  dp3 r1.x, r1.xzwx, r1.xzwx
  add r2.xzw, -r2.xxyz, r4.xxyz
  dp3 r1.w, r2.xzwx, r2.xzwx
  sqrt r1.xw, r1.xxxw
  lt r2.x, r1.w, r1.x
  if_nz r2.x
    lt r2.x, l(0.000000), r0.w
    lt r2.z, l(-0.500000), r1.y
    and r2.x, r2.z, r2.x
    lt r2.z, r0.w, l(0.000000)
    lt r2.w, r1.y, l(0.500000)
    and r2.z, r2.w, r2.z
    and r1.y, r1.y, r2.z
    movc r5.y, r2.x, cb0[5].x, r1.y
    add r1.y, -r2.y, r5.y
    mul r0.w, r0.w, r1.y
    mad r5.xz, -r3.xxyx, r0.wwww, r7.xxzx
    add r2.xyz, r4.xyzx, -r5.xyzx
    dp3 r0.w, r2.xyzx, r2.xyzx
    sqrt r0.w, r0.w
    add r1.y, -r1.w, r1.x
    min r0.w, r0.w, r1.y
    lt r1.y, l(0.000000), r0.w
    div r1.x, r1.z, r1.x
    mul r1.x, r0.w, r1.x
    add r1.z, -r4.y, cb0[5].x
    mul r2.x, cb0[5].w, cb0[5].x
    div r1.z, r1.z, r2.x
    add r1.z, r1.z, l(-0.100000)
    add r2.y, r1.w, -cb0[5].z
    div r2.y, r2.y, cb0[7].x
    min_sat r1.z, r1.z, r2.y
    mul r3.w, r1.z, cb0[6].w
    mul r3.xyz, r3.wwww, cb0[6].xyzx
    mad r2.y, r1.x, l(0.500000), r4.y
    mad r1.w, r0.w, l(0.500000), r1.w
    add r2.z, -r2.y, cb0[5].x
    div r2.z, r2.z, r2.x
    add r2.z, r2.z, l(-0.100000)
    add r2.w, r1.w, -cb0[5].z
    div r2.w, r2.w, cb0[7].x
    min_sat r2.z, r2.w, r2.z
    mul r4.w, r2.z, cb0[6].w
    mul r4.xyz, r4.wwww, cb0[6].xyzx
    mad r1.z, -cb0[6].w, r1.z, l(1.000000)
    mad r3.xyzw, r4.xyzw, r1.zzzz, r3.xyzw
    mad r1.x, r1.x, l(0.500000), r2.y
    mad r0.w, r0.w, l(0.500000), r1.w
    add r1.x, -r1.x, cb0[5].x
    div r1.x, r1.x, r2.x
    add r1.x, r1.x, l(-0.100000)
    add r0.w, r0.w, -cb0[5].z
    div r0.w, r0.w, cb0[7].x
    min_sat r0.w, r0.w, r1.x
    mul r2.w, r0.w, cb0[6].w
    mul r2.xyz, r2.wwww, cb0[6].xyzx
    add r0.w, -r3.w, l(1.000000)
    mad r2.xyzw, r2.xyzw, r0.wwww, r3.xyzw
    mul r1.xzw, r2.xxyz, cb0[6].wwww
    mad r0.w, -r2.w, cb0[6].w, l(1.000000)
    mad r1.xzw, r0.xxyz, r0.wwww, r1.xxzw
    movc r0.xyz, r1.yyyy, r1.xzwx, r0.xyzx
  endif
endif
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used