// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 832387b31480b8a2-ps.txt
// 3DMigoto: 832387b31480b8a2 |    Unity headers extracted from Amplify_botfly_wound_shader
//    Shader "Amplify/botfly_wound_shader" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "IGNOREPROJECTOR"="true" "QUEUE"="AlphaTest+0" "RenderType"="Transparent" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "IGNOREPROJECTOR"="true" "LIGHTMODE"="FORWARDBASE" "QUEUE"="AlphaTest+0" "RenderType"="Transparent" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_botfly_wound_shader:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 224 10 8
//   undeciphered1a: 14
//   Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "INSTANCING_ON" }
//   undeciphered2: 1 8 8 7 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 160
//   Vector 32 [_LightColor0]
//   Vector 64 [_main_base_nrm_ST]
//   Vector 80 [_Masks_ST]
//   Vector 96 [_Color1]
//   Vector 112 [_albedo_ST]
//   Float 128 [_Cutoff]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "UnityDrawCallInfo" 16
//   ScalarInt 0 [unity_BaseInstanceID]
//   ConstBuffer "UnityInstancing_PerDraw2" 224
//   Struct 0 [unity_Builtins2Array] 2 112
//   Vector 0 [unity_SHArArray]
//   Vector 16 [unity_SHAgArray]
//   Vector 32 [unity_SHAbArray]
//   Vector 48 [unity_SHBrArray]
//   Vector 64 [unity_SHBgArray]
//   Vector 80 [unity_SHBbArray]
//   Vector 96 [unity_SHCArray]
//   ConstBuffer "UnityInstancing_Amplifybotfly_wound_shader" 160
//   Struct 0 [Amplifybotfly_wound_shaderArray] 2 80
//   Vector 0 [_albedo_falki1_color]
//   Vector 16 [_kierunekrobala1] 2
//   Vector 24 [_kierunekrobala2] 2
//   Float 32 [_main_mask_power]
//   Float 36 [_albedo_falki1]
//   Float 40 [_Float0]
//   Float 44 [_smoothnes2]
//   Float 48 [_smoothnes]
//   Float 52 [_detail_sking_tiling]
//   Float 56 [_tiling_falek]
//   Float 60 [_szybkosc_robala]
//   Float 64 [_normal_scale_falek]
//   Float 68 [_detail_skin_intensity]
//   Float 72 [_mask_power]
//   Float 76 [_main_base_scale_nrm]
//   SetTexture 0 [_nrm_do_ruszania] 2D 2
//   SetTexture 1 [_main_base_nrm] 2D 3
//   SetTexture 2 [_Masks] 2D 4
//   SetTexture 3 [_detail_normal] 2D 5
//   SetTexture 4 [_albedo] 2D 6
//   SetTexture 5 [unity_SpecCube0] CUBE 0
//   SetTexture 6 [unity_SpecCube1] CUBE -1
//   SetTexture 7 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//   BindCB "UnityProbeVolume" 4
//   BindCB "UnityDrawCallInfo" 5
//   BindCB "UnityInstancing_PerDraw2" 6
//   BindCB "UnityInstancing_Amplifybotfly_wound_shader" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:31:22 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyzw        6     NONE   float
// TEXCOORD                 7   xyzw        7     NONE   float
// SV_InstanceID            0   x           8     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[8], immediateIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_constantbuffer cb5[1], immediateIndexed
dcl_constantbuffer cb6[14], dynamicIndexed
dcl_constantbuffer cb7[10], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps constant v8.x
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 832387b31480b8a2-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

iadd r0.x, v8.x, cb5[0].x
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r0.yzw, -r1.xxyz, r15.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r2.xyz, r0.yzwy, r1.wwww
imul null, r3.xy, r0.xxxx, l(5, 7, 0, 0)
mul r3.zw, v1.xxxy, cb7[r3.x + 3].yyyy
mad r4.xyzw, v1.xyxy, cb7[r3.x + 3].zzzz, l(0.000000, 1.000000, 0.000000, 1.000000)
mul r5.xyzw, cb7[r3.x + 1].zwxy, cb7[r3.x + 3].wwww
mad r4.xyzw, cb1[0].yyyy, r5.xyzw, r4.xyzw
sample r5.xyzw, r4.xyxx, t0.xyzw, s2
mul r6.x, r5.w, r5.x
mov r6.yz, r5.yyyy
mad r5.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r4.xy, r5.xzxx, cb7[r3.x + 4].xxxx
dp2 r0.x, r4.xyxx, r4.xyxx
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
sqrt r0.x, r0.x
sample r4.xyzw, r4.zwzz, t0.xyzw, s2
mul r6.x, r4.w, r4.x
mov r6.yz, r4.yyyy
mad r4.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r4.xyz, r4.xyzx, cb7[r3.x + 4].xxxx
dp2 r2.w, r4.xzxx, r4.xzxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r2.w, r2.w
mad r6.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
sample r6.xyzw, r6.xyxx, t1.xyzw, s3
mul r6.x, r6.w, r6.x
mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r6.xy, r6.xyxx, cb7[r3.x + 4].wwww
dp2 r4.w, r6.xyxx, r6.xyxx
min r4.w, r4.w, l(1.000000)
add r4.w, -r4.w, l(1.000000)
sqrt r6.z, r4.w
mad r7.xy, v1.xyxx, cb0[5].xyxx, cb0[5].zwzz
sample r7.xyzw, r7.xyxx, t2.xyzw, s4
mad r4.xyz, r5.xyzx, cb7[r3.x + 4].xxxx, r4.xyzx
mul r4.w, r0.x, r2.w
dp3 r0.x, r4.xywx, r4.xywx
rsq r0.x, r0.x
mul r2.w, r0.x, r4.w
mad r5.xy, r4.xyxx, r0.xxxx, r6.xyxx
mul r5.z, r6.z, r2.w
dp3 r0.x, r5.xyzx, r5.xyzx
rsq r0.x, r0.x
mul r4.xyw, r0.xxxx, r5.xyxz
add r2.w, -r7.y, l(1.000000)
log r2.w, r2.w
mul r2.w, r2.w, cb7[r3.x + 4].z
exp r2.w, r2.w
mad r5.xyz, -r5.xyzx, r0.xxxx, r6.xyzx
mad r4.xyw, r2.wwww, r5.xyxz, r4.xyxw
sample r5.xyzw, r3.zwzz, t3.xyzw, s5
mul r5.x, r5.w, r5.x
mad r3.zw, r5.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r5.xy, r3.zwzz, cb7[r3.x + 4].yyyy
dp2 r0.x, r5.xyxx, r5.xyxx
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
sqrt r0.x, r0.x
mad r5.xy, r3.zwzz, cb7[r3.x + 4].yyyy, r4.xyxx
mul r5.z, r0.x, r4.w
dp3 r0.x, r5.xyzx, r5.xyzx
rsq r0.x, r0.x
mul r4.xyw, r0.xxxx, r5.xyxz
mad r3.zw, v1.xxxy, cb0[7].xxxy, cb0[7].zzzw
sample r5.xyzw, r3.zwzz, t4.xyzw, s6
mul_sat r5.xyz, r5.xyzx, cb0[6].xyzx
mul r6.xyz, r7.xyxx, cb7[r3.x + 2].xzyx
mul_sat r0.x, r4.z, r6.z
mul_sat r7.xyz, r5.xyzx, cb7[r3.x + 0].xyzx
add r7.xyz, -r5.xyzx, r7.xyzx
mad r5.xyz, r0.xxxx, r7.xyzx, r5.xyzx
mov_sat r6.xy, r6.xyxx
mul r5.xyz, r5.xyzx, r6.xxxx
add r0.x, cb7[r3.x + 2].w, -cb7[r3.x + 3].x
mad r0.x, r6.y, r0.x, cb7[r3.x + 3].x
add r2.w, r6.x, -cb0[8].x
lt r2.w, r2.w, l(0.000000)
discard_nz r2.w
eq r2.w, cb4[0].x, l(1.000000)
if_nz r2.w
  eq r3.x, cb4[0].y, l(1.000000)
  mul r6.yzw, v3.wwww, cb4[2].xxyz
  mad r6.yzw, cb4[1].xxyz, v2.wwww, r6.yyzw
  mad r6.yzw, cb4[3].xxyz, v4.wwww, r6.yyzw
  add r6.yzw, r6.yyzw, cb4[4].xxyz
  movc r3.xzw, r3.xxxx, r6.yyzw, r1.xxyz
  add r3.xzw, r3.xxzw, -cb4[6].xxyz
  mul r7.yzw, r3.xxzw, cb4[5].xxyz
  mad r3.x, r7.y, l(0.250000), l(0.750000)
  mad r3.z, cb4[0].z, l(0.500000), l(0.750000)
  max r7.x, r3.z, r3.x
  sample r7.xyzw, r7.xzwx, t7.xyzw, s1
else
  mov r7.xyzw, cb6[r3.y + 6].wwww
endif
dp4_sat r3.x, r7.xyzw, cb2[46].xyzw
dp3 r7.x, v2.xyzx, r4.xywx
dp3 r7.y, v3.xyzx, r4.xywx
dp3 r7.z, v4.xyzx, r4.xywx
dp3 r3.z, r7.xyzx, r7.xyzx
rsq r3.z, r3.z
mul r4.xyz, r3.zzzz, r7.xyzx
add r3.z, -r0.x, l(1.000000)
dp3 r3.w, -r2.xyzx, r4.xyzx
add r3.w, r3.w, r3.w
mad r6.yzw, r4.xxyz, -r3.wwww, -r2.xxyz
mul r7.xyz, r3.xxxx, cb0[2].xyzx
if_nz r2.w
  eq r2.w, cb4[0].y, l(1.000000)
  mul r8.xyz, v3.wwww, cb4[2].xyzx
  mad r8.xyz, cb4[1].xyzx, v2.wwww, r8.xyzx
  mad r8.xyz, cb4[3].xyzx, v4.wwww, r8.xyzx
  add r8.xyz, r8.xyzx, cb4[4].xyzx
  movc r8.xyz, r2.wwww, r8.xyzx, r1.xyzx
  add r8.xyz, r8.xyzx, -cb4[6].xyzx
  mul r8.yzw, r8.xxyz, cb4[5].xxyz
  mul r2.w, r8.y, l(0.250000)
  mul r3.x, cb4[0].z, l(0.500000)
  mad r3.w, -cb4[0].z, l(0.500000), l(0.250000)
  max r2.w, r2.w, r3.x
  min r8.x, r3.w, r2.w
  sample r9.xyzw, r8.xzwx, t7.xyzw, s1
  add r10.xyz, r8.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r10.xyzw, r10.xyzx, t7.xyzw, s1
  add r8.xyz, r8.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r8.xyzw, r8.xyzx, t7.xyzw, s1
  mov r4.w, l(1.000000)
  dp4 r9.x, r9.xyzw, r4.xyzw
  dp4 r9.y, r10.xyzw, r4.xyzw
  dp4 r9.z, r8.xyzw, r4.xyzw
else
  mov r4.w, l(1.000000)
  dp4 r9.x, cb6[r3.y + 0].xyzw, r4.xyzw
  dp4 r9.y, cb6[r3.y + 1].xyzw, r4.xyzw
  dp4 r9.z, cb6[r3.y + 2].xyzw, r4.xyzw
endif
add r3.xyw, r9.xyxz, v5.xyxz
max r3.xyw, r3.xyxw, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r2.w, l(0.000000), cb3[2].w
if_nz r2.w
  dp3 r2.w, r6.yzwy, r6.yzwy
  rsq r2.w, r2.w
  mul r8.xyz, r2.wwww, r6.yzwy
  add r9.xyz, -r1.xyzx, cb3[0].xyzx
  div r9.xyz, r9.xyzx, r8.xyzx
  add r10.xyz, -r1.xyzx, cb3[1].xyzx
  div r10.xyz, r10.xyzx, r8.xyzx
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
  movc r9.xyz, r11.xyzx, r9.xyzx, r10.xyzx
  min r2.w, r9.y, r9.x
  min r2.w, r9.z, r2.w
  add r9.xyz, r1.xyzx, -cb3[2].xyzx
  mad r8.xyz, r8.xyzx, r2.wwww, r9.xyzx
else
  mov r8.xyz, r6.yzwy
endif
mad r2.w, -r3.z, l(0.700000), l(1.700000)
mul r2.w, r2.w, r3.z
mul r2.w, r2.w, l(6.000000)
sample_l r8.xyzw, r8.xyzx, t5.xyzw, s0, r2.w
add r4.w, r8.w, l(-1.000000)
mad r4.w, cb3[3].w, r4.w, l(1.000000)
log r4.w, r4.w
mul r4.w, r4.w, cb3[3].y
exp r4.w, r4.w
mul r4.w, r4.w, cb3[3].x
mul r9.xyz, r8.xyzx, r4.wwww
lt r5.w, cb3[1].w, l(0.999990)
if_nz r5.w
  lt r5.w, l(0.000000), cb3[6].w
  if_nz r5.w
    dp3 r5.w, r6.yzwy, r6.yzwy
    rsq r5.w, r5.w
    mul r10.xyz, r5.wwww, r6.yzwy
    add r11.xyz, -r1.xyzx, cb3[4].xyzx
    div r11.xyz, r11.xyzx, r10.xyzx
    add r12.xyz, -r1.xyzx, cb3[5].xyzx
    div r12.xyz, r12.xyzx, r10.xyzx
    lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
    min r5.w, r11.y, r11.x
    min r5.w, r11.z, r5.w
    add r1.xyz, r1.xyzx, -cb3[6].xyzx
    mad r6.yzw, r10.xxyz, r5.wwww, r1.xxyz
  endif
  sample_l r10.xyzw, r6.yzwy, t6.xyzw, s0, r2.w
  add r1.x, r10.w, l(-1.000000)
  mad r1.x, cb3[7].w, r1.x, l(1.000000)
  log r1.x, r1.x
  mul r1.x, r1.x, cb3[7].y
  exp r1.x, r1.x
  mul r1.x, r1.x, cb3[7].x
  mul r1.xyz, r10.xyzx, r1.xxxx
  mad r6.yzw, r4.wwww, r8.xxyz, -r1.xxyz
  mad r9.xyz, cb3[1].wwww, r6.yzwy, r1.xyzx
endif
mul r1.xyz, r5.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r0.yzw, r0.yyzw, r1.wwww, cb2[0].xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
max r1.w, r1.w, l(0.001000)
rsq r1.w, r1.w
mul r0.yzw, r0.yyzw, r1.wwww
dp3 r1.w, r4.xyzx, r2.xyzx
dp3_sat r2.x, r4.xyzx, cb2[0].xyzx
dp3_sat r2.y, r4.xyzx, r0.yzwy
dp3_sat r0.y, cb2[0].xyzx, r0.yzwy
mul r0.z, r0.y, r0.y
dp2 r0.z, r0.zzzz, r3.zzzz
add r0.z, r0.z, l(-0.500000)
add r0.w, -r2.x, l(1.000000)
mul r2.z, r0.w, r0.w
mul r2.z, r2.z, r2.z
mul r0.w, r0.w, r2.z
mad r0.w, r0.z, r0.w, l(1.000000)
add r2.z, -|r1.w|, l(1.000000)
mul r2.w, r2.z, r2.z
mul r2.w, r2.w, r2.w
mul r2.z, r2.z, r2.w
mad r0.z, r0.z, r2.z, l(1.000000)
mul r0.z, r0.z, r0.w
mul r0.z, r2.x, r0.z
mul r0.w, r3.z, r3.z
max r0.w, r0.w, l(0.002000)
add r2.w, -r0.w, l(1.000000)
mad r3.z, |r1.w|, r2.w, r0.w
mad r2.w, r2.x, r2.w, r0.w
mul r1.w, |r1.w|, r2.w
mad r1.w, r2.x, r3.z, r1.w
add r1.w, r1.w, l(0.000010)
div r1.w, l(0.500000), r1.w
mul r2.w, r0.w, r0.w
mad r3.z, r2.y, r2.w, -r2.y
mad r2.y, r3.z, r2.y, l(1.000000)
mul r2.w, r2.w, l(0.318309873)
mad r2.y, r2.y, r2.y, l(1.000000012E-007)
div r2.y, r2.w, r2.y
mul r1.w, r1.w, r2.y
mul r1.w, r1.w, l(3.14159274)
mul r1.w, r2.x, r1.w
max r1.w, r1.w, l(0.000000)
mad r0.w, r0.w, r0.w, l(1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add_sat r0.x, r0.x, l(0.0400000215)
mad r2.xyw, r7.xyxz, r0.zzzz, r3.xyxw
mul r3.xyz, r7.xyzx, r1.wwww
add r0.y, -r0.y, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.y, r0.z
mad r0.y, r0.y, l(0.960000), l(0.040000)
mul r3.xyz, r0.yyyy, r3.xyzx
mad r1.xyz, r1.xyzx, r2.xywx, r3.xyzx
mul r0.yzw, r9.xxyz, r0.wwww
add r0.x, r0.x, l(-0.040000)
mad r0.x, r2.z, r0.x, l(0.040000)
mad o0.xyz, r0.yzwy, r0.xxxx, r1.xyzx
mov o0.w, r6.x
ret
// Approximately 0 instruction slots used