// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 97f892c9336277e5-ps.txt
// 3DMigoto: 97f892c9336277e5 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 184 2 12
//   undeciphered1a: 25
//   Keywords { "FOG_VOID_BOX" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT4" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 704
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 368 [_FogPointLightPosition2] 3
//   Vector 384 [_FogPointLightColor2] 3
//   Vector 400 [_FogPointLightPosition3] 3
//   Vector 416 [_FogPointLightColor3] 3
//   Vector 432 [_FogPointLightPosition4] 3
//   Vector 448 [_FogPointLightColor4] 3
//   Vector 480 [_SunDir] 3
//   Vector 496 [_SunColor] 3
//   Vector 528 [_FogScatteringData2]
//   Vector 624 [_VolumetricFogSunWorldPos]
//   Vector 640 [_VolumetricFogSunShadowsData]
//   Float 656 [_Jitter]
//   Matrix 560 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:43:46 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[42], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 27
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r25.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 97f892c9336277e5-ps.txt

mul r25.w, -r25.x, r25.y
mad r26.xyz, -r25.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.z, r0.y, r26.z
mov r1.xy, r26.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.z, l(0.000010)
lt r0.y, cb0[13].y, r1.z
lt r0.w, cb0[13].y, r0.x
and r0.y, r0.w, r0.y
lt r0.w, r1.z, r0.z
lt r1.w, r0.x, r0.z
and r0.w, r0.w, r1.w
or r0.y, r0.w, r0.y
if_z r0.y
  add r2.w, r2.z, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xywx
  dp3 r0.y, r2.xyzx, r2.xyzx
  dp2 r0.w, r2.xyxx, r2.xyxx
  sqrt r0.yw, r0.yyyw
  div r3.xy, r2.xyxx, r0.wwww
  div r0.w, r0.w, r2.z
  max r1.w, r0.z, r1.z
  min r4.z, r1.w, cb0[13].y
  add r1.w, r1.z, -r4.z
  mul r1.w, r0.w, r1.w
  mad r4.xy, -r3.xyxx, r1.wwww, r26.xyxx
  min r1.w, r0.y, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xyzx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.y, r1.x, r1.w
  if_nz r1.y
    lt r1.y, l(0.000000), r0.w
    lt r2.w, l(-0.500000), r0.x
    and r1.y, r1.y, r2.w
    lt r2.w, r0.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r2.w
    and r0.x, r0.z, r0.x
    movc r5.z, r1.y, cb0[13].y, r0.x
    add r0.x, -r1.z, r5.z
    mul r0.x, r0.x, r0.w
    mad r5.xy, -r3.xyxx, r0.xxxx, r26.xyxx
    add r0.xzw, r4.xxyz, -r5.xxyz
    dp3 r0.x, r0.xzwx, r0.xzwx
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r1.w
    min r0.x, r0.z, r0.x
    lt r0.w, l(0.000000), r0.x
    if_nz r0.w
      mul r3.xyz, r2.xyzx, r0.xxxx
      div r3.xyz, r3.xyzx, r0.yyyy
      add r3.xyz, r3.xyzx, r4.xyzx
      add r3.xyz, -r3.xyzx, cb0[17].xyzx
      mul r3.xyz, |r3.xyzx|, cb0[18].xyzx
      max r0.w, r3.y, r3.x
      max r0.w, r3.z, r0.w
      add r0.w, r0.w, l(-1.000000)
      mad_sat r0.w, cb0[18].w, r0.w, l(1.000000)
      lt r1.y, l(0.000000), r0.w
      if_nz r1.y
        mul r1.yz, v1.xxyx, cb1[6].xxyx
        dp2 r1.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r1.yzyy
        frc r1.y, r1.y
        add r1.y, r1.y, l(-0.500000)
        log r1.z, r0.x
        mul r1.z, r1.z, l(0.693147182)
        max r1.z, r1.z, l(0.000000)
        mad r1.z, r1.z, cb0[15].x, l(0.100000)
        mul r1.z, r1.z, cb0[13].z
        mul_sat r1.w, r1.w, cb0[15].y
        mul r1.z, r1.w, r1.z
        max r1.z, r1.z, l(0.010000)
        mul r3.xyz, r1.zzzz, r2.xyzx
        div r3.xyz, r3.xyzx, r0.yyyy
        div r1.z, r0.x, r1.z
        add r5.xyz, r4.xyzx, -cb0[19].xyzx
        add r6.xyz, r4.xyzx, -cb0[21].xyzx
        add r7.xyz, r4.xyzx, -cb0[23].xyzx
        add r8.xyz, r4.xyzx, -cb0[25].xyzx
        add r9.xyz, r4.xyzx, -cb0[27].xyzx
        mul r10.xy, r3.xyxx, cb0[13].wwww
        mul r1.w, cb0[13].z, cb0[13].y
        div r10.z, r3.z, r1.w
        add r11.xy, r4.xyxx, cb0[14].xzxx
        mul r11.xy, r11.xyxx, cb0[13].wwww
        div r1.w, r4.z, r1.w
        frc r2.w, r1.y
        mad r1.z, r2.w, cb0[41].x, r1.z
        add r4.w, r4.z, cb0[13].x
        mul r12.xyz, r4.yyyy, cb0[36].xywx
        mad r12.xyz, cb0[35].xywx, r4.xxxx, r12.xyzx
        mad r12.xyz, cb0[37].xywx, r4.wwww, r12.xyzx
        add r12.xyz, r12.xyzx, cb0[38].xywx
        div r11.zw, r12.xxxy, r12.zzzz
        mad r11.zw, r11.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        mad r1.y, r1.y, cb0[40].y, l(1.000000)
        mul r1.y, r0.x, r1.y
        mul r12.xyz, r2.xyzx, r1.yyyy
        div r12.xyz, r12.xyzx, r0.yyyy
        add r12.xyz, r4.xywx, r12.xyzx
        mul r13.xyz, r12.yyyy, cb0[36].xywx
        mad r13.xyz, cb0[35].xywx, r12.xxxx, r13.xyzx
        mad r13.xyz, cb0[37].xywx, r12.zzzz, r13.xyzx
        add r13.xyz, r13.xyzx, cb0[38].xywx
        div r13.xy, r13.xyxx, r13.zzzz
        mad r13.xy, r13.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r1.y, -r1.x, cb0[39].w
        mul_sat r1.y, r1.y, l(0.0285714287)
        mul r1.y, r1.y, cb0[40].x
        div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
        ge r0.x, r0.x, r0.z
        and r0.x, r0.x, l(0x3f800000)
        add r11.zw, r11.zzzw, -r13.xxxy
        add r4.xyz, r4.xywx, -r12.xyzx
        mov r14.xyzw, l(0,0,0,0)
        mov r15.xyz, r5.xyzx
        mov r16.xyz, r6.xyzx
        mov r17.xyz, r7.xyzx
        mov r18.xyz, r8.xyzx
        mov r19.xyz, r9.xyzx
        mov r21.xy, r11.xyxx
        mov r0.z, r1.z
        mov r21.z, r1.w
        mov r20.xyzw, l(0,0,0,0)
        loop
          ge r3.w, l(1.000000), r0.z
          breakc_nz r3.w
          sample_l r22.xyzw, r21.xyxx, t1.xyzw, s0, l(0.000000)
          add r3.w, -|r21.z|, r22.w
          lt r4.w, l(0.000000), r3.w
          if_nz r4.w
            add r4.w, -r3.w, l(1.000000)
            mul r23.xyz, r4.wwww, cb0[11].xyzx
            mul r23.w, r3.w, l(0.400000)
            mul r3.w, r2.w, r0.z
            mad r13.zw, r3.wwww, r11.zzzw, r13.xxxy
            sample_l r24.xyzw, r13.zwzz, t2.xyzw, s2, l(0.000000)
            dp4 r4.w, r24.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            mad r24.xyz, r3.wwww, r4.xyzx, r12.xyzx
            add r24.xyz, r24.xyzx, -cb0[39].xyzx
            dp3 r3.w, r24.xyzx, r24.xyzx
            sqrt r3.w, r3.w
            add_sat r3.w, -r3.w, r4.w
            mul r4.w, r1.y, r20.w
            add r3.w, r3.w, l(-1.000000)
            mad r4.w, r4.w, r3.w, l(1.000000)
            mad r3.w, cb0[40].z, r3.w, l(1.000000)
            mul r23.xyzw, r3.wwww, r23.xyzw
            dp3 r3.w, r15.xyzx, r15.xyzx
            div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
            dp3 r5.w, r16.xyzx, r16.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            dp3 r6.w, r17.xyzx, r17.xyzx
            div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
            dp3 r7.w, r18.xyzx, r18.xyzx
            div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
            dp3 r8.w, r19.xyzx, r19.xyzx
            div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
            mul r24.xyz, r7.wwww, cb0[26].xyzx
            mad r24.xyz, cb0[28].xyzx, r8.wwww, r24.xyzx
            mad r24.xyz, cb0[24].xyzx, r6.wwww, r24.xyzx
            mad r24.xyz, cb0[22].xyzx, r5.wwww, r24.xyzx
            mad r24.xyz, cb0[20].xyzx, r3.wwww, r24.xyzx
            mul r24.xyz, r23.wwww, r24.xyzx
            mad r22.xyz, r22.xyzx, r4.wwww, r24.xyzx
            mul r22.xyz, r23.wwww, r22.xyzx
            mul r23.xyz, r22.xyzx, r23.xyzx
            add r3.w, -r20.w, l(1.000000)
            mad r22.xyzw, r23.xyzw, r3.wwww, r20.xyzw
            lt r3.w, l(0.990000), r22.w
            if_nz r3.w
              mov r14.xyzw, r23.xyzw
              mov r20.xyzw, r22.xyzw
              break
            endif
            mov r14.xyzw, r23.xyzw
            mov r20.xyzw, r22.xyzw
          endif
          add r15.xyz, r3.xyzx, r15.xyzx
          add r16.xyz, r3.xyzx, r16.xyzx
          add r17.xyz, r3.xyzx, r17.xyzx
          add r18.xyz, r3.xyzx, r18.xyzx
          add r19.xyz, r3.xyzx, r19.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r21.xyz, r10.xyzx, r21.xyzx
        endloop
        lt r1.y, r20.w, l(0.990000)
        and r1.y, r1.y, l(0x3f800000)
        add r1.z, -r20.w, l(1.000000)
        mul r0.x, r0.z, r0.x
        mul r0.z, r1.z, r1.y
        mul r0.x, r0.x, r0.z
        mad r3.xyzw, r14.xyzw, r0.xxxx, r20.xyzw
        div r0.xyz, r2.xyzx, r0.yyyy
        dp3 r0.x, r0.xyzx, cb0[30].xyzx
        mul r0.x, r0.x, cb0[33].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r3.w, r0.x
        add r1.yzw, -r3.xxyz, cb0[31].xxyz
        mad r3.xyz, r0.xxxx, r1.yzwy, r3.xyzx
        mul r2.xyzw, r3.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r1.xyzw, r0.xxxx, r2.xyzw
        mul o0.xyzw, r0.wwww, r1.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used