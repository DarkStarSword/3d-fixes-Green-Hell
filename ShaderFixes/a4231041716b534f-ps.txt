// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a4231041716b534f-ps.txt
// 3DMigoto: a4231041716b534f |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 158 3 11
//   undeciphered1a: 25
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_VOID_SPHERE" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT5" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 656
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 400 [_FogPointLightPosition2] 3
//   Vector 416 [_FogPointLightColor2] 3
//   Vector 432 [_FogPointLightPosition3] 3
//   Vector 448 [_FogPointLightColor3] 3
//   Vector 464 [_FogPointLightPosition4] 3
//   Vector 480 [_FogPointLightColor4] 3
//   Vector 496 [_FogPointLightPosition5] 3
//   Vector 512 [_FogPointLightColor5] 3
//   Vector 528 [_SunPosition] 3
//   Vector 544 [_SunDir] 3
//   Vector 560 [_SunColor] 3
//   Vector 576 [_FogScatteringData]
//   Vector 592 [_FogScatteringData2]
//   Float 608 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_MainTex] 2D 0
//   SetTexture 3 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:51:13 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[39], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 27
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r25.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a4231041716b534f-ps.txt

mul r25.w, -r25.x, r25.y
mad r26.xyz, -r25.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r26.y
mov r1.xz, r26.xxzx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.y, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.yywy
and r2.y, r2.z, r2.y
lt r2.z, r1.y, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.y, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xwzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.xyzx, r0.wwww
  dp3 r1.w, r3.xyzx, r2.yzwy
  dp3 r2.y, r2.yzwy, r2.yzwy
  add r2.y, r2.y, -cb0[20].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.z, r2.y, l(0.000000)
  sqrt r2.w, r2.y
  movc r2.y, r2.z, r2.w, r2.y
  add r2.z, -r1.w, -r2.y
  max r2.z, r2.z, l(0.000000)
  min r2.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r2.w, r1.w
  add r1.w, -r2.z, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r1.xyz, r3.xyzx, r2.zzzz, r1.xyzx
    mul r4.xyz, r0.xyzx, r1.wwww
    div r4.xyz, r4.xyzx, r0.wwww
    add r4.xyz, r1.xyzx, r4.xyzx
    add r4.xyz, -r4.xyzx, cb0[17].xyzx
    dp3 r2.y, r4.xyzx, r4.xyzx
    sqrt r2.y, r2.y
    mad r2.y, r2.y, cb0[18].x, l(-1.000000)
    mad_sat r2.y, cb0[18].w, r2.y, l(1.000000)
    lt r3.w, l(0.000000), r2.y
    if_nz r3.w
      log r3.w, r1.w
      mul r3.w, r3.w, l(0.693147182)
      max r3.w, r3.w, l(0.000000)
      mad r3.w, r3.w, cb0[15].x, l(0.100000)
      mul r3.w, r3.w, cb0[13].z
      mul_sat r4.x, r2.w, cb0[15].y
      mul r3.w, r3.w, r4.x
      add r2.z, -r2.z, r2.w
      max r2.w, r3.w, l(0.010000)
      mul r0.xyz, r0.xyzx, r2.wwww
      div r0.xyz, r0.xyzx, r0.wwww
      div r0.w, r1.w, r2.w
      add r4.xyz, r1.xyzx, -cb0[21].xyzx
      add r5.xyz, r1.xyzx, -cb0[23].xyzx
      add r6.xyz, r1.xyzx, -cb0[25].xyzx
      add r7.xyz, r1.xyzx, -cb0[27].xyzx
      add r8.xyz, r1.xyzx, -cb0[29].xyzx
      add r9.xyz, r1.xyzx, -cb0[31].xyzx
      mul r10.xz, r0.xxzx, cb0[13].wwww
      mul r2.w, cb0[13].z, cb0[13].y
      div r10.y, r0.y, r2.w
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r2.w
      add r11.xy, cb0[14].xzxx, cb0[19].xzxx
      add r11.zw, cb0[14].xxxz, r26.xxxz
      frc r2.w, r2.x
      mad r0.w, r2.w, cb0[38].x, r0.w
      ge r1.w, r1.w, r2.z
      and r1.w, r1.w, l(0x3f800000)
      mov r12.xyzw, l(0,0,0,0)
      mov r13.xyz, r4.xyzx
      mov r14.xyz, r5.xyzx
      mov r15.xyz, r6.xyzx
      mov r16.xyz, r7.xyzx
      mov r17.xyz, r8.xyzx
      mov r18.xyz, r9.xyzx
      mov r2.z, r0.w
      mov r20.xyz, r1.xyzx
      mov r19.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r2.z
        breakc_nz r2.w
        mad r21.xy, r11.xyxx, cb0[13].wwww, -r20.xzxx
        mul r21.xy, r21.xyxx, cb0[20].xxxx
        dp2 r2.w, r21.xyxx, r21.xyxx
        sample_l r21.xyzw, r20.xzxx, t1.xyzw, s1, l(0.000000)
        mad r2.w, r2.w, cb0[20].w, |r20.y|
        add r2.w, -r2.w, r21.w
        mad r22.xy, r11.zwzz, cb0[13].wwww, -r20.xzxx
        dp2 r3.w, r22.xyxx, r22.xyxx
        add r3.w, -r3.w, cb0[12].x
        max r3.w, r3.w, l(0.000000)
        mad r2.w, -r3.w, cb0[12].y, r2.w
        lt r3.w, l(0.000000), r2.w
        if_nz r3.w
          add r3.w, -r2.w, l(1.000000)
          mul r22.xyz, r3.wwww, cb0[11].xyzx
          mul r23.w, r2.w, l(0.400000)
          dp3 r2.w, r13.xyzx, r13.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          dp3 r3.w, r14.xyzx, r14.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          dp3 r4.w, r15.xyzx, r15.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r16.xyzx, r16.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r6.w, r17.xyzx, r17.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r18.xyzx, r18.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          mul r24.xyz, r6.wwww, cb0[30].xyzx
          mad r24.xyz, cb0[32].xyzx, r7.wwww, r24.xyzx
          mad r24.xyz, cb0[28].xyzx, r5.wwww, r24.xyzx
          mad r24.xyz, cb0[26].xyzx, r4.wwww, r24.xyzx
          mad r24.xyz, cb0[24].xyzx, r3.wwww, r24.xyzx
          mad r24.xyz, cb0[22].xyzx, r2.wwww, r24.xyzx
          mad r21.xyz, r24.xyzx, r23.wwww, r21.xyzx
          mul r21.xyz, r23.wwww, r21.xyzx
          mul r23.xyz, r21.xyzx, r22.xyzx
          add r2.w, -r19.w, l(1.000000)
          mad r21.xyzw, r23.xyzw, r2.wwww, r19.xyzw
          lt r2.w, l(0.990000), r21.w
          if_nz r2.w
            mov r12.xyzw, r23.xyzw
            mov r19.xyzw, r21.xyzw
            break
          endif
          mov r12.xyzw, r23.xyzw
          mov r19.xyzw, r21.xyzw
        endif
        add r13.xyz, r0.xyzx, r13.xyzx
        add r14.xyz, r0.xyzx, r14.xyzx
        add r15.xyz, r0.xyzx, r15.xyzx
        add r16.xyz, r0.xyzx, r16.xyzx
        add r17.xyz, r0.xyzx, r17.xyzx
        add r18.xyz, r0.xyzx, r18.xyzx
        add r2.z, r2.z, l(-1.000000)
        add r20.xyz, r10.xyzx, r20.xyzx
      endloop
      lt r0.x, r19.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r19.w, l(1.000000)
      mul r0.z, r1.w, r2.z
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.z, r0.x
      mad r0.xyzw, r12.xyzw, r0.xxxx, r19.xyzw
      dp3 r1.x, r3.xyzx, cb0[34].xyzx
      mul r1.x, r1.x, cb0[37].w
      max r1.x, r1.x, l(0.000000)
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r0.w, r1.x
      add r1.yzw, -r0.xxyz, cb0[35].xxyz
      mad r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
      mul r0.xyzw, r0.xyzw, cb0[10].wwww
      mul r0.xyzw, r2.yyyy, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.xyzw, r1.xxxx
sample r4.xyzw, v1.xyxx, t2.xyzw, s0
sample r5.xyzw, v1.zwzz, t3.xyzw, s3
add r0.xyz, -r4.xyzx, r5.xyzx
mad r0.xyz, r3.wwww, r0.xyzx, r4.xyzx
mad_sat r0.w, -r0.w, r1.x, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, r3.xyzx
lt r0.w, cb0[2].y, l(0.000000)
add r1.x, -cb0[33].y, l(1.000000)
movc r0.w, r0.w, r1.x, cb0[33].y
add r1.x, -v1.x, cb0[33].x
add r1.y, r0.w, -v1.y
mad r0.w, r2.x, cb0[37].z, l(1.000000)
mul r0.w, r0.w, cb0[36].x
mov r2.xyz, l(0,0,0,0)
mov r1.zw, v1.xxxy
mov r2.w, cb0[37].x
mov r3.x, cb0[36].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r1.zw, r1.xxxy, r0.wwww, r1.zzzw
  sample_l r4.xyzw, r1.zwzz, t2.xyzw, s0, l(0.000000)
  mul r4.xyz, r2.wwww, r4.xyzx
  mad r2.xyz, r4.xyzx, cb0[36].wwww, r2.xyzx
  mul r2.w, r2.w, cb0[37].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r2.xyzx, cb0[36].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used