// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed feb3c14d590c6840-ps.txt
// 3DMigoto: feb3c14d590c6840 |    Unity headers extracted from Custom_CharacterBodypainting
//    Shader "Custom/CharacterBodypainting" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="TransparentCutout" }
//        Pass 2/5 {
//          Name "FORWARD"
//          Tags { "IsEmissive"="true" "LIGHTMODE"="FORWARDADD" "QUEUE"="Geometry+0" "RenderType"="TransparentCutout" "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Custom_CharacterBodypainting:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 147 12 2
//   undeciphered1a: 10
//   Keywords { "DIRECTIONAL_COOKIE" "_BODYPAINTINGNORMAL_ON" "_MASKB_ON" "_MASKG_ON" "_MASKR_ON" }
//   undeciphered2: 1 8 4 8 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 400
//   Vector 32 [_LightColor0]
//   Vector 128 [_NormalRG_ST]
//   Float 144 [_NormalIntensity]
//   Float 148 [_DetailNormalUV0UV1]
//   Float 152 [_DetailNormalTiling]
//   Float 156 [_DetailNormalIntensity]
//   Float 160 [_BodypaintingNormalBias]
//   Vector 176 [_PaintingMasksRGB_ST]
//   Vector 192 [_PaintingDetailMasksRGB_ST]
//   Float 208 [_BodypaintingNormalIntensity]
//   Vector 224 [_Color]
//   Vector 240 [_Albedo_ST]
//   Vector 256 [_ColorR]
//   Vector 272 [_ColorG]
//   Vector 288 [_ColorB]
//   Float 336 [_BodypaintingSmoothness]
//   Float 340 [_SmoothnessIntensity]
//   Float 344 [_NoiseCut]
//   Float 348 [_NoiseUVTiling]
//   Matrix 64 [unity_WorldToLight]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_NormalRG] 2D 2
//   SetTexture 1 [_DetailNormalRG] 2D 3
//   SetTexture 2 [_PaintingMasksRGB] 2D 4
//   SetTexture 3 [_PaintingDetailMasksRGB] 2D 5
//   SetTexture 4 [_Albedo] 2D 6
//   SetTexture 5 [_Cutout] 2D 7
//   SetTexture 6 [_LightTexture0] 2D 1
//   SetTexture 7 [unity_ProbeVolumeSH] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityProbeVolume" 3
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:35:15 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyz         3     NONE   float   xyz
// TEXCOORD                 3   xyz         4     NONE   float   xyz
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 5   xy          6     NONE   float
// TEXCOORD                 6   xyzw        7     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[22], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 12
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r10.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed feb3c14d590c6840-ps.txt

mul r10.w, -r10.x, r10.y
mad r11.xyz, -r10.wwww, cb10[0].xyzw, cb1[4].xyzw

add r0.xyz, -v5.xyzx, r11.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r0.xyzx
mad r2.xy, v1.xyxx, cb0[8].xyxx, cb0[8].zwzz
sample r2.xyzw, r2.xyxx, t0.xyzw, s2
add r3.xy, r2.xyxx, r2.xyxx
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r3.z, r1.w
add r2.xyz, r3.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r2.xyz, cb0[9].xxxx, r2.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r3.xy, v1.xyxx, cb0[9].zzzz
mad r3.zw, v1.zzzw, cb0[9].zzzz, -r3.xxxy
mad r3.xy, cb0[9].yyyy, r3.zwzz, r3.xyxx
sample r3.xyzw, r3.xyxx, t1.xyzw, s3
add r4.xy, r3.xyxx, r3.xyxx
mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r3.xyxx, r3.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r4.z, r1.w
add r3.xyz, r4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r3.xyz, cb0[9].wwww, r3.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
add r4.xy, r2.xyxx, r3.xyxx
mul r4.z, r2.z, r3.z
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r4.xyzx
mad r3.xy, v1.zwzz, cb0[11].xyxx, cb0[11].zwzz
mov r4.y, cb0[10].x
mov r4.x, l(0)
add r5.xyzw, r3.xyxy, r4.yxxy
sample r6.xyzw, r5.xyxx, t2.xyzw, s4
sample r3.xyzw, r3.xyxx, t2.xyzw, s4
sample r5.xyzw, r5.zwzz, t2.xyzw, s4
mad r4.zw, v1.xxxy, cb0[12].xxxy, cb0[12].zzzw
sample r7.xyzw, r4.zwzz, t3.xyzw, s5
add r4.xyzw, r4.yxxy, r4.zwzw
sample r8.xyzw, r4.xyxx, t3.xyzw, s5
sample r4.xyzw, r4.zwzz, t3.yzxw, s5
mov r9.x, r6.x
mov r9.y, r3.x
mov r9.z, r5.x
mov r4.x, r8.x
mov r4.y, r7.x
mul r8.xyz, r4.xyzx, r9.xyzx
mov r9.x, r6.y
mov r9.y, r3.y
mov r9.z, r5.y
mul r6.xyw, r4.xyxz, r9.xyxz
max_sat r6.xyw, r6.xyxw, r8.xyxz
mov r5.x, r6.z
mov r5.y, r3.z
mul r4.xyz, r4.xyzx, r5.xyzx
max r4.xyz, r4.xyzx, r6.xywx
min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r4.xy, -r4.yyyy, r4.xzxx
mad r2.xy, -r4.xyxx, cb0[13].xxxx, r2.xyxx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
mad r4.xy, v1.xyxx, cb0[15].xyxx, cb0[15].zwzz
sample r4.xyzw, r4.xyxx, t4.xyzw, s6
mul r5.xyz, r4.xyzx, cb0[14].xyzx
mul r6.xyz, r3.xyzx, r7.xyzx
mul r1.w, r6.x, cb0[16].w
mad r7.xyz, -cb0[14].xyzx, r4.xyzx, cb0[16].xyzx
mul r7.xyz, r1.wwww, r7.xyzx
mad r3.xyw, r3.xxxx, r7.xyxz, r5.xyxz
mul r1.w, r6.y, cb0[17].w
mad r7.xyz, -cb0[14].xyzx, r4.xyzx, cb0[17].xyzx
mad r7.xyz, r1.wwww, r7.xyzx, r5.xyzx
add r7.xyz, -r3.xywx, r7.xyzx
mad r3.xyw, r9.yyyy, r7.xyxz, r3.xyxw
mul r1.w, r6.z, cb0[18].w
mad r4.xyz, -cb0[14].xyzx, r4.xyzx, cb0[18].xyzx
mad r4.xyz, r1.wwww, r4.xyzx, r5.xyzx
add r4.xyz, -r3.xywx, r4.xyzx
mad r3.xyz, r3.zzzz, r4.xyzx, r3.xywx
max_sat r1.w, r6.y, r6.x
max r1.w, r6.z, r1.w
min r1.w, r1.w, l(1.000000)
add r2.w, -r4.w, l(1.000000)
mul r1.w, r1.w, r2.w
mad r1.w, cb0[21].x, r1.w, r4.w
mul r4.xy, v1.xyxx, cb0[21].wwww
sample r4.xyzw, r4.xyxx, t5.xyzw, s7
add r2.w, -r4.x, cb0[21].z
lt r2.w, r2.w, l(0.000000)
discard_nz r2.w
mul r4.yz, v5.yyyy, cb0[5].xxyx
mad r4.yz, cb0[4].xxyx, v5.xxxx, r4.yyzy
mad r4.yz, cb0[6].xxyx, v5.zzzz, r4.yyzy
add r4.yz, r4.yyzy, cb0[7].xxyx
eq r2.w, cb3[0].x, l(1.000000)
if_nz r2.w
  eq r2.w, cb3[0].y, l(1.000000)
  mul r5.xyz, v5.yyyy, cb3[2].xyzx
  mad r5.xyz, cb3[1].xyzx, v5.xxxx, r5.xyzx
  mad r5.xyz, cb3[3].xyzx, v5.zzzz, r5.xyzx
  add r5.xyz, r5.xyzx, cb3[4].xyzx
  movc r5.xyz, r2.wwww, r5.xyzx, v5.xyzx
  add r5.xyz, r5.xyzx, -cb3[6].xyzx
  mul r5.yzw, r5.xxyz, cb3[5].xxyz
  mad r2.w, r5.y, l(0.250000), l(0.750000)
  mad r3.w, cb3[0].z, l(0.500000), l(0.750000)
  max r5.x, r2.w, r3.w
  sample r5.xyzw, r5.xzwx, t7.xyzw, s0
else
  mov r5.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r2.w, r5.xyzw, cb2[46].xyzw
sample r5.xyzw, r4.yzyy, t6.xyzw, s1
mul r2.w, r2.w, r5.w
dp3 r5.x, v2.xyzx, r2.xyzx
dp3 r5.y, v3.xyzx, r2.xyzx
dp3 r5.z, v4.xyzx, r2.xyzx
dp3 r2.x, r5.xyzx, r5.xyzx
rsq r2.x, r2.x
mul r2.xyz, r2.xxxx, r5.xyzx
mul r4.yzw, r2.wwww, cb0[2].xxyz
mul r3.xyz, r3.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r1.w, -cb0[21].y, r1.w, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r2.xyzx, r1.xyzx
dp3_sat r1.x, r2.xyzx, cb2[0].xyzx
dp3_sat r1.y, r2.xyzx, r0.xyzx
dp3_sat r0.x, cb2[0].xyzx, r0.xyzx
mul r0.y, r0.x, r0.x
dp2 r0.y, r0.yyyy, r1.wwww
add r0.y, r0.y, l(-0.500000)
add r0.z, -r1.x, l(1.000000)
mul r1.z, r0.z, r0.z
mul r1.z, r1.z, r1.z
mul r0.z, r0.z, r1.z
mad r0.z, r0.y, r0.z, l(1.000000)
add r1.z, -|r0.w|, l(1.000000)
mul r2.x, r1.z, r1.z
mul r2.x, r2.x, r2.x
mul r1.z, r1.z, r2.x
mad r0.y, r0.y, r1.z, l(1.000000)
mul r0.y, r0.y, r0.z
mul r0.z, r1.w, r1.w
max r0.z, r0.z, l(0.002000)
add r1.z, -r0.z, l(1.000000)
mad r1.w, |r0.w|, r1.z, r0.z
mad r1.z, r1.x, r1.z, r0.z
mul r0.w, |r0.w|, r1.z
mad r0.w, r1.x, r1.w, r0.w
add r0.w, r0.w, l(0.000010)
div r0.w, l(0.500000), r0.w
mul r0.z, r0.z, r0.z
mad r1.z, r1.y, r0.z, -r1.y
mad r1.y, r1.z, r1.y, l(1.000000)
mul r0.z, r0.z, l(0.318309873)
mad r1.y, r1.y, r1.y, l(1.000000012E-007)
div r0.z, r0.z, r1.y
mul r0.z, r0.z, r0.w
mul r0.z, r0.z, l(3.14159274)
mul r0.yz, r1.xxxx, r0.yyzy
max r0.z, r0.z, l(0.000000)
mul r1.xyz, r0.yyyy, r4.yzwy
mul r0.yzw, r4.yyzw, r0.zzzz
add r0.x, -r0.x, l(1.000000)
mul r1.w, r0.x, r0.x
mul r1.w, r1.w, r1.w
mul r0.x, r0.x, r1.w
mad r0.x, r0.x, l(0.960000), l(0.040000)
mul r0.xyz, r0.xxxx, r0.yzwy
mad o0.xyz, r3.xyzx, r1.xyzx, r0.xyzx
mov o0.w, r4.x
ret
// Approximately 0 instruction slots used