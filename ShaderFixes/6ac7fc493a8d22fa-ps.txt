// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 6ac7fc493a8d22fa-ps.txt
// 3DMigoto: 6ac7fc493a8d22fa |    Unity headers extracted from Amplify_mia_disappear_hair
//    Shader "Amplify/mia_disappear_hair" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="Transparent" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry+0" "RenderType"="Transparent" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_mia_disappear_hair:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 225 5 6
//   undeciphered1a: 16
//   Keywords { "DIRECTIONAL" "INSTANCING_ON" "_USE_ALBO_HAIR_ANISTROPY_ON" "_USE_ANISTROPY_HAIR_OPACITY_MASK_ON" "_USE_SPECULAR_HAIR_ANISTROPY_ON" }
//   undeciphered2: 1 7 8 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 144
//   Vector 32 [_LightColor0]
//   Vector 64 [_Normal_ST]
//   Vector 96 [_Albedo_ST]
//   Float 116 [_Cutoff]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "UnityDrawCallInfo" 16
//   ScalarInt 0 [unity_BaseInstanceID]
//   ConstBuffer "UnityInstancing_PerDraw0" 256
//   Struct 0 [unity_Builtins0Array] 2 128
//   Matrix 0 [unity_ObjectToWorldArray]
//   Matrix 64 [unity_WorldToObjectArray]
//   ConstBuffer "UnityInstancing_Amplifymia_disappear_hair" 256
//   Struct 0 [Amplifymia_disappear_hairArray] 2 128
//   Vector 0 [_Albedo_color_multiply]
//   Vector 16 [_AlbedoTint]
//   Vector 32 [_AdditionalTint]
//   Vector 48 [_emmisive]
//   Vector 64 [_SpecularTint]
//   Float 80 [_main_normal_scale]
//   Float 84 [_detail_normal_scale]
//   Float 88 [_detail_tiling]
//   Float 92 [_anistropyX]
//   Float 96 [_anistropyy]
//   Float 100 [_specularintensity]
//   Float 104 [_smooothnes]
//   Float 108 [_disappear_mask_multiply]
//   Float 112 [_disolve_texture_tile]
//   Float 116 [_disappear_mask_size]
//   SetTexture 0 [_Normal] 2D 2
//   SetTexture 1 [_Normal_detail] 2D 3
//   SetTexture 2 [_Albedo] 2D 4
//   SetTexture 3 [_dissolveguide] 2D 5
//   SetTexture 4 [unity_SpecCube0] CUBE 0
//   SetTexture 5 [unity_SpecCube1] CUBE -1
//   SetTexture 6 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityReflectionProbes" 3
//   BindCB "UnityProbeVolume" 4
//   BindCB "UnityDrawCallInfo" 5
//   BindCB "UnityInstancing_PerDraw0" 6
//   BindCB "UnityInstancing_Amplifymia_disappear_hair" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:17:07 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   x
// TEXCOORD                 4   xyzw        6     NONE   float   xy w
// TEXCOORD                 7   xyzw        7     NONE   float
// TEXCOORD                 8   xyzw        8     NONE   float
// SV_InstanceID            0   x           9     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 9.000000, 0, 0, 0},
                              { 3.000000, 0, 0, 0},
                              { 11.000000, 0, 0, 0},
                              { 13.000000, 0, 0, 0},
                              { 5.000000, 0, 0, 0},
                              { 15.000000, 0, 0, 0},
                              { 7.000000, 0, 0, 0},
                              { 4.000000, 0, 0, 0},
                              { 12.000000, 0, 0, 0},
                              { 2.000000, 0, 0, 0},
                              { 10.000000, 0, 0, 0},
                              { 16.000000, 0, 0, 0},
                              { 8.000000, 0, 0, 0},
                              { 14.000000, 0, 0, 0},
                              { 6.000000, 0, 0, 0} }
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[8], immediateIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_constantbuffer cb5[1], immediateIndexed
dcl_constantbuffer cb6[16], dynamicIndexed
dcl_constantbuffer cb7[16], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_resource_texture3d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.x
dcl_input_ps linear v6.xyw
dcl_input_ps constant v9.x
dcl_output o0.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 6ac7fc493a8d22fa-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

iadd r0.x, v9.x, cb5[0].x
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r0.yzw, -r1.xxyz, r17.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r2.xyz, r0.yzwy, r1.wwww
ishl r0.x, r0.x, l(3)
mad r3.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
mul r3.zw, v1.xxxy, cb7[r0.x + 5].zzzz
sample r4.xyzw, r3.xyxx, t0.xyzw, s2
mul r4.x, r4.w, r4.x
mad r3.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r4.xy, r3.xyxx, cb7[r0.x + 5].xxxx
dp2 r2.w, r4.xyxx, r4.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r2.w, r2.w
sample r4.xyzw, r3.zwzz, t1.xyzw, s3
mul r4.x, r4.w, r4.x
mad r3.zw, r4.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r3.zw, r3.zzzw, cb7[r0.x + 5].yyyy
dp2 r4.x, r3.zwzz, r3.zwzz
min r4.x, r4.x, l(1.000000)
add r4.x, -r4.x, l(1.000000)
sqrt r4.x, r4.x
mad r3.xy, r3.xyxx, cb7[r0.x + 5].xxxx, r3.zwzz
mul r3.z, r2.w, r4.x
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
mad r4.xy, v1.xyxx, cb0[6].xyxx, cb0[6].zwzz
sample r4.xyzw, r4.xyxx, t2.xyzw, s4
mul r5.xyz, r4.xxxx, cb7[r0.x + 1].xyzx
mad r6.xyz, r4.xxxx, cb7[r0.x + 2].xyzx, -r5.xyzx
mad r5.xyz, r4.yyyy, r6.xyzx, r5.xyzx
dp3 r2.w, cb2[0].xyzx, cb2[0].xyzx
max r2.w, r2.w, l(0.001000)
rsq r2.w, r2.w
mul r6.xyz, r2.wwww, cb2[0].xyzx
mad r7.xyz, cb2[0].xyzx, r2.wwww, r2.xyzx
dp3 r2.w, r7.xyzx, r7.xyzx
rsq r2.w, r2.w
mul r7.xyz, r2.wwww, r7.xyzx
dp3 r8.x, v2.xyzx, r3.xyzx
dp3 r8.y, v3.xyzx, r3.xyzx
dp3 r8.z, v4.xyzx, r3.xyzx
dp3 r2.w, r8.xyzx, r8.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r8.xyzx
mov r8.y, v4.x
mov r8.z, v2.x
mov r8.x, v3.x
mul r9.xyz, r3.zxyz, r8.xyzx
mad r8.xyz, r3.yzxy, r8.yzxy, -r9.xyzx
dp3 r2.w, r8.xyzx, r8.xyzx
rsq r2.w, r2.w
mul r8.xyz, r2.wwww, r8.xyzx
dp3 r2.w, r7.xyzx, r8.xyzx
div r3.w, r2.w, cb7[r0.x + 5].w
div r2.w, r2.w, cb7[r0.x + 6].x
dp3 r5.w, r3.xyzx, r7.xyzx
dp3 r6.x, r3.xyzx, r6.xyzx
mul r6.yzw, r4.zzzz, cb7[r0.x + 4].xxyz
mul r2.w, r2.w, r2.w
mad r2.w, r3.w, r3.w, r2.w
add r3.w, r5.w, l(1.000000)
div r2.w, r2.w, r3.w
mul r2.w, r2.w, l(-2.885390)
exp r2.w, r2.w
max r3.w, r6.x, l(0.000000)
mul r2.w, r2.w, r3.w
mul r6.xyz, r2.wwww, r6.yzwy
mul r6.xyz, r6.xyzx, v5.xxxx
mul r7.xyz, r6.xyzx, cb7[r0.x + 6].yyyy
mul r8.xyz, v3.wwww, cb6[r0.x + 5].xyzx
mad r8.xyz, cb6[r0.x + 4].xyzx, v2.wwww, r8.xyzx
mad r8.xyz, cb6[r0.x + 6].xyzx, v4.wwww, r8.xyzx
add r8.xyz, r8.xyzx, cb6[r0.x + 7].xyzx
mul r2.w, r8.y, cb6[r0.x + 1].y
mad r2.w, cb6[r0.x + 0].y, r8.x, r2.w
mad r2.w, cb6[r0.x + 2].y, r8.z, r2.w
mul r8.xy, v1.xyxx, cb7[r0.x + 7].xxxx
sample r8.xyzw, r8.xyxx, t3.xyzw, s5
mad r2.w, r8.x, cb7[r0.x + 7].y, r2.w
ge r2.w, r2.w, cb7[r0.x + 6].w
movc r2.w, r2.w, l(0), l(1.000000)
div r8.xy, v6.xyxx, v6.wwww
mul r8.xy, r8.xyxx, cb1[6].xyxx
mul r8.xy, r8.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
ge r8.zw, r8.xxxy, -r8.xxxy
frc r8.xy, |r8.xyxx|
movc r8.xy, r8.zwzz, r8.xyxx, -r8.xyxx
mul r8.xy, r8.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
ftoi r8.xy, r8.xyxx
ishl r3.w, r8.y, l(2)
iadd r3.w, r8.x, r3.w
mul r3.w, l(0.062500), icb[r3.w + 0].x
mul r2.w, r2.w, r4.w
ge r3.w, r2.w, r3.w
and r4.w, r3.w, l(0x3f800000)
movc r3.w, r3.w, l(0), l(1.000000)
mad r2.w, r2.w, r3.w, r4.w
add r2.w, r2.w, -cb0[7].y
lt r2.w, r2.w, l(0.000000)
discard_nz r2.w
eq r2.w, cb4[0].x, l(1.000000)
if_nz r2.w
  eq r2.w, cb4[0].y, l(1.000000)
  mul r8.xyz, v3.wwww, cb4[2].xyzx
  mad r8.xyz, cb4[1].xyzx, v2.wwww, r8.xyzx
  mad r8.xyz, cb4[3].xyzx, v4.wwww, r8.xyzx
  add r8.xyz, r8.xyzx, cb4[4].xyzx
  movc r8.xyz, r2.wwww, r8.xyzx, r1.xyzx
  add r8.xyz, r8.xyzx, -cb4[6].xyzx
  mul r8.yzw, r8.xxyz, cb4[5].xxyz
  mad r2.w, r8.y, l(0.250000), l(0.750000)
  mad r3.w, cb4[0].z, l(0.500000), l(0.750000)
  max r8.x, r2.w, r3.w
  sample r8.xyzw, r8.xzwx, t6.xyzw, s1
else
  mov r8.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r2.w, r8.xyzw, cb2[46].xyzw
add r3.w, l(1.000000), -cb7[r0.x + 6].z
dp3 r4.w, -r2.xyzx, r3.xyzx
add r4.w, r4.w, r4.w
mad r8.xyz, r3.xyzx, -r4.wwww, -r2.xyzx
mul r9.xyz, r2.wwww, cb0[2].xyzx
lt r2.w, l(0.000000), cb3[2].w
if_nz r2.w
  dp3 r2.w, r8.xyzx, r8.xyzx
  rsq r2.w, r2.w
  mul r10.xyz, r2.wwww, r8.xyzx
  add r11.xyz, -r1.xyzx, cb3[0].xyzx
  div r11.xyz, r11.xyzx, r10.xyzx
  add r12.xyz, -r1.xyzx, cb3[1].xyzx
  div r12.xyz, r12.xyzx, r10.xyzx
  lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
  movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
  min r2.w, r11.y, r11.x
  min r2.w, r11.z, r2.w
  add r11.xyz, r1.xyzx, -cb3[2].xyzx
  mad r10.xyz, r10.xyzx, r2.wwww, r11.xyzx
else
  mov r10.xyz, r8.xyzx
endif
mad r2.w, -r3.w, l(0.700000), l(1.700000)
mul r2.w, r2.w, r3.w
mul r2.w, r2.w, l(6.000000)
sample_l r10.xyzw, r10.xyzx, t4.xyzw, s0, r2.w
add r4.w, r10.w, l(-1.000000)
mad r4.w, cb3[3].w, r4.w, l(1.000000)
log r4.w, r4.w
mul r4.w, r4.w, cb3[3].y
exp r4.w, r4.w
mul r4.w, r4.w, cb3[3].x
mul r11.xyz, r10.xyzx, r4.wwww
lt r5.w, cb3[1].w, l(0.999990)
if_nz r5.w
  lt r5.w, l(0.000000), cb3[6].w
  if_nz r5.w
    dp3 r5.w, r8.xyzx, r8.xyzx
    rsq r5.w, r5.w
    mul r12.xyz, r5.wwww, r8.xyzx
    add r13.xyz, -r1.xyzx, cb3[4].xyzx
    div r13.xyz, r13.xyzx, r12.xyzx
    add r14.xyz, -r1.xyzx, cb3[5].xyzx
    div r14.xyz, r14.xyzx, r12.xyzx
    lt r15.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
    movc r13.xyz, r15.xyzx, r13.xyzx, r14.xyzx
    min r5.w, r13.y, r13.x
    min r5.w, r13.z, r5.w
    add r1.xyz, r1.xyzx, -cb3[6].xyzx
    mad r8.xyz, r12.xyzx, r5.wwww, r1.xyzx
  endif
  sample_l r8.xyzw, r8.xyzx, t5.xyzw, s0, r2.w
  add r1.x, r8.w, l(-1.000000)
  mad r1.x, cb3[7].w, r1.x, l(1.000000)
  log r1.x, r1.x
  mul r1.x, r1.x, cb3[7].y
  exp r1.x, r1.x
  mul r1.x, r1.x, cb3[7].x
  mul r1.xyz, r8.xyzx, r1.xxxx
  mad r8.xyz, r4.wwww, r10.xyzx, -r1.xyzx
  mad r11.xyz, cb3[1].wwww, r8.xyzx, r1.xyzx
endif
max r1.x, r7.y, r7.x
max r1.x, r7.z, r1.x
add r1.x, -r1.x, l(1.000000)
mul r5.xyz, r1.xxxx, r5.xyzx
mad r0.yzw, r0.yyzw, r1.wwww, cb2[0].xxyz
dp3 r1.y, r0.yzwy, r0.yzwy
max r1.y, r1.y, l(0.001000)
rsq r1.y, r1.y
mul r0.yzw, r0.yyzw, r1.yyyy
dp3 r1.y, r3.xyzx, r2.xyzx
dp3_sat r1.z, r3.xyzx, cb2[0].xyzx
dp3_sat r1.w, r3.xyzx, r0.yzwy
dp3_sat r0.y, cb2[0].xyzx, r0.yzwy
mul r0.z, r0.y, r0.y
dp2 r0.z, r0.zzzz, r3.wwww
add r0.z, r0.z, l(-0.500000)
add r0.w, -r1.z, l(1.000000)
mul r2.x, r0.w, r0.w
mul r2.x, r2.x, r2.x
mul r0.w, r0.w, r2.x
mad r0.w, r0.z, r0.w, l(1.000000)
add r2.x, -|r1.y|, l(1.000000)
mul r2.y, r2.x, r2.x
mul r2.y, r2.y, r2.y
mul r2.x, r2.x, r2.y
mad r0.z, r0.z, r2.x, l(1.000000)
mul r0.z, r0.z, r0.w
mul r0.z, r1.z, r0.z
mul r0.w, r3.w, r3.w
max r0.w, r0.w, l(0.002000)
add r2.y, -r0.w, l(1.000000)
mad r2.z, |r1.y|, r2.y, r0.w
mad r2.y, r1.z, r2.y, r0.w
mul r1.y, |r1.y|, r2.y
mad r1.y, r1.z, r2.z, r1.y
add r1.y, r1.y, l(0.000010)
div r1.y, l(0.500000), r1.y
mul r2.y, r0.w, r0.w
mad r2.z, r1.w, r2.y, -r1.w
mad r1.w, r2.z, r1.w, l(1.000000)
mul r2.y, r2.y, l(0.318309873)
mad r1.w, r1.w, r1.w, l(1.000000012E-007)
div r1.w, r2.y, r1.w
mul r1.y, r1.w, r1.y
mul r1.y, r1.y, l(3.14159274)
mul r1.y, r1.z, r1.y
max r1.y, r1.y, l(0.000000)
mad r0.w, r0.w, r0.w, l(1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
dp3 r1.z, r7.xyzx, r7.xyzx
ne r1.z, r1.z, l(0.000000)
and r1.z, r1.z, l(0x3f800000)
mul r1.y, r1.z, r1.y
add r1.x, -r1.x, l(1.000000)
add_sat r1.x, r1.x, cb7[r0.x + 6].z
mul r2.yzw, r0.zzzz, r9.xxyz
mul r1.yzw, r9.xxyz, r1.yyyy
add r0.y, -r0.y, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.y, r0.z
mad r3.xyz, -r6.xyzx, cb7[r0.x + 6].yyyy, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r3.xyz, r3.xyzx, r0.yyyy, r7.xyzx
mul r1.yzw, r1.yyzw, r3.xxyz
mad r1.yzw, r5.xxyz, r2.yyzw, r1.yyzw
mul r0.yzw, r11.xxyz, r0.wwww
mad r2.yzw, -r6.xxyz, cb7[r0.x + 6].yyyy, r1.xxxx
mad r2.xyz, r2.xxxx, r2.yzwy, r7.xyzx
mad r0.yzw, r0.yyzw, r2.xxyz, r1.yyzw
mad o0.xyz, r4.xyzx, cb7[r0.x + 3].xyzx, r0.yzwy
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used