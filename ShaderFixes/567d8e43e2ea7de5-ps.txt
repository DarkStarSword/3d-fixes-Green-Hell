// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 567d8e43e2ea7de5-ps.txt
// 3DMigoto: 567d8e43e2ea7de5 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 185 2 13
//   undeciphered1a: 19
//   Keywords { "FOG_VOID_BOX" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 368 [_SunPosition] 3
//   Vector 384 [_SunDir] 3
//   Vector 400 [_SunColor] 3
//   Vector 416 [_FogScatteringData]
//   Vector 432 [_FogScatteringData2]
//   Vector 528 [_VolumetricFogSunWorldPos]
//   Vector 544 [_VolumetricFogSunShadowsData]
//   Float 560 [_Jitter]
//   Matrix 464 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 3
//   SetTexture 3 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:04:47 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 21
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r19.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 567d8e43e2ea7de5-ps.txt

mul r19.w, -r19.x, r19.y
mad r20.xyz, -r19.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.z, r0.y, r20.z
mov r1.xy, r20.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.z, l(0.000010)
mul r0.yw, v1.xxxy, cb1[6].xxxy
dp2 r0.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.ywyy
frc r0.y, r0.y
add r0.y, r0.y, l(-0.500000)
lt r0.w, cb0[13].y, r1.z
lt r1.w, cb0[13].y, r0.x
and r0.w, r0.w, r1.w
lt r1.w, r1.z, r0.z
lt r3.x, r0.x, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.z, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xywx
  dp3 r0.w, r2.xyzx, r2.xyzx
  sqrt r0.w, r0.w
  dp2 r1.w, r2.xyxx, r2.xyxx
  sqrt r1.w, r1.w
  div r3.xy, r2.xyxx, r1.wwww
  div r1.w, r1.w, r2.z
  max r2.w, r0.z, r1.z
  min r4.z, r2.w, cb0[13].y
  add r2.w, r1.z, -r4.z
  mul r2.w, r1.w, r2.w
  mad r4.xy, -r3.xyxx, r2.wwww, r20.xyxx
  min r2.w, r0.w, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xyzx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.y, r1.x, r2.w
  if_nz r1.y
    lt r1.y, l(0.000000), r1.w
    lt r3.z, l(-0.500000), r0.x
    and r1.y, r1.y, r3.z
    lt r3.z, r1.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r3.z
    and r0.x, r0.z, r0.x
    movc r5.z, r1.y, cb0[13].y, r0.x
    add r0.x, -r1.z, r5.z
    mul r0.x, r0.x, r1.w
    mad r5.xy, -r3.xyxx, r0.xxxx, r20.xyxx
    add r1.yzw, r4.xxyz, -r5.xxyz
    dp3 r0.x, r1.yzwy, r1.yzwy
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r2.w
    min r0.x, r0.z, r0.x
    lt r1.y, l(0.000000), r0.x
    if_nz r1.y
      mul r1.yzw, r2.xxyz, r0.xxxx
      div r1.yzw, r1.yyzw, r0.wwww
      add r1.yzw, r1.yyzw, r4.xxyz
      add r1.yzw, -r1.yyzw, cb0[17].xxyz
      mul r1.yzw, |r1.yyzw|, cb0[18].xxyz
      max r1.y, r1.z, r1.y
      max r1.y, r1.w, r1.y
      add r1.y, r1.y, l(-1.000000)
      mad_sat r1.y, cb0[18].w, r1.y, l(1.000000)
      lt r1.z, l(0.000000), r1.y
      if_nz r1.z
        log r1.z, r0.x
        mul r1.z, r1.z, l(0.693147182)
        max r1.z, r1.z, l(0.000000)
        mad r1.z, r1.z, cb0[15].x, l(0.100000)
        mul r1.z, r1.z, cb0[13].z
        mul_sat r1.w, r2.w, cb0[15].y
        mul r1.z, r1.w, r1.z
        max r1.z, r1.z, l(0.010000)
        mul r3.xyz, r1.zzzz, r2.xyzx
        div r3.xyz, r3.xyzx, r0.wwww
        div r1.z, r0.x, r1.z
        add r5.xyz, r4.xyzx, -cb0[19].xyzx
        add r6.xyz, r4.xyzx, -cb0[21].xyzx
        mul r7.xy, r3.xyxx, cb0[13].wwww
        mul r1.w, cb0[13].z, cb0[13].y
        div r7.z, r3.z, r1.w
        add r8.xy, r4.xyxx, cb0[14].xzxx
        mul r8.xy, r8.xyxx, cb0[13].wwww
        div r1.w, r4.z, r1.w
        frc r2.w, r0.y
        mad r1.z, r2.w, cb0[35].x, r1.z
        add r4.w, r4.z, cb0[13].x
        mul r9.xyz, r4.yyyy, cb0[30].xywx
        mad r9.xyz, cb0[29].xywx, r4.xxxx, r9.xyzx
        mad r9.xyz, cb0[31].xywx, r4.wwww, r9.xyzx
        add r9.xyz, r9.xyzx, cb0[32].xywx
        div r8.zw, r9.xxxy, r9.zzzz
        mad r8.zw, r8.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        mad r2.w, r0.y, cb0[34].y, l(1.000000)
        mul r2.w, r0.x, r2.w
        mul r9.xyz, r2.xyzx, r2.wwww
        div r9.xyz, r9.xyzx, r0.wwww
        add r9.xyz, r4.xywx, r9.xyzx
        mul r10.xyz, r9.yyyy, cb0[30].xywx
        mad r10.xyz, cb0[29].xywx, r9.xxxx, r10.xyzx
        mad r10.xyz, cb0[31].xywx, r9.zzzz, r10.xyzx
        add r10.xyz, r10.xyzx, cb0[32].xywx
        div r10.xy, r10.xyxx, r10.zzzz
        mad r10.xy, r10.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r2.w, -r1.x, cb0[33].w
        mul_sat r2.w, r2.w, l(0.0285714287)
        mul r2.w, r2.w, cb0[34].x
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
        ge r0.x, r0.x, r0.z
        and r0.x, r0.x, l(0x3f800000)
        add r8.zw, r8.zzzw, -r10.xxxy
        add r4.xyz, r4.xywx, -r9.xyzx
        mov r11.xyzw, l(0,0,0,0)
        mov r12.xyz, r5.xyzx
        mov r13.xyz, r6.xyzx
        mov r15.xy, r8.xyxx
        mov r0.z, r1.z
        mov r15.z, r1.w
        mov r14.xyzw, l(0,0,0,0)
        loop
          ge r4.w, l(1.000000), r0.z
          breakc_nz r4.w
          sample_l r16.xyzw, r15.xyxx, t1.xyzw, s1, l(0.000000)
          add r4.w, -|r15.z|, r16.w
          lt r5.w, l(0.000000), r4.w
          if_nz r5.w
            add r5.w, -r4.w, l(1.000000)
            mul r17.xyz, r5.wwww, cb0[11].xyzx
            mul r17.w, r4.w, l(0.400000)
            mul r4.w, r3.w, r0.z
            mad r10.zw, r4.wwww, r8.zzzw, r10.xxxy
            sample_l r18.xyzw, r10.zwzz, t2.xyzw, s3, l(0.000000)
            dp4 r5.w, r18.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            mad r18.xyz, r4.wwww, r4.xyzx, r9.xyzx
            add r18.xyz, r18.xyzx, -cb0[33].xyzx
            dp3 r4.w, r18.xyzx, r18.xyzx
            sqrt r4.w, r4.w
            add_sat r4.w, -r4.w, r5.w
            mul r5.w, r2.w, r14.w
            add r4.w, r4.w, l(-1.000000)
            mad r5.w, r5.w, r4.w, l(1.000000)
            mad r4.w, cb0[34].z, r4.w, l(1.000000)
            mul r17.xyzw, r4.wwww, r17.xyzw
            dp3 r4.w, r12.xyzx, r12.xyzx
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            dp3 r6.w, r13.xyzx, r13.xyzx
            div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
            mul r18.xyz, r4.wwww, cb0[20].xyzx
            mad r18.xyz, cb0[22].xyzx, r6.wwww, r18.xyzx
            mul r18.xyz, r17.wwww, r18.xyzx
            mad r16.xyz, r16.xyzx, r5.wwww, r18.xyzx
            mul r16.xyz, r17.wwww, r16.xyzx
            mul r17.xyz, r16.xyzx, r17.xyzx
            add r4.w, -r14.w, l(1.000000)
            mad r16.xyzw, r17.xyzw, r4.wwww, r14.xyzw
            lt r4.w, l(0.990000), r16.w
            if_nz r4.w
              mov r11.xyzw, r17.xyzw
              mov r14.xyzw, r16.xyzw
              break
            endif
            mov r11.xyzw, r17.xyzw
            mov r14.xyzw, r16.xyzw
          endif
          add r12.xyz, r3.xyzx, r12.xyzx
          add r13.xyz, r3.xyzx, r13.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r15.xyz, r7.xyzx, r15.xyzx
        endloop
        lt r1.z, r14.w, l(0.990000)
        and r1.z, r1.z, l(0x3f800000)
        add r1.w, -r14.w, l(1.000000)
        mul r0.x, r0.z, r0.x
        mul r0.z, r1.w, r1.z
        mul r0.x, r0.x, r0.z
        mad r3.xyzw, r11.xyzw, r0.xxxx, r14.xyzw
        div r0.xzw, r2.xxyz, r0.wwww
        dp3 r0.x, r0.xzwx, cb0[24].xyzx
        mul r0.x, r0.x, cb0[27].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r3.w, r0.x
        add r2.xyz, -r3.xyzx, cb0[25].xyzx
        mad r3.xyz, r0.xxxx, r2.xyzx, r3.xyzx
        mul r2.xyzw, r3.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r2.xyzw, r0.xxxx, r2.xyzw
        mul r1.xyzw, r1.yyyy, r2.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.y, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad r0.xzw, r3.xxyz, r0.xxxx, r2.xxyz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[23].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[23].y
add r2.x, -v1.x, cb0[23].x
add r2.y, r1.x, -v1.y
mad r0.y, r0.y, cb0[27].z, l(1.000000)
mul r0.y, r0.y, cb0[26].x
mov r1.xyz, l(0,0,0,0)
mov r3.xy, v1.xyxx
mov r1.w, cb0[27].x
mov r2.z, cb0[26].y
loop
  ge r3.z, l(0.000000), r2.z
  breakc_nz r3.z
  mad r3.xy, r2.xyxx, r0.yyyy, r3.xyxx
  sample_l r4.xyzw, r3.xyxx, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[26].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[27].y
  add r2.z, r2.z, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[26].zzzz, r0.xzwx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used