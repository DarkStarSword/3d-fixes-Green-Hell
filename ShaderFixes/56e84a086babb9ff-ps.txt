// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 56e84a086babb9ff-ps.txt
// 3DMigoto: 56e84a086babb9ff |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 118 3 11
//   undeciphered1a: 11
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_VOID_SPHERE" "FOG_HAZE_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 400
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogSkyColor]
//   Float 352 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:05:01 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[23], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r11.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 56e84a086babb9ff-ps.txt

mul r11.w, -r11.x, r11.y
mad r12.xyz, -r11.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r12.y
mov r1.xz, r12.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  add r4.xyz, r1.xyzx, -cb0[19].xyzx
  div r5.xyz, r3.xyzx, r0.wwww
  dp3 r1.w, r5.xyzx, r4.xyzx
  dp3 r2.y, r4.xyzx, r4.xyzx
  add r2.y, r2.y, -cb0[20].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.w, r2.y, l(0.000000)
  sqrt r3.w, r2.y
  movc r2.y, r2.w, r3.w, r2.y
  add r2.w, -r1.w, -r2.y
  max r2.w, r2.w, l(0.000000)
  min r3.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r3.w, r1.w
  add r1.w, -r2.w, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r1.xyz, r5.xyzx, r2.wwww, r1.xyzx
    mul r4.xyz, r3.xyzx, r1.wwww
    div r4.xyz, r4.xyzx, r0.wwww
    add r4.xyz, r1.xyzx, r4.xyzx
    add r4.xyz, -r4.xyzx, cb0[17].xyzx
    dp3 r2.y, r4.xyzx, r4.xyzx
    sqrt r2.y, r2.y
    mad r2.y, r2.y, cb0[18].x, l(-1.000000)
    mad_sat r2.y, cb0[18].w, r2.y, l(1.000000)
    lt r4.x, l(0.000000), r2.y
    if_nz r4.x
      log r4.x, r1.w
      mul r4.x, r4.x, l(0.693147182)
      max r4.x, r4.x, l(0.000000)
      mad r4.x, r4.x, cb0[15].x, l(0.100000)
      mul r4.x, r4.x, cb0[13].z
      mul_sat r4.y, r3.w, cb0[15].y
      mul r4.x, r4.y, r4.x
      add r2.w, -r2.w, r3.w
      max r3.w, r4.x, l(0.010000)
      mul r3.xyz, r3.wwww, r3.xyzx
      div r3.xyz, r3.xyzx, r0.wwww
      div r0.w, r1.w, r3.w
      mul r4.xz, r3.xxzx, cb0[13].wwww
      mul r3.x, cb0[13].z, cb0[13].y
      div r4.y, r3.y, r3.x
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r3.x
      add r3.xy, cb0[14].xzxx, cb0[19].xzxx
      add r3.zw, cb0[14].xxxz, r12.xxxz
      frc r4.w, r0.z
      mad r0.w, r4.w, cb0[22].x, r0.w
      ge r1.w, r1.w, r2.w
      and r1.w, r1.w, l(0x3f800000)
      mov r5.xyzw, l(0,0,0,0)
      mov r2.w, r0.w
      mov r7.xyz, r1.xyzx
      mov r6.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r2.w
        breakc_nz r4.w
        mad r8.xy, r3.xyxx, cb0[13].wwww, -r7.xzxx
        mul r8.xy, r8.xyxx, cb0[20].xxxx
        dp2 r4.w, r8.xyxx, r8.xyxx
        sample_l r8.xyzw, r7.xzxx, t1.xyzw, s1, l(0.000000)
        mad r4.w, r4.w, cb0[20].w, |r7.y|
        add r4.w, -r4.w, r8.w
        mad r9.xy, r3.zwzz, cb0[13].wwww, -r7.xzxx
        dp2 r7.w, r9.xyxx, r9.xyxx
        add r7.w, -r7.w, cb0[12].x
        max r7.w, r7.w, l(0.000000)
        mad r4.w, -r7.w, cb0[12].y, r4.w
        lt r7.w, l(0.000000), r4.w
        if_nz r7.w
          add r7.w, -r4.w, l(1.000000)
          mul r9.xyz, r7.wwww, cb0[11].xyzx
          mul r10.w, r4.w, l(0.400000)
          mul r8.xyz, r8.xyzx, r10.wwww
          mul r10.xyz, r8.xyzx, r9.xyzx
          add r4.w, -r6.w, l(1.000000)
          mad r8.xyzw, r10.xyzw, r4.wwww, r6.xyzw
          lt r4.w, l(0.990000), r8.w
          if_nz r4.w
            mov r5.xyzw, r10.xyzw
            mov r6.xyzw, r8.xyzw
            break
          endif
          mov r5.xyzw, r10.xyzw
          mov r6.xyzw, r8.xyzw
        endif
        add r2.w, r2.w, l(-1.000000)
        add r7.xyz, r4.xyzx, r7.xyzx
      endloop
      lt r0.w, r6.w, l(0.990000)
      and r0.w, r0.w, l(0x3f800000)
      add r1.x, -r6.w, l(1.000000)
      mul r1.y, r1.w, r2.w
      mul r0.w, r0.w, r1.x
      mul r0.w, r1.y, r0.w
      mad r1.xyzw, r5.xyzw, r0.wwww, r6.xyzw
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r2.yyyy, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r0.z, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.zzzz, r1.xyzw
sample r4.xyzw, v1.xyxx, t2.xyzw, s0
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r1.xy, r0.xxxx, r2.xzxx
  mad r1.xy, r1.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r2.xyzw, r1.xyxx, t1.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r2.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[21].w
  add r1.xyz, -r4.xyzx, cb0[21].xyzx
  mad r4.xyz, r0.xxxx, r1.xyzx, r4.xyzx
endif
mad_sat r0.x, -r1.w, r0.z, l(1.000000)
mad o0.xyz, r4.xyzx, r0.xxxx, r3.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used