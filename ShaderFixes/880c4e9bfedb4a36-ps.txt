// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 880c4e9bfedb4a36-ps.txt
// 3DMigoto: 880c4e9bfedb4a36 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 135 4 14
//   undeciphered1a: 22
//   Keywords { "FOG_OF_WAR_ON" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT4" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 288 [_FogOfWarSize] 3
//   Vector 304 [_FogOfWarCenterAdjusted] 3
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_FogPointLightPosition2] 3
//   Vector 400 [_FogPointLightColor2] 3
//   Vector 416 [_FogPointLightPosition3] 3
//   Vector 432 [_FogPointLightColor3] 3
//   Vector 448 [_FogPointLightPosition4] 3
//   Vector 464 [_FogPointLightColor4] 3
//   Vector 496 [_SunDir] 3
//   Vector 512 [_SunColor] 3
//   Vector 544 [_FogScatteringData2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:34:25 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 24
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r22.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 880c4e9bfedb4a36-ps.txt

mul r22.w, -r22.x, r22.y
mad r23.xyz, -r22.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.z, r0.y, r23.z
mov r1.xy, r23.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.z, l(0.000010)
lt r0.w, cb0[13].y, r1.z
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.z, r0.z
lt r3.x, r0.y, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xw, r2.xxxy, cb0[18].xxxy
    add r0.xw, r0.xxxw, -cb0[19].xxxy
    sample r3.xyzw, r0.xwxx, t2.wxyz, s3
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.z, l(0.000010)
    add r2.xyz, -r1.xyzx, r2.xywx
    dp3 r0.x, r2.xyzx, r2.xyzx
    dp2 r0.w, r2.xyxx, r2.xyxx
    sqrt r0.xw, r0.xxxw
    div r3.yz, r2.xxyx, r0.wwww
    div r0.w, r0.w, r2.z
    max r1.w, r0.z, r1.z
    min r4.z, r1.w, cb0[13].y
    add r1.w, r1.z, -r4.z
    mul r1.w, r0.w, r1.w
    mad r4.xy, -r3.yzyy, r1.wwww, r23.xyxx
    min r1.w, r0.x, cb0[12].z
    add r5.xyz, -r1.xyzx, r4.xyzx
    dp3 r1.x, r5.xyzx, r5.xyzx
    sqrt r1.x, r1.x
    lt r1.y, r1.x, r1.w
    if_nz r1.y
      lt r1.y, l(0.000000), r0.w
      lt r2.w, l(-0.500000), r0.y
      and r1.y, r1.y, r2.w
      lt r2.w, r0.w, l(0.000000)
      lt r0.y, r0.y, l(0.500000)
      and r0.y, r0.y, r2.w
      and r0.y, r0.z, r0.y
      movc r5.z, r1.y, cb0[13].y, r0.y
      add r0.y, -r1.z, r5.z
      mul r0.y, r0.y, r0.w
      mad r5.xy, -r3.yzyy, r0.yyyy, r23.xyxx
      add r0.yzw, r4.xxyz, -r5.xxyz
      dp3 r0.y, r0.yzwy, r0.yzwy
      sqrt r0.y, r0.y
      add r0.z, -r1.x, r1.w
      min r0.y, r0.z, r0.y
      lt r0.w, l(0.000000), r0.y
      if_nz r0.w
        log r0.w, r0.y
        mul r0.w, r0.w, l(0.693147182)
        max r0.w, r0.w, l(0.000000)
        mad r0.w, r0.w, cb0[15].x, l(0.100000)
        mul r0.w, r0.w, cb0[13].z
        mul_sat r1.y, r1.w, cb0[15].y
        mul r0.w, r0.w, r1.y
        max r0.w, r0.w, l(0.010000)
        mul r1.yzw, r0.wwww, r2.xxyz
        div r1.yzw, r1.yyzw, r0.xxxx
        div r0.w, r0.y, r0.w
        add r3.yzw, r4.xxyz, -cb0[20].xxyz
        add r5.xyz, r4.xyzx, -cb0[22].xyzx
        add r6.xyz, r4.xyzx, -cb0[24].xyzx
        add r7.xyz, r4.xyzx, -cb0[26].xyzx
        add r8.xyz, r4.xyzx, -cb0[28].xyzx
        mul r9.xy, r1.yzyy, cb0[13].wwww
        mul r2.w, cb0[13].z, cb0[13].y
        div r9.z, r1.w, r2.w
        add r4.xy, r4.xyxx, cb0[14].xzxx
        mul r4.xy, r4.xyxx, cb0[13].wwww
        div r2.w, r4.z, r2.w
        ge r0.y, r0.y, r0.z
        mov r10.xyzw, l(0,0,0,0)
        mov r11.xyz, r3.yzwy
        mov r12.xyz, r5.xyzx
        mov r13.xyz, r6.xyzx
        mov r14.xyz, r7.xyzx
        mov r15.xyz, r8.xyzx
        mov r17.xy, r4.xyxx
        mov r0.z, r0.w
        mov r17.z, r2.w
        mov r16.xyzw, l(0,0,0,0)
        loop
          ge r4.z, l(1.000000), r0.z
          breakc_nz r4.z
          sample_l r18.xyzw, r17.xyxx, t3.xyzw, s0, l(0.000000)
          add r4.z, -|r17.z|, r18.w
          lt r4.w, l(0.000000), r4.z
          if_nz r4.w
            add r4.w, -r4.z, l(1.000000)
            mul r19.xyz, r4.wwww, cb0[11].xyzx
            mul r20.w, r4.z, l(0.400000)
            dp3 r4.z, r11.xyzx, r11.xyzx
            div r4.z, l(1.000000, 1.000000, 1.000000, 1.000000), r4.z
            dp3 r4.w, r12.xyzx, r12.xyzx
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            dp3 r5.w, r13.xyzx, r13.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            dp3 r6.w, r14.xyzx, r14.xyzx
            div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
            dp3 r7.w, r15.xyzx, r15.xyzx
            div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
            mul r21.xyz, r6.wwww, cb0[27].xyzx
            mad r21.xyz, cb0[29].xyzx, r7.wwww, r21.xyzx
            mad r21.xyz, cb0[25].xyzx, r5.wwww, r21.xyzx
            mad r21.xyz, cb0[23].xyzx, r4.wwww, r21.xyzx
            mad r21.xyz, cb0[21].xyzx, r4.zzzz, r21.xyzx
            mad r18.xyz, r21.xyzx, r20.wwww, r18.xyzx
            mul r18.xyz, r20.wwww, r18.xyzx
            mul r20.xyz, r18.xyzx, r19.xyzx
            add r4.z, -r16.w, l(1.000000)
            mad r18.xyzw, r20.xyzw, r4.zzzz, r16.xyzw
            lt r4.z, l(0.990000), r18.w
            if_nz r4.z
              mov r10.xyzw, r20.xyzw
              mov r16.xyzw, r18.xyzw
              break
            endif
            mov r10.xyzw, r20.xyzw
            mov r16.xyzw, r18.xyzw
          endif
          add r11.xyz, r1.yzwy, r11.xyzx
          add r12.xyz, r1.yzwy, r12.xyzx
          add r13.xyz, r1.yzwy, r13.xyzx
          add r14.xyz, r1.yzwy, r14.xyzx
          add r15.xyz, r1.yzwy, r15.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r17.xyz, r9.xyzx, r17.xyzx
        endloop
        lt r0.w, r16.w, l(0.990000)
        and r0.yw, r0.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
        add r1.y, -r16.w, l(1.000000)
        mul r0.y, r0.z, r0.y
        mul r0.z, r0.w, r1.y
        mul r0.y, r0.y, r0.z
        mad r4.xyzw, r10.xyzw, r0.yyyy, r16.xyzw
        div r0.xyz, r2.xyzx, r0.xxxx
        dp3 r0.x, r0.xyzx, cb0[31].xyzx
        mul r0.x, r0.x, cb0[34].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r4.w, r0.x
        add r0.yzw, -r4.xxyz, cb0[32].xxyz
        mad r4.xyz, r0.xxxx, r0.yzwy, r4.xyzx
        mul r0.xyzw, r4.xyzw, cb0[10].wwww
        add r1.x, -r1.x, cb0[12].z
        div_sat r1.x, r1.x, cb0[12].w
        mul r1.x, r1.x, r1.x
        mul r0.xyzw, r0.xyzw, r1.xxxx
        mul o0.xyzw, r3.xxxx, r0.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used