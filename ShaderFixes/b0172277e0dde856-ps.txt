// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b0172277e0dde856-ps.txt
// 3DMigoto: b0172277e0dde856 |    Unity headers extracted from DynamicFog_Image Effect_Fog And Sky
//    Shader "DynamicFog/Image Effect/Fog And Sky" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Image Effect_Fog And Sky:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 52 5 8
//   undeciphered1a: 4
//   Keywords { "FOG_OF_WAR_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 304
//   Float 80 [_FogAlpha]
//   Vector 96 [_FogOfWarSize] 3
//   Vector 112 [_FogOfWarCenterAdjusted] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogHeightData]
//   Vector 224 [_FogNoiseData]
//   Vector 240 [_FogSkyData]
//   Float 256 [_FogSpeed]
//   Vector 272 [_FogColor]
//   Vector 288 [_FogColor2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CameraDepthTexture] 2D 1
//   SetTexture 2 [_NoiseTex] 2D 3
//   SetTexture 3 [_FogOfWar] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:58:13 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[19], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 6
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r4.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b0172277e0dde856-ps.txt

mul r4.w, -r4.x, r4.y
mad r5.xyz, -r4.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s0
sample r1.xyzw, v1.zwzz, t1.xyzw, s1
mad r1.x, cb1[7].x, r1.x, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
lt r1.y, l(0.999000), r1.x
if_nz r1.y
  mad r1.yzw, v2.xxyz, r1.xxxx, r5.xxyz
  add r1.z, |r1.z|, l(2.000000)
  div r1.yw, r1.yyyw, r1.zzzz
  mul r2.x, cb0[15].y, cb1[0].x
  mad r1.yw, r1.yyyw, l(0.000000, 0.010000, 0.000000, 0.010000), r2.xxxx
  sample r2.xyzw, r1.ywyy, t2.xyzw, s3
  div_sat r1.y, r1.z, cb0[13].x
  add r3.xyzw, -cb0[17].xyzw, cb0[18].xyzw
  mad r3.xyzw, r1.yyyy, r3.xyzw, cb0[17].xyzw
  div r1.y, cb0[15].x, r1.z
  mad r1.z, -r2.y, cb0[15].z, l(1.000000)
  mul_sat r1.y, r1.z, r1.y
  mul r1.y, r1.y, cb0[15].w
  add r2.xyzw, -r0.xyzw, r3.xyzw
  mad o0.xyzw, r1.yyyy, r2.xyzw, r0.xyzw
else
  lt r1.y, r1.x, cb0[12].z
  if_nz r1.y
    mad r1.yzw, v2.xxyz, r1.xxxx, r5.xxyz
    add r2.x, cb0[13].y, l(0.000010)
    add r1.z, r1.z, -r2.x
    lt r2.x, cb0[13].z, r1.z
    add r2.y, cb0[13].x, cb0[14].y
    lt r2.y, r1.z, r2.y
    and r2.x, r2.y, r2.x
    if_nz r2.x
      div r2.xy, r1.ywyy, cb0[6].xzxx
      add r2.xy, r2.xyxx, -cb0[7].xzxx
      sample r2.xyzw, r2.xyxx, t3.xyzw, s2
      lt r2.x, l(0.000000), r2.w
      if_nz r2.x
        mul r1.yw, r1.yyyw, cb0[14].xxxy
        mul r2.x, cb0[16].x, cb1[0].y
        mad r1.yw, r1.yyyw, l(0.000000, 0.100000, 0.000000, 0.100000), r2.xxxx
        sample r3.xyzw, r1.ywyy, t2.xyzw, s3
        mul r1.y, r1.x, cb0[14].z
        div r1.y, r3.y, r1.y
        mad r1.z, -r3.y, cb0[14].y, r1.z
        add r1.w, r1.x, -cb0[12].x
        add r1.x, -r1.x, cb0[12].z
        div r1.xw, r1.xxxw, cb0[12].wwwy
        min r1.x, r1.x, r1.w
        mad r1.w, r3.y, cb0[14].y, cb0[13].x
        add r2.x, -r1.z, r1.w
        mul r2.y, r1.w, cb0[13].w
        div r2.x, r2.x, r2.y
        min_sat r1.x, r1.x, r2.x
        mad r1.y, -r1.y, cb0[14].x, l(1.000000)
        mul_sat r1.y, r1.y, cb0[5].x
        mul r1.x, r1.y, r1.x
        mul r1.x, r2.w, r1.x
        div_sat r1.y, r1.z, r1.w
        add r2.xyzw, -cb0[17].xyzw, cb0[18].xyzw
        mad r2.xyzw, r1.yyyy, r2.xyzw, cb0[17].xyzw
        add r2.xyzw, -r0.xyzw, r2.xyzw
        mad o0.xyzw, r1.xxxx, r2.xyzw, r0.xyzw
      else
        mov o0.xyzw, r0.xyzw
      endif
    else
      mov o0.xyzw, r0.xyzw
    endif
  else
    mov o0.xyzw, r0.xyzw
  endif
endif
ret
// Approximately 0 instruction slots used