// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 7db06ee240faf035-ps.txt
// 3DMigoto: 7db06ee240faf035 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 152 3 9
//   undeciphered1a: 17
//   Keywords { "FOG_AREA_BOX" "FOG_HAZE_ON" "FOG_POINT_LIGHT0" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 512
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogSkyColor]
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 432 [_VolumetricFogSunWorldPos]
//   Vector 448 [_VolumetricFogSunShadowsData]
//   Float 464 [_Jitter]
//   Matrix 368 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 3
//   SetTexture 3 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:28:23 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 19
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r17.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 7db06ee240faf035-ps.txt

mul r17.w, -r17.x, r17.y
mad r18.xyz, -r17.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r18.y
mov r1.xz, r18.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  add r4.xyz, r1.xyzx, -cb0[17].xyzx
  div r5.xyz, r0.wwww, r3.xyzx
  div r6.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r7.xyz, -r4.xyzx, -r6.xyzx
  mul r7.xyz, r5.xyzx, r7.xyzx
  add r4.xyz, -r4.xyzx, r6.xyzx
  mul r4.xyz, r4.xyzx, r5.xyzx
  min r6.xyz, r7.xyzx, r4.xyzx
  max r2.yw, r6.yyyz, r6.xxxx
  max r1.w, r2.w, r2.y
  max r1.w, r1.w, l(0.000000)
  max r4.xyz, r7.xyzx, r4.xyzx
  min r2.yw, r4.yyyz, r4.xxxx
  min r2.y, r2.w, r2.y
  min r2.w, r0.w, cb0[12].z
  min r2.y, r2.w, r2.y
  add r2.y, -r1.w, r2.y
  lt r3.w, l(0.000000), r2.y
  if_nz r3.w
    div r4.xyz, r1.wwww, r5.xyzx
    add r4.xyz, r1.xyzx, r4.xyzx
    div r1.xy, cb0[18].xzxx, cb0[13].wwww
    log r1.z, r2.y
    mul r1.z, r1.z, l(0.693147182)
    max r1.z, r1.z, l(0.000000)
    mad r1.z, r1.z, cb0[15].x, l(0.100000)
    mul r1.z, r1.z, cb0[13].z
    mul_sat r3.w, r2.w, cb0[15].y
    mul r1.z, r1.z, r3.w
    add r2.w, -r1.w, r2.w
    max r1.z, r1.z, l(0.010000)
    mul r5.xyz, r1.zzzz, r3.xyzx
    div r5.xyz, r5.xyzx, r0.wwww
    div r1.z, r2.y, r1.z
    add r6.xyz, r4.xyzx, -cb0[20].xyzx
    mul r7.xz, r5.xxzx, cb0[13].wwww
    mul r3.w, cb0[13].z, cb0[13].y
    div r7.y, r5.y, r3.w
    add r8.xy, r4.xzxx, cb0[14].xzxx
    mul r8.xy, r8.xyxx, cb0[13].wwww
    div r3.w, r4.y, r3.w
    add r8.zw, cb0[14].xxxz, cb0[17].xxxz
    frc r5.w, r0.z
    mad r1.z, r5.w, cb0[29].x, r1.z
    add r4.w, r4.y, cb0[13].x
    mul r9.xyz, r4.wwww, cb0[24].xywx
    mad r9.xyz, cb0[23].xywx, r4.xxxx, r9.xyzx
    mad r9.xyz, cb0[25].xywx, r4.zzzz, r9.xyzx
    add r9.xyz, r9.xyzx, cb0[26].xywx
    div r9.xy, r9.xyxx, r9.zzzz
    mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r4.y, r0.z, cb0[28].y, l(1.000000)
    mul r4.y, r2.y, r4.y
    mul r3.xyz, r3.xyzx, r4.yyyy
    div r3.xyz, r3.xyzx, r0.wwww
    add r3.xyz, r3.xyzx, r4.xwzx
    mul r10.xyz, r3.yyyy, cb0[24].xywx
    mad r10.xyz, cb0[23].xywx, r3.xxxx, r10.xyzx
    mad r10.xyz, cb0[25].xywx, r3.zzzz, r10.xyzx
    add r10.xyz, r10.xyzx, cb0[26].xywx
    div r9.zw, r10.xxxy, r10.zzzz
    mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    add r0.w, -r1.w, cb0[27].w
    mul_sat r0.w, r0.w, l(0.0285714287)
    mul r0.w, r0.w, cb0[28].x
    div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
    ge r2.y, r2.y, r2.w
    and r2.y, r2.y, l(0x3f800000)
    add r9.xy, -r9.zwzz, r9.xyxx
    add r4.xyz, -r3.xyzx, r4.xwzx
    mov r10.xyzw, l(0,0,0,0)
    mov r11.xyz, r6.xyzx
    mov r13.xz, r8.xxyx
    mov r2.w, r1.z
    mov r13.y, r3.w
    mov r12.xyzw, l(0,0,0,0)
    loop
      ge r4.w, l(1.000000), r2.w
      breakc_nz r4.w
      mad r14.xy, r8.zwzz, cb0[13].wwww, -r13.xzxx
      mul r14.xy, r1.xyxx, |r14.xyxx|
      max r4.w, r14.y, r14.x
      sample_l r14.xyzw, r13.xzxx, t1.xyzw, s1, l(0.000000)
      mad r4.w, r4.w, cb0[18].w, |r13.y|
      add r4.w, -r4.w, r14.w
      lt r5.w, l(0.000000), r4.w
      if_nz r5.w
        add r5.w, -r4.w, l(1.000000)
        mul r15.xyz, r5.wwww, cb0[11].xyzx
        mul r15.w, r4.w, l(0.400000)
        mul r4.w, r1.w, r2.w
        mad r16.xy, r4.wwww, r9.xyxx, r9.zwzz
        sample_l r16.xyzw, r16.xyxx, t2.xyzw, s3, l(0.000000)
        dp4 r5.w, r16.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        mad r16.xyz, r4.wwww, r4.xyzx, r3.xyzx
        add r16.xyz, r16.xyzx, -cb0[27].xyzx
        dp3 r4.w, r16.xyzx, r16.xyzx
        sqrt r4.w, r4.w
        add_sat r4.w, -r4.w, r5.w
        mul r5.w, r0.w, r12.w
        add r4.w, r4.w, l(-1.000000)
        mad r5.w, r5.w, r4.w, l(1.000000)
        mad r4.w, cb0[28].z, r4.w, l(1.000000)
        mul r15.xyzw, r4.wwww, r15.xyzw
        dp3 r4.w, r11.xyzx, r11.xyzx
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        mul r16.xyz, r4.wwww, cb0[21].xyzx
        mul r16.xyz, r15.wwww, r16.xyzx
        mad r14.xyz, r14.xyzx, r5.wwww, r16.xyzx
        mul r14.xyz, r15.wwww, r14.xyzx
        mul r15.xyz, r14.xyzx, r15.xyzx
        add r4.w, -r12.w, l(1.000000)
        mad r14.xyzw, r15.xyzw, r4.wwww, r12.xyzw
        lt r4.w, l(0.990000), r14.w
        if_nz r4.w
          mov r10.xyzw, r15.xyzw
          mov r12.xyzw, r14.xyzw
          break
        endif
        mov r10.xyzw, r15.xyzw
        mov r12.xyzw, r14.xyzw
      endif
      add r11.xyz, r5.xyzx, r11.xyzx
      add r2.w, r2.w, l(-1.000000)
      add r13.xyz, r7.xyzx, r13.xyzx
    endloop
    lt r0.w, r12.w, l(0.990000)
    and r0.w, r0.w, l(0x3f800000)
    add r1.x, -r12.w, l(1.000000)
    mul r1.y, r2.w, r2.y
    mul r0.w, r0.w, r1.x
    mul r0.w, r1.y, r0.w
    mad r1.xyzw, r10.xyzw, r0.wwww, r12.xyzw
    mul r1.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r0.z, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.zzzz, r1.xyzw
sample r4.xyzw, v1.xyxx, t3.xyzw, s0
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r1.xy, r0.xxxx, r2.xzxx
  mad r1.xy, r1.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r2.xyzw, r1.xyxx, t1.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r2.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r1.xyz, -r4.xyzx, cb0[19].xyzx
  mad r4.xyz, r0.xxxx, r1.xyzx, r4.xyzx
endif
mad_sat r0.x, -r1.w, r0.z, l(1.000000)
mad o0.xyz, r4.xyzx, r0.xxxx, r3.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used