// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 8df14e1a25986e60-ps.txt
// 3DMigoto: 8df14e1a25986e60 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 199 3 15
//   undeciphered1a: 27
//   Keywords { "FOG_OF_WAR_ON" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT5" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 752
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 288 [_FogOfWarSize] 3
//   Vector 304 [_FogOfWarCenterAdjusted] 3
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_FogPointLightPosition2] 3
//   Vector 400 [_FogPointLightColor2] 3
//   Vector 416 [_FogPointLightPosition3] 3
//   Vector 432 [_FogPointLightColor3] 3
//   Vector 448 [_FogPointLightPosition4] 3
//   Vector 464 [_FogPointLightColor4] 3
//   Vector 480 [_FogPointLightPosition5] 3
//   Vector 496 [_FogPointLightColor5] 3
//   Vector 512 [_SunPosition] 3
//   Vector 528 [_SunDir] 3
//   Vector 544 [_SunColor] 3
//   Vector 560 [_FogScatteringData]
//   Vector 576 [_FogScatteringData2]
//   Vector 672 [_VolumetricFogSunWorldPos]
//   Vector 688 [_VolumetricFogSunShadowsData]
//   Float 704 [_Jitter]
//   Matrix 608 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_FogOfWar] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 4 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:38:00 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[45], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 29
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r27.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 8df14e1a25986e60-ps.txt

mul r27.w, -r27.x, r27.y
mad r28.xyz, -r27.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r28.y
mov r1.xz, r28.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r3.xy, v1.xyxx, cb1[6].xyxx
dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xyxx
frc r0.w, r0.w
add r0.w, r0.w, l(-0.500000)
lt r1.w, cb0[13].y, r1.y
lt r3.x, cb0[13].y, r0.y
and r1.w, r1.w, r3.x
lt r3.x, r1.y, r0.z
lt r3.y, r0.y, r0.z
and r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
if_z r1.w
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r3.xy, r2.xzxx, cb0[18].xzxx
    add r3.xy, r3.xyxx, -cb0[19].xzxx
    sample r3.xyzw, r3.xyxx, t1.wxyz, s3
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r2.xyz, -r1.xyzx, r2.xwzx
    dp3 r0.x, r2.xyzx, r2.xyzx
    sqrt r0.x, r0.x
    dp2 r1.w, r2.xzxx, r2.xzxx
    sqrt r1.w, r1.w
    div r3.yz, r2.xxzx, r1.wwww
    div r1.w, r1.w, r2.y
    max r2.w, r0.z, r1.y
    min r4.z, r2.w, cb0[13].y
    add r2.w, r1.y, -r4.z
    mul r2.w, r1.w, r2.w
    mad r4.xy, -r3.yzyy, r2.wwww, r28.xzxx
    min r2.w, r0.x, cb0[12].z
    add r5.xyz, -r1.xyzx, r4.xzyx
    dp3 r1.x, r5.xyzx, r5.xyzx
    sqrt r1.x, r1.x
    lt r1.z, r1.x, r2.w
    if_nz r1.z
      lt r1.z, l(0.000000), r1.w
      lt r3.w, l(-0.500000), r0.y
      and r1.z, r1.z, r3.w
      lt r3.w, r1.w, l(0.000000)
      lt r0.y, r0.y, l(0.500000)
      and r0.y, r0.y, r3.w
      and r0.y, r0.z, r0.y
      movc r5.y, r1.z, cb0[13].y, r0.y
      add r0.y, -r1.y, r5.y
      mul r0.y, r0.y, r1.w
      mad r5.xz, -r3.yyzy, r0.yyyy, r28.xxzx
      add r1.yzw, r4.xxzy, -r5.xxyz
      dp3 r0.y, r1.yzwy, r1.yzwy
      sqrt r0.y, r0.y
      add r0.z, -r1.x, r2.w
      min r0.y, r0.z, r0.y
      lt r1.y, l(0.000000), r0.y
      if_nz r1.y
        log r1.y, r0.y
        mul r1.y, r1.y, l(0.693147182)
        max r1.y, r1.y, l(0.000000)
        mad r1.y, r1.y, cb0[15].x, l(0.100000)
        mul r1.y, r1.y, cb0[13].z
        mul_sat r1.z, r2.w, cb0[15].y
        mul r1.y, r1.z, r1.y
        max r1.y, r1.y, l(0.010000)
        mul r3.yzw, r1.yyyy, r2.xxyz
        div r3.yzw, r3.yyzw, r0.xxxx
        div r1.y, r0.y, r1.y
        add r5.xyz, r4.xzyx, -cb0[20].xyzx
        add r6.xyz, r4.xzyx, -cb0[22].xyzx
        add r7.xyz, r4.xzyx, -cb0[24].xyzx
        add r8.xyz, r4.xzyx, -cb0[26].xyzx
        add r9.xyz, r4.xzyx, -cb0[28].xyzx
        add r10.xyz, r4.xzyx, -cb0[30].xyzx
        mul r11.xz, r3.yywy, cb0[13].wwww
        mul r1.z, cb0[13].z, cb0[13].y
        div r11.y, r3.z, r1.z
        add r12.xy, r4.xyxx, cb0[14].xzxx
        mul r12.xy, r12.xyxx, cb0[13].wwww
        div r1.z, r4.z, r1.z
        frc r1.w, r0.w
        mad r1.y, r1.w, cb0[44].x, r1.y
        add r4.w, r4.z, cb0[13].x
        mul r13.xyz, r4.wwww, cb0[39].xywx
        mad r13.xyz, cb0[38].xywx, r4.xxxx, r13.xyzx
        mad r13.xyz, cb0[40].xywx, r4.yyyy, r13.xyzx
        add r13.xyz, r13.xyzx, cb0[41].xywx
        div r12.zw, r13.xxxy, r13.zzzz
        mad r12.zw, r12.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        mad r1.w, r0.w, cb0[43].y, l(1.000000)
        mul r1.w, r0.y, r1.w
        mul r13.xyz, r2.xyzx, r1.wwww
        div r13.xyz, r13.xyzx, r0.xxxx
        add r13.xyz, r4.xwyx, r13.xyzx
        mul r14.xyz, r13.yyyy, cb0[39].xywx
        mad r14.xyz, cb0[38].xywx, r13.xxxx, r14.xyzx
        mad r14.xyz, cb0[40].xywx, r13.zzzz, r14.xyzx
        add r14.xyz, r14.xyzx, cb0[41].xywx
        div r14.xy, r14.xyxx, r14.zzzz
        mad r14.xy, r14.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r1.w, -r1.x, cb0[42].w
        mul_sat r1.w, r1.w, l(0.0285714287)
        mul r1.w, r1.w, cb0[43].x
        div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
        ge r0.y, r0.y, r0.z
        and r0.y, r0.y, l(0x3f800000)
        add r12.zw, r12.zzzw, -r14.xxxy
        add r4.xyz, r4.xwyx, -r13.xyzx
        mov r15.xyzw, l(0,0,0,0)
        mov r16.xyz, r5.xyzx
        mov r17.xyz, r6.xyzx
        mov r18.xyz, r7.xyzx
        mov r19.xyz, r8.xyzx
        mov r20.xyz, r9.xyzx
        mov r21.xyz, r10.xyzx
        mov r23.xz, r12.xxyx
        mov r0.z, r1.y
        mov r23.y, r1.z
        mov r22.xyzw, l(0,0,0,0)
        loop
          ge r4.w, l(1.000000), r0.z
          breakc_nz r4.w
          sample_l r24.xyzw, r23.xzxx, t2.xyzw, s1, l(0.000000)
          add r4.w, -|r23.y|, r24.w
          lt r5.w, l(0.000000), r4.w
          if_nz r5.w
            add r5.w, -r4.w, l(1.000000)
            mul r25.xyz, r5.wwww, cb0[11].xyzx
            mul r25.w, r4.w, l(0.400000)
            mul r4.w, r2.w, r0.z
            mad r14.zw, r4.wwww, r12.zzzw, r14.xxxy
            sample_l r26.xyzw, r14.zwzz, t3.xyzw, s4, l(0.000000)
            dp4 r5.w, r26.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            mad r26.xyz, r4.wwww, r4.xyzx, r13.xyzx
            add r26.xyz, r26.xyzx, -cb0[42].xyzx
            dp3 r4.w, r26.xyzx, r26.xyzx
            sqrt r4.w, r4.w
            add_sat r4.w, -r4.w, r5.w
            mul r5.w, r1.w, r22.w
            add r4.w, r4.w, l(-1.000000)
            mad r5.w, r5.w, r4.w, l(1.000000)
            mad r4.w, cb0[43].z, r4.w, l(1.000000)
            mul r25.xyzw, r4.wwww, r25.xyzw
            dp3 r4.w, r16.xyzx, r16.xyzx
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            dp3 r6.w, r17.xyzx, r17.xyzx
            div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
            dp3 r7.w, r18.xyzx, r18.xyzx
            div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
            dp3 r8.w, r19.xyzx, r19.xyzx
            div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
            dp3 r9.w, r20.xyzx, r20.xyzx
            div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
            dp3 r10.w, r21.xyzx, r21.xyzx
            div r10.w, l(1.000000, 1.000000, 1.000000, 1.000000), r10.w
            mul r26.xyz, r9.wwww, cb0[29].xyzx
            mad r26.xyz, cb0[31].xyzx, r10.wwww, r26.xyzx
            mad r26.xyz, cb0[27].xyzx, r8.wwww, r26.xyzx
            mad r26.xyz, cb0[25].xyzx, r7.wwww, r26.xyzx
            mad r26.xyz, cb0[23].xyzx, r6.wwww, r26.xyzx
            mad r26.xyz, cb0[21].xyzx, r4.wwww, r26.xyzx
            mul r26.xyz, r25.wwww, r26.xyzx
            mad r24.xyz, r24.xyzx, r5.wwww, r26.xyzx
            mul r24.xyz, r25.wwww, r24.xyzx
            mul r25.xyz, r24.xyzx, r25.xyzx
            add r4.w, -r22.w, l(1.000000)
            mad r24.xyzw, r25.xyzw, r4.wwww, r22.xyzw
            lt r4.w, l(0.990000), r24.w
            if_nz r4.w
              mov r15.xyzw, r25.xyzw
              mov r22.xyzw, r24.xyzw
              break
            endif
            mov r15.xyzw, r25.xyzw
            mov r22.xyzw, r24.xyzw
          endif
          add r16.xyz, r3.yzwy, r16.xyzx
          add r17.xyz, r3.yzwy, r17.xyzx
          add r18.xyz, r3.yzwy, r18.xyzx
          add r19.xyz, r3.yzwy, r19.xyzx
          add r20.xyz, r3.yzwy, r20.xyzx
          add r21.xyz, r3.yzwy, r21.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r23.xyz, r11.xyzx, r23.xyzx
        endloop
        lt r1.y, r22.w, l(0.990000)
        and r1.y, r1.y, l(0x3f800000)
        add r1.z, -r22.w, l(1.000000)
        mul r0.y, r0.z, r0.y
        mul r0.z, r1.z, r1.y
        mul r0.y, r0.y, r0.z
        mad r4.xyzw, r15.xyzw, r0.yyyy, r22.xyzw
        div r0.xyz, r2.xyzx, r0.xxxx
        dp3 r0.x, r0.xyzx, cb0[33].xyzx
        mul r0.x, r0.x, cb0[36].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r4.w, r0.x
        add r1.yzw, -r4.xxyz, cb0[34].xxyz
        mad r4.xyz, r0.xxxx, r1.yzwy, r4.xyzx
        mul r2.xyzw, r4.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r1.xyzw, r0.xxxx, r2.xyzw
        mul r1.xyzw, r3.xxxx, r1.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.w, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad r0.xyz, r3.xyzx, r0.xxxx, r2.xyzx
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[32].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[32].y
add r2.x, -v1.x, cb0[32].x
add r2.y, r1.x, -v1.y
mad r0.w, r0.w, cb0[36].z, l(1.000000)
mul r0.w, r0.w, cb0[35].x
mov r1.xyz, l(0,0,0,0)
mov r3.xy, v1.xyxx
mov r1.w, cb0[36].x
mov r2.z, cb0[35].y
loop
  ge r3.z, l(0.000000), r2.z
  breakc_nz r3.z
  mad r3.xy, r2.xyxx, r0.wwww, r3.xyxx
  sample_l r4.xyzw, r3.xyxx, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[35].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[36].y
  add r2.z, r2.z, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[35].zzzz, r0.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used