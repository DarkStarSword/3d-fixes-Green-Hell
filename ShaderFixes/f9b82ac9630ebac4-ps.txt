// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f9b82ac9630ebac4-ps.txt
// 3DMigoto: f9b82ac9630ebac4 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 103 5 12
//   undeciphered1a: 10
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_BOX" "FOG_BLUR_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 384
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Float 348 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_FogOfWar] 2D 5
//   SetTexture 3 [_NoiseTex] 2D 1
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:32:50 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[22], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 12
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r10.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f9b82ac9630ebac4-ps.txt

mul r10.w, -r10.x, r10.y
mad r11.xyz, -r10.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r11.y
mov r1.xz, r11.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r1.w
or r0.y, r0.y, r0.w
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r3.xyzw, r0.xyxx, t2.wxyz, s5
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r0.xyw, -r1.xyxz, r2.xwxz
    dp3 r1.w, r0.xywx, r0.xywx
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.yzw, r1.wwww, r0.xxyw
    div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r5.xyz, -r2.xyzx, -r4.xyzx
    mul r5.xyz, r3.yzwy, r5.xyzx
    add r2.xyz, -r2.xyzx, r4.xyzx
    mul r2.xyz, r2.xyzx, r3.yzwy
    min r4.xyz, r5.xyzx, r2.xyzx
    max r4.xy, r4.yzyy, r4.xxxx
    max r2.w, r4.y, r4.x
    max r2.w, r2.w, l(0.000000)
    max r2.xyz, r5.xyzx, r2.xyzx
    min r2.xy, r2.yzyy, r2.xxxx
    min r2.x, r2.y, r2.x
    min r2.y, r1.w, cb0[12].z
    min r2.x, r2.y, r2.x
    add r2.x, -r2.w, r2.x
    lt r2.z, l(0.000000), r2.x
    if_nz r2.z
      div r3.yzw, r2.wwww, r3.yyzw
      add r1.xyz, r1.xyzx, r3.yzwy
      div r3.yz, cb0[18].xxzx, cb0[13].wwww
      log r2.z, r2.x
      mul r2.z, r2.z, l(0.693147182)
      max r2.z, r2.z, l(0.000000)
      mad r2.z, r2.z, cb0[15].x, l(0.100000)
      mul r2.z, r2.z, cb0[13].z
      mul_sat r3.w, r2.y, cb0[15].y
      mul r2.z, r2.z, r3.w
      add r2.y, -r2.w, r2.y
      max r2.z, r2.z, l(0.010000)
      mul r0.xyw, r0.xyxw, r2.zzzz
      div r0.xyw, r0.xyxw, r1.wwww
      div r1.w, r2.x, r2.z
      mul r4.xz, r0.xxwx, cb0[13].wwww
      mul r0.x, cb0[13].z, cb0[13].y
      div r4.y, r0.y, r0.x
      add r0.yw, r1.xxxz, cb0[14].xxxz
      mul r0.yw, r0.yyyw, cb0[13].wwww
      div r0.x, r1.y, r0.x
      add r1.xy, cb0[14].xzxx, cb0[17].xzxx
      frc r1.z, r0.z
      mad r1.z, r1.z, cb0[21].w, r1.w
      ge r1.w, r2.x, r2.y
      and r1.w, r1.w, l(0x3f800000)
      mov r2.xyzw, l(0,0,0,0)
      mov r3.w, r1.z
      mov r6.xyz, r0.yxwy
      mov r5.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r3.w
        breakc_nz r4.w
        mad r7.xy, r1.xyxx, cb0[13].wwww, -r6.xzxx
        mul r7.xy, r3.yzyy, |r7.xyxx|
        max r4.w, r7.y, r7.x
        sample_l r7.xyzw, r6.xzxx, t3.xyzw, s1, l(0.000000)
        mad r4.w, r4.w, cb0[18].w, |r6.y|
        add r4.w, -r4.w, r7.w
        lt r6.w, l(0.000000), r4.w
        if_nz r6.w
          add r6.w, -r4.w, l(1.000000)
          mul r8.xyz, r6.wwww, cb0[11].xyzx
          mul r9.w, r4.w, l(0.400000)
          mul r7.xyz, r7.xyzx, r9.wwww
          mul r9.xyz, r7.xyzx, r8.xyzx
          add r4.w, -r5.w, l(1.000000)
          mad r7.xyzw, r9.xyzw, r4.wwww, r5.xyzw
          lt r4.w, l(0.990000), r7.w
          if_nz r4.w
            mov r2.xyzw, r9.xyzw
            mov r5.xyzw, r7.xyzw
            break
          endif
          mov r2.xyzw, r9.xyzw
          mov r5.xyzw, r7.xyzw
        endif
        add r3.w, r3.w, l(-1.000000)
        add r6.xyz, r4.xyzx, r6.xyzx
      endloop
      lt r0.x, r5.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r5.w, l(1.000000)
      mul r0.w, r1.w, r3.w
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.w, r0.x
      mad r1.xyzw, r2.xyzw, r0.xxxx, r5.xyzw
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.z, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
sample r4.xyzw, v1.zwzz, t5.xyzw, s4
add r0.yzw, -r3.xxyz, r4.xxyz
mad r0.yzw, r2.wwww, r0.yyzw, r3.xxyz
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r0.yzwy, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used