// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b286c13d14c7c08f-ps.txt
// 3DMigoto: b286c13d14c7c08f |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 112 2 8
//   undeciphered1a: 18
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_POINT_LIGHT1" }
//   undeciphered2: 1 2 2 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 496
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 384 [_SunDir] 3
//   Vector 400 [_SunColor] 3
//   Vector 432 [_FogScatteringData2]
//   Float 448 [_Jitter]
//   Float 464 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:59:34 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 20
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r18.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b286c13d14c7c08f-ps.txt

mul r18.w, -r18.x, r18.y
mad r19.xyz, -r18.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.y, -cb0[13].x, r19.y
mov r2.xz, r19.xxzx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.y, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.ywyy
and r3.x, r3.y, r3.x
lt r3.y, r2.y, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.y, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xwzx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[17].xyzx
  div r4.xyz, r1.wwww, r1.xyzx
  div r5.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r6.xyz, -r3.xyzx, -r5.xyzx
  mul r6.xyz, r4.xyzx, r6.xyzx
  add r3.xyz, -r3.xyzx, r5.xyzx
  mul r3.xyz, r3.xyzx, r4.xyzx
  min r5.xyz, r6.xyzx, r3.xyzx
  max r5.xy, r5.yzyy, r5.xxxx
  max r2.w, r5.y, r5.x
  max r2.w, r2.w, l(0.000000)
  max r3.xyz, r6.xyzx, r3.xyzx
  min r3.xy, r3.yzyy, r3.xxxx
  min r3.x, r3.y, r3.x
  min r3.y, r1.w, cb0[12].z
  min r3.x, r3.y, r3.x
  add r3.x, -r2.w, r3.x
  lt r3.z, l(0.000000), r3.x
  if_nz r3.z
    div r4.xyz, r2.wwww, r4.xyzx
    add r2.xyz, r2.xyzx, r4.xyzx
    div r3.zw, cb0[18].xxxz, cb0[13].wwww
    log r4.x, r3.x
    mul r4.x, r4.x, l(0.693147182)
    max r4.x, r4.x, l(0.000000)
    mad r4.x, r4.x, cb0[15].x, l(0.100000)
    mul r4.x, r4.x, cb0[13].z
    mul_sat r4.y, r3.y, cb0[15].y
    mul r4.x, r4.y, r4.x
    add r2.w, -r2.w, r3.y
    max r3.y, r4.x, l(0.010000)
    mul r4.xyz, r1.xyzx, r3.yyyy
    div r4.xyz, r4.xyzx, r1.wwww
    div r3.y, r3.x, r3.y
    add r5.xyz, r2.xyzx, -cb0[19].xyzx
    add r6.xyz, r2.xyzx, -cb0[21].xyzx
    mul r7.xz, r4.xxzx, cb0[13].wwww
    mul r4.w, cb0[13].z, cb0[13].y
    div r7.y, r4.y, r4.w
    add r2.xz, r2.xxzx, cb0[14].xxzx
    mul r2.xz, r2.xxzx, cb0[13].wwww
    div r2.y, r2.y, r4.w
    add r8.xy, cb0[14].xzxx, cb0[17].xzxx
    add r8.zw, cb0[14].xxxz, r19.xxxz
    frc r4.w, cb0[29].x
    mad r3.y, r4.w, cb0[28].x, r3.y
    ge r2.w, r3.x, r2.w
    mov r9.xyzw, l(0,0,0,0)
    mov r10.xyz, r5.xyzx
    mov r11.xyz, r6.xyzx
    mov r3.x, r3.y
    mov r13.xyz, r2.xyzx
    mov r12.xyzw, l(0,0,0,0)
    loop
      ge r4.w, l(1.000000), r3.x
      breakc_nz r4.w
      mad r14.xy, r8.xyxx, cb0[13].wwww, -r13.xzxx
      mul r14.xy, r3.zwzz, |r14.xyxx|
      max r4.w, r14.y, r14.x
      sample_l r14.xyzw, r13.xzxx, t1.xyzw, s0, l(0.000000)
      mad r4.w, r4.w, cb0[18].w, |r13.y|
      add r4.w, -r4.w, r14.w
      mad r15.xy, r8.zwzz, cb0[13].wwww, -r13.xzxx
      dp2 r5.w, r15.xyxx, r15.xyxx
      add r5.w, -r5.w, cb0[12].x
      max r5.w, r5.w, l(0.000000)
      mad r4.w, -r5.w, cb0[12].y, r4.w
      lt r5.w, l(0.000000), r4.w
      if_nz r5.w
        add r5.w, -r4.w, l(1.000000)
        mul r15.xyz, r5.wwww, cb0[11].xyzx
        mul r16.w, r4.w, l(0.400000)
        dp3 r4.w, r10.xyzx, r10.xyzx
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        dp3 r5.w, r11.xyzx, r11.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        mul r17.xyz, r4.wwww, cb0[20].xyzx
        mad r17.xyz, cb0[22].xyzx, r5.wwww, r17.xyzx
        mad r14.xyz, r17.xyzx, r16.wwww, r14.xyzx
        mul r14.xyz, r16.wwww, r14.xyzx
        mul r16.xyz, r14.xyzx, r15.xyzx
        add r4.w, -r12.w, l(1.000000)
        mad r14.xyzw, r16.xyzw, r4.wwww, r12.xyzw
        lt r4.w, l(0.990000), r14.w
        if_nz r4.w
          mov r9.xyzw, r16.xyzw
          mov r12.xyzw, r14.xyzw
          break
        endif
        mov r9.xyzw, r16.xyzw
        mov r12.xyzw, r14.xyzw
      endif
      add r10.xyz, r4.xyzx, r10.xyzx
      add r11.xyz, r4.xyzx, r11.xyzx
      add r3.x, r3.x, l(-1.000000)
      add r13.xyz, r7.xyzx, r13.xyzx
    endloop
    lt r2.x, r12.w, l(0.990000)
    and r2.xw, r2.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
    add r2.y, -r12.w, l(1.000000)
    mul r2.z, r3.x, r2.w
    mul r2.x, r2.y, r2.x
    mul r2.x, r2.z, r2.x
    mad r2.xyzw, r9.xyzw, r2.xxxx, r12.xyzw
    div r1.xyz, r1.xyzx, r1.wwww
    dp3 r1.x, r1.xyzx, cb0[24].xyzx
    mul r1.x, r1.x, cb0[27].w
    max r1.x, r1.x, l(0.000000)
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r1.x, r2.w, r1.x
    add r1.yzw, -r2.xxyz, cb0[25].xxyz
    mad r2.xyz, r1.xxxx, r1.yzwy, r2.xyzx
    mul o0.xyzw, r2.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used