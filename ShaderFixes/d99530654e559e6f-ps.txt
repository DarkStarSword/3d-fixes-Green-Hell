// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d99530654e559e6f-ps.txt
// 3DMigoto: d99530654e559e6f |    Unity headers extracted from Amplify_player_skin_material_inspection_skin_shader
//    Shader "Amplify/player_skin_material/inspection_skin_shader" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry+0" "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry+0" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_player_skin_material_inspection_skin_shader:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 226 7 6
//   undeciphered1a: 14
//   Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
//   undeciphered2: 1 8 8 7 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 208
//   Vector 32 [_LightColor0]
//   Float 64 [_NrmPower]
//   Vector 80 [_Albedo_ST]
//   Float 96 [_DetailNrmPower]
//   Float 100 [_DetailTiling]
//   Vector 112 [_inspection_skin_mask_a_ST]
//   Vector 128 [_AlbedoTint]
//   Float 144 [_Translucency]
//   Float 148 [_TransNormalDistortion]
//   Float 152 [_TransScattering]
//   Float 156 [_TransDirect]
//   Float 164 [_TransShadow]
//   Vector 176 [_TransulencyTint]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "UnityDrawCallInfo" 16
//   ScalarInt 0 [unity_BaseInstanceID]
//   ConstBuffer "UnityInstancing_Amplifyplayer_skin_materialinspection_skin_shader" 160
//   Struct 0 [Amplifyplayer_skin_materialinspection_skin_shaderArray] 2 80
//   Vector 0 [_slimekolor]
//   Vector 16 [_opuchliznakolor]
//   Vector 32 [_perlin_pan2] 2
//   Vector 40 [_perlin_pan1] 2
//   Float 48 [_slime_moc]
//   Float 52 [_smothness]
//   Float 56 [_slime_power]
//   Float 60 [_opuchlizna]
//   Float 64 [_perlin_noise_tiling]
//   Float 68 [_power_exp]
//   Float 72 [_perlin_noise_power]
//   SetTexture 0 [_Normal] 2D 3
//   SetTexture 1 [_inspection_skin_mask_a] 2D 6
//   SetTexture 2 [_DetailNrm] 2D 5
//   SetTexture 3 [_perlin_noise] 2D 2
//   SetTexture 4 [_Albedo] 2D 4
//   SetTexture 5 [unity_SpecCube0] CUBE 0
//   SetTexture 6 [unity_SpecCube1] CUBE -1
//   SetTexture 7 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityFog" 3
//   BindCB "UnityReflectionProbes" 4
//   BindCB "UnityProbeVolume" 5
//   BindCB "UnityDrawCallInfo" 6
//   BindCB "UnityInstancing_Amplifyplayer_skin_materialinspection_skin_shader" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:17:44 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 4     z         1     NONE   float     z
// TEXCOORD                 6      w        1     NONE   float      w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 7   xyzw        5     NONE   float
// TEXCOORD                 8   xyzw        6     NONE   float
// SV_InstanceID            0   x           7     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[12], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb6[1], immediateIndexed
dcl_constantbuffer cb7[10], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps constant v7.x
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d99530654e559e6f-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

iadd r0.x, v7.x, cb6[0].x
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r0.yzw, -r1.xxyz, r15.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r2.xyz, r0.yzwy, r1.wwww
imul null, r0.x, r0.x, l(5)
mad r3.xyzw, v1.xyxy, cb7[r0.x + 4].xxxx, l(0.000000, 1.000000, 0.000000, 1.000000)
mad r3.xyzw, cb1[0].yyyy, cb7[r0.x + 2].xyzw, r3.xyzw
mad r4.xy, v1.xyxx, cb0[5].xyxx, cb0[5].zwzz
sample r5.xyzw, r4.xyxx, t0.xyzw, s3
mul r5.x, r5.w, r5.x
mad r4.zw, r5.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r5.xy, r4.zwzz, cb0[4].xxxx
dp2 r2.w, r5.xyxx, r5.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r5.z, r2.w
mul r6.xy, v1.xyxx, cb0[6].yyyy
mad r6.zw, v1.xxxy, cb0[7].xxxy, cb0[7].zzzw
sample r7.xyzw, r6.zwzz, t1.xyzw, s6
sample r6.xyzw, r6.xyxx, t2.xyzw, s5
mul r6.x, r6.w, r6.x
mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r6.xy, r6.xyxx, cb0[6].xxxx
dp2 r2.w, r6.xyxx, r6.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r6.z, r2.w
add r7.zw, -r7.zzzx, l(0.000000, 0.000000, 1.000000, 1.000000)
add r6.xyz, -r5.xyzx, r6.xyzx
mad r5.xyw, r7.zzzz, r6.xyxz, r5.xyxz
mad r6.xy, r4.zwzz, cb0[4].xxxx, r5.xyxx
mul r6.z, r5.z, r5.w
dp3 r2.w, r6.xyzx, r6.xyzx
rsq r2.w, r2.w
mul r5.xyz, r2.wwww, r6.xyzx
sample r8.xyzw, r3.xyxx, t3.xyzw, s2
mul r8.x, r8.w, r8.x
mad r3.xy, r8.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r4.zw, r3.xxxy, cb7[r0.x + 4].zzzz
dp2 r4.z, r4.zwzz, r4.zwzz
min r4.z, r4.z, l(1.000000)
add r4.z, -r4.z, l(1.000000)
sample r8.xyzw, r3.zwzz, t3.xyzw, s2
mul r8.x, r8.w, r8.x
mad r3.zw, r8.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r3.zw, r3.zzzw, cb7[r0.x + 4].zzzz
dp2 r4.w, r3.zwzz, r3.zwzz
min r4.w, r4.w, l(1.000000)
add r4.w, -r4.w, l(1.000000)
sqrt r4.zw, r4.zzzw
mad r3.xy, r3.xyxx, cb7[r0.x + 4].zzzz, r3.zwzz
mul r3.z, r4.w, r4.z
dp3 r3.w, r3.xyzx, r3.xyzx
rsq r3.w, r3.w
mul r3.z, r3.w, r3.z
mad r8.xy, r3.xyxx, r3.wwww, r5.xyxx
mul r8.z, r5.z, r3.z
dp3 r3.x, r8.xyzx, r8.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, r8.xyzx
log r3.w, r7.w
mul r3.w, r3.w, cb7[r0.x + 4].y
exp r3.w, r3.w
mad r5.xyz, r6.xyzx, r2.wwww, -r3.xyzx
mad r3.xyz, r3.wwww, r5.xyzx, r3.xyzx
sample r4.xyzw, r4.xyxx, t4.xyzw, s4
mul r5.xyz, r4.xyzx, cb0[8].xyzx
add r6.xyz, r5.xyzx, r5.xyzx
mul r8.xyz, r5.xyzx, r5.xyzx
mad r9.xyz, -cb7[r0.x + 1].xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r8.xyz, r8.xyzx, r9.xyzx
mad_sat r6.xyz, r6.xyzx, cb7[r0.x + 1].xyzx, r8.xyzx
mul r2.w, r7.x, cb7[r0.x + 3].w
mad r6.xyz, -cb0[8].xyzx, r4.xyzx, r6.xyzx
mad r5.xyz, r2.wwww, r6.xyzx, r5.xyzx
mad r2.w, -r7.y, cb7[r0.x + 3].x, l(1.000000)
log r2.w, r2.w
mul r2.w, r2.w, cb7[r0.x + 3].z
exp r2.w, r2.w
add r5.xyz, r5.xyzx, -cb7[r0.x + 0].xyzx
mad r5.xyz, r2.wwww, r5.xyzx, cb7[r0.x + 0].xyzx
mul r4.xyz, r4.xyzx, cb0[11].xyzx
mul r4.xyz, r4.xyzx, v1.zzzz
eq r2.w, cb5[0].x, l(1.000000)
if_nz r2.w
  eq r2.w, cb5[0].y, l(1.000000)
  mul r6.xyz, v3.wwww, cb5[2].xyzx
  mad r6.xyz, cb5[1].xyzx, v2.wwww, r6.xyzx
  mad r6.xyz, cb5[3].xyzx, v4.wwww, r6.xyzx
  add r6.xyz, r6.xyzx, cb5[4].xyzx
  movc r6.xyz, r2.wwww, r6.xyzx, r1.xyzx
  add r6.xyz, r6.xyzx, -cb5[6].xyzx
  mul r6.yzw, r6.xxyz, cb5[5].xxyz
  mad r2.w, r6.y, l(0.250000), l(0.750000)
  mad r3.w, cb5[0].z, l(0.500000), l(0.750000)
  max r6.x, r2.w, r3.w
  sample r6.xyzw, r6.xzwx, t7.xyzw, s1
else
  mov r6.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r2.w, r6.xyzw, cb2[46].xyzw
dp3 r6.x, v2.xyzx, r3.xyzx
dp3 r6.y, v3.xyzx, r3.xyzx
dp3 r6.z, v4.xyzx, r3.xyzx
dp3 r3.x, r6.xyzx, r6.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, r6.xyzx
add r3.w, l(1.000000), -cb7[r0.x + 3].y
dp3 r4.w, -r2.xyzx, r3.xyzx
add r4.w, r4.w, r4.w
mad r6.xyz, r3.xyzx, -r4.wwww, -r2.xyzx
mul r7.xyz, r2.wwww, cb0[2].xyzx
lt r4.w, l(0.000000), cb4[2].w
if_nz r4.w
  dp3 r4.w, r6.xyzx, r6.xyzx
  rsq r4.w, r4.w
  mul r8.xyz, r4.wwww, r6.xyzx
  add r9.xyz, -r1.xyzx, cb4[0].xyzx
  div r9.xyz, r9.xyzx, r8.xyzx
  add r10.xyz, -r1.xyzx, cb4[1].xyzx
  div r10.xyz, r10.xyzx, r8.xyzx
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
  movc r9.xyz, r11.xyzx, r9.xyzx, r10.xyzx
  min r4.w, r9.y, r9.x
  min r4.w, r9.z, r4.w
  add r9.xyz, r1.xyzx, -cb4[2].xyzx
  mad r8.xyz, r8.xyzx, r4.wwww, r9.xyzx
else
  mov r8.xyz, r6.xyzx
endif
mad r4.w, -r3.w, l(0.700000), l(1.700000)
mul r4.w, r3.w, r4.w
mul r4.w, r4.w, l(6.000000)
sample_l r8.xyzw, r8.xyzx, t5.xyzw, s0, r4.w
add r5.w, r8.w, l(-1.000000)
mad r5.w, cb4[3].w, r5.w, l(1.000000)
log r5.w, r5.w
mul r5.w, r5.w, cb4[3].y
exp r5.w, r5.w
mul r5.w, r5.w, cb4[3].x
mul r9.xyz, r8.xyzx, r5.wwww
lt r6.w, cb4[1].w, l(0.999990)
if_nz r6.w
  lt r6.w, l(0.000000), cb4[6].w
  if_nz r6.w
    dp3 r6.w, r6.xyzx, r6.xyzx
    rsq r6.w, r6.w
    mul r10.xyz, r6.wwww, r6.xyzx
    add r11.xyz, -r1.xyzx, cb4[4].xyzx
    div r11.xyz, r11.xyzx, r10.xyzx
    add r12.xyz, -r1.xyzx, cb4[5].xyzx
    div r12.xyz, r12.xyzx, r10.xyzx
    lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
    min r6.w, r11.y, r11.x
    min r6.w, r11.z, r6.w
    add r1.xyz, r1.xyzx, -cb4[6].xyzx
    mad r6.xyz, r10.xyzx, r6.wwww, r1.xyzx
  endif
  sample_l r6.xyzw, r6.xyzx, t6.xyzw, s0, r4.w
  add r1.x, r6.w, l(-1.000000)
  mad r1.x, cb4[7].w, r1.x, l(1.000000)
  log r1.x, r1.x
  mul r1.x, r1.x, cb4[7].y
  exp r1.x, r1.x
  mul r1.x, r1.x, cb4[7].x
  mul r1.xyz, r6.xyzx, r1.xxxx
  mad r6.xyz, r5.wwww, r8.xyzx, -r1.xyzx
  mad r9.xyz, cb4[1].wwww, r6.xyzx, r1.xyzx
endif
mad r1.xyz, cb0[2].xyzx, r2.wwww, -cb0[2].xyzx
mad r1.xyz, cb0[10].yyyy, r1.xyzx, cb0[2].xyzx
mad r6.xyz, r3.xyzx, cb0[9].yyyy, cb2[0].xyzx
dp3_sat r2.w, r2.xyzx, -r6.xyzx
log r2.w, r2.w
mul r2.w, r2.w, cb0[9].z
exp r2.w, r2.w
mul r2.w, r2.w, cb0[9].w
mul r1.xyz, r1.xyzx, r2.wwww
mul r1.xyz, r4.xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, r5.xyzx
mul r4.xyz, r5.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r0.yzw, r0.yyzw, r1.wwww, cb2[0].xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
max r1.w, r1.w, l(0.001000)
rsq r1.w, r1.w
mul r0.yzw, r0.yyzw, r1.wwww
dp3 r1.w, r3.xyzx, r2.xyzx
dp3_sat r2.x, r3.xyzx, cb2[0].xyzx
dp3_sat r2.y, r3.xyzx, r0.yzwy
dp3_sat r0.y, cb2[0].xyzx, r0.yzwy
add r0.z, r0.y, r0.y
mul r0.z, r0.y, r0.z
mad r0.z, r0.z, r3.w, l(-0.500000)
add r0.w, -r2.x, l(1.000000)
mul r2.z, r0.w, r0.w
mul r2.z, r2.z, r2.z
mul r0.w, r0.w, r2.z
mad r0.w, r0.z, r0.w, l(1.000000)
add r2.z, -|r1.w|, l(1.000000)
mul r2.w, r2.z, r2.z
mul r2.w, r2.w, r2.w
mul r2.z, r2.z, r2.w
mad r0.z, r0.z, r2.z, l(1.000000)
mul r0.z, r0.z, r0.w
mul r0.z, r2.x, r0.z
mul r0.w, r3.w, r3.w
max r0.w, r0.w, l(0.002000)
add r2.w, -r0.w, l(1.000000)
mad r3.x, |r1.w|, r2.w, r0.w
mad r2.w, r2.x, r2.w, r0.w
mul r1.w, |r1.w|, r2.w
mad r1.w, r2.x, r3.x, r1.w
add r1.w, r1.w, l(0.000010)
div r1.w, l(0.500000), r1.w
mul r2.w, r0.w, r0.w
mad r3.x, r2.y, r2.w, -r2.y
mad r2.y, r3.x, r2.y, l(1.000000)
mul r2.w, r2.w, l(0.318309873)
mad r2.y, r2.y, r2.y, l(1.000000012E-007)
div r2.y, r2.w, r2.y
mul r1.w, r1.w, r2.y
mul r1.w, r1.w, l(3.14159274)
mul r1.w, r2.x, r1.w
max r1.w, r1.w, l(0.000000)
mad r0.w, r0.w, r0.w, l(1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add_sat r0.x, l(0.0400000215), cb7[r0.x + 3].y
mul r2.xyw, r0.zzzz, r7.xyxz
mul r3.xyz, r7.xyzx, r1.wwww
add r0.y, -r0.y, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.y, r0.z
mad r0.y, r0.y, l(0.960000), l(0.040000)
mul r3.xyz, r0.yyyy, r3.xyzx
mad r2.xyw, r4.xyxz, r2.xyxw, r3.xyxz
mul r0.yzw, r9.xxyz, r0.wwww
add r0.x, r0.x, l(-0.040000)
mad r0.x, r2.z, r0.x, l(0.040000)
mad r0.xyz, r0.yzwy, r0.xxxx, r2.xywx
mad r0.xyz, r1.xyzx, cb0[9].xxxx, r0.xyzx
mov o0.w, l(1.000000)
div r0.w, v1.w, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mad_sat r0.w, r0.w, cb3[1].z, cb3[1].w
add r0.xyz, r0.xyzx, -cb3[0].xyzx
mad o0.xyz, r0.wwww, r0.xyzx, cb3[0].xyzx
ret
// Approximately 0 instruction slots used