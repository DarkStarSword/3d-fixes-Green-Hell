// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed c5bb4fb0f6fcfd57-ps.txt
// 3DMigoto: c5bb4fb0f6fcfd57 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 165 2 9
//   undeciphered1a: 19
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 368 [_SunPosition] 3
//   Vector 384 [_SunDir] 3
//   Vector 400 [_SunColor] 3
//   Vector 416 [_FogScatteringData]
//   Vector 432 [_FogScatteringData2]
//   Vector 528 [_VolumetricFogSunWorldPos]
//   Vector 544 [_VolumetricFogSunShadowsData]
//   Float 560 [_Jitter]
//   Matrix 464 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 3
//   SetTexture 3 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:08:33 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 21
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r19.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed c5bb4fb0f6fcfd57-ps.txt

mul r19.w, -r19.x, r19.y
mad r20.xyz, -r19.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.z, -cb0[13].x, r20.z
mov r1.xy, r20.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.zzwz
and r2.y, r2.z, r2.y
lt r2.z, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[17].xxyz
  div r3.xyz, r0.xyzx, r0.wwww
  dp3 r1.w, r3.xyzx, r2.yzwy
  dp3 r2.y, r2.yzwy, r2.yzwy
  add r2.y, r2.y, -cb0[18].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.z, r2.y, l(0.000000)
  sqrt r2.w, r2.y
  movc r2.y, r2.z, r2.w, r2.y
  add r2.z, -r1.w, -r2.y
  max r2.z, r2.z, l(0.000000)
  min r2.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r2.w, r1.w
  add r1.w, -r2.z, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r4.xyz, r3.xyzx, r2.zzzz, r1.xyzx
    log r1.x, r1.w
    mul r1.x, r1.x, l(0.693147182)
    max r1.x, r1.x, l(0.000000)
    mad r1.x, r1.x, cb0[15].x, l(0.100000)
    mul r1.x, r1.x, cb0[13].z
    mul_sat r1.y, r2.w, cb0[15].y
    mul r1.x, r1.y, r1.x
    add r1.y, -r2.z, r2.w
    max r1.x, r1.x, l(0.010000)
    mul r5.xyz, r0.xyzx, r1.xxxx
    div r5.xyz, r5.xyzx, r0.wwww
    div r1.x, r1.w, r1.x
    add r6.xyz, r4.xyzx, -cb0[19].xyzx
    add r7.xyz, r4.xyzx, -cb0[21].xyzx
    mul r8.xy, r5.xyxx, cb0[13].wwww
    mul r1.z, cb0[13].z, cb0[13].y
    div r8.z, r5.z, r1.z
    add r2.yw, r4.xxxy, cb0[14].xxxz
    mul r2.yw, r2.yyyw, cb0[13].wwww
    div r1.z, r4.z, r1.z
    add r9.xy, cb0[14].xyxx, cb0[17].xyxx
    add r9.zw, cb0[14].xxxy, r20.xxxy
    frc r3.w, r2.x
    mad r1.x, r3.w, cb0[35].x, r1.x
    add r4.w, r4.z, cb0[13].x
    mul r10.xyz, r4.yyyy, cb0[30].xywx
    mad r10.xyz, cb0[29].xywx, r4.xxxx, r10.xyzx
    mad r10.xyz, cb0[31].xywx, r4.wwww, r10.xyzx
    add r10.xyz, r10.xyzx, cb0[32].xywx
    div r10.xy, r10.xyxx, r10.zzzz
    mad r10.xy, r10.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r3.w, r2.x, cb0[34].y, l(1.000000)
    mul r3.w, r1.w, r3.w
    mul r0.xyz, r0.xyzx, r3.wwww
    div r0.xyz, r0.xyzx, r0.wwww
    add r0.xyz, r0.xyzx, r4.xywx
    mul r11.xyz, r0.yyyy, cb0[30].xywx
    mad r11.xyz, cb0[29].xywx, r0.xxxx, r11.xyzx
    mad r11.xyz, cb0[31].xywx, r0.zzzz, r11.xyzx
    add r11.xyz, r11.xyzx, cb0[32].xywx
    div r10.zw, r11.xxxy, r11.zzzz
    mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    add r0.w, -r2.z, cb0[33].w
    mul_sat r0.w, r0.w, l(0.0285714287)
    mul r0.w, r0.w, cb0[34].x
    div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
    ge r1.y, r1.w, r1.y
    and r1.y, r1.y, l(0x3f800000)
    add r10.xy, -r10.zwzz, r10.xyxx
    add r4.xyz, -r0.xyzx, r4.xywx
    mov r11.xyzw, l(0,0,0,0)
    mov r12.xyz, r6.xyzx
    mov r13.xyz, r7.xyzx
    mov r15.xy, r2.ywyy
    mov r1.w, r1.x
    mov r15.z, r1.z
    mov r14.xyzw, l(0,0,0,0)
    loop
      ge r3.w, l(1.000000), r1.w
      breakc_nz r3.w
      mad r16.xy, r9.xyxx, cb0[13].wwww, -r15.xyxx
      mul r16.xy, r16.xyxx, cb0[18].xxxx
      dp2 r3.w, r16.xyxx, r16.xyxx
      sample_l r16.xyzw, r15.xyxx, t1.xyzw, s1, l(0.000000)
      mad r3.w, r3.w, cb0[18].w, |r15.z|
      add r3.w, -r3.w, r16.w
      mad r17.xy, r9.zwzz, cb0[13].wwww, -r15.xyxx
      dp2 r4.w, r17.xyxx, r17.xyxx
      add r4.w, -r4.w, cb0[12].x
      max r4.w, r4.w, l(0.000000)
      mad r3.w, -r4.w, cb0[12].y, r3.w
      lt r4.w, l(0.000000), r3.w
      if_nz r4.w
        add r4.w, -r3.w, l(1.000000)
        mul r17.xyz, r4.wwww, cb0[11].xyzx
        mul r17.w, r3.w, l(0.400000)
        mul r3.w, r2.z, r1.w
        mad r18.xy, r3.wwww, r10.xyxx, r10.zwzz
        sample_l r18.xyzw, r18.xyxx, t2.xyzw, s3, l(0.000000)
        dp4 r4.w, r18.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        mad r18.xyz, r3.wwww, r4.xyzx, r0.xyzx
        add r18.xyz, r18.xyzx, -cb0[33].xyzx
        dp3 r3.w, r18.xyzx, r18.xyzx
        sqrt r3.w, r3.w
        add_sat r3.w, -r3.w, r4.w
        mul r4.w, r0.w, r14.w
        add r3.w, r3.w, l(-1.000000)
        mad r4.w, r4.w, r3.w, l(1.000000)
        mad r3.w, cb0[34].z, r3.w, l(1.000000)
        mul r17.xyzw, r3.wwww, r17.xyzw
        dp3 r3.w, r12.xyzx, r12.xyzx
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        dp3 r5.w, r13.xyzx, r13.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        mul r18.xyz, r3.wwww, cb0[20].xyzx
        mad r18.xyz, cb0[22].xyzx, r5.wwww, r18.xyzx
        mul r18.xyz, r17.wwww, r18.xyzx
        mad r16.xyz, r16.xyzx, r4.wwww, r18.xyzx
        mul r16.xyz, r17.wwww, r16.xyzx
        mul r17.xyz, r16.xyzx, r17.xyzx
        add r3.w, -r14.w, l(1.000000)
        mad r16.xyzw, r17.xyzw, r3.wwww, r14.xyzw
        lt r3.w, l(0.990000), r16.w
        if_nz r3.w
          mov r11.xyzw, r17.xyzw
          mov r14.xyzw, r16.xyzw
          break
        endif
        mov r11.xyzw, r17.xyzw
        mov r14.xyzw, r16.xyzw
      endif
      add r12.xyz, r5.xyzx, r12.xyzx
      add r13.xyz, r5.xyzx, r13.xyzx
      add r1.w, r1.w, l(-1.000000)
      add r15.xyz, r8.xyzx, r15.xyzx
    endloop
    lt r0.x, r14.w, l(0.990000)
    and r0.x, r0.x, l(0x3f800000)
    add r0.y, -r14.w, l(1.000000)
    mul r0.z, r1.w, r1.y
    mul r0.x, r0.y, r0.x
    mul r0.x, r0.z, r0.x
    mad r0.xyzw, r11.xyzw, r0.xxxx, r14.xyzw
    dp3 r1.x, r3.xyzx, cb0[24].xyzx
    mul r1.x, r1.x, cb0[27].w
    max r1.x, r1.x, l(0.000000)
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r1.x, r0.w, r1.x
    add r1.yzw, -r0.xxyz, cb0[25].xxyz
    mad r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
    mul r0.xyzw, r0.xyzw, cb0[10].wwww
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.xyzw, r1.xxxx
sample r4.xyzw, v1.xyxx, t3.xyzw, s0
mad_sat r0.x, -r0.w, r1.x, l(1.000000)
mad r0.xyz, r4.xyzx, r0.xxxx, r3.xyzx
lt r0.w, cb0[2].y, l(0.000000)
add r1.x, -cb0[23].y, l(1.000000)
movc r0.w, r0.w, r1.x, cb0[23].y
add r1.x, -v1.x, cb0[23].x
add r1.y, r0.w, -v1.y
mad r0.w, r2.x, cb0[27].z, l(1.000000)
mul r0.w, r0.w, cb0[26].x
mov r2.xyz, l(0,0,0,0)
mov r1.zw, v1.xxxy
mov r2.w, cb0[27].x
mov r3.x, cb0[26].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r1.zw, r1.xxxy, r0.wwww, r1.zzzw
  sample_l r4.xyzw, r1.zwzz, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r2.wwww, r4.xyzx
  mad r2.xyz, r4.xyzx, cb0[26].wwww, r2.xyzx
  mul r2.w, r2.w, cb0[27].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r2.xyzx, cb0[26].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used