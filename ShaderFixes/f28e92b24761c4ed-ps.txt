// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f28e92b24761c4ed-ps.txt
// 3DMigoto: f28e92b24761c4ed |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 183 4 10
//   undeciphered1a: 21
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 624
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogSkyColor]
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_SunPosition] 3
//   Vector 400 [_SunDir] 3
//   Vector 416 [_SunColor] 3
//   Vector 432 [_FogScatteringData]
//   Vector 448 [_FogScatteringData2]
//   Vector 544 [_VolumetricFogSunWorldPos]
//   Vector 560 [_VolumetricFogSunShadowsData]
//   Float 576 [_Jitter]
//   Matrix 480 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 4 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:29:25 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[37], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 23
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r21.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f28e92b24761c4ed-ps.txt

mul r21.w, -r21.x, r21.y
mad r22.xyz, -r21.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r22.y
mov r1.xz, r22.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  add r4.xyz, r1.xyzx, -cb0[17].xyzx
  div r5.xyz, r3.xyzx, r0.wwww
  dp3 r1.w, r5.xyzx, r4.xyzx
  dp3 r2.y, r4.xyzx, r4.xyzx
  add r2.y, r2.y, -cb0[18].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.w, r2.y, l(0.000000)
  sqrt r3.w, r2.y
  movc r2.y, r2.w, r3.w, r2.y
  add r2.w, -r1.w, -r2.y
  max r2.w, r2.w, l(0.000000)
  min r3.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r3.w, r1.w
  add r1.w, -r2.w, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r4.xyz, r5.xyzx, r2.wwww, r1.xyzx
    log r1.x, r1.w
    mul r1.x, r1.x, l(0.693147182)
    max r1.x, r1.x, l(0.000000)
    mad r1.x, r1.x, cb0[15].x, l(0.100000)
    mul r1.x, r1.x, cb0[13].z
    mul_sat r1.y, r3.w, cb0[15].y
    mul r1.x, r1.y, r1.x
    add r1.y, -r2.w, r3.w
    max r1.x, r1.x, l(0.010000)
    mul r6.xyz, r1.xxxx, r3.xyzx
    div r6.xyz, r6.xyzx, r0.wwww
    div r1.x, r1.w, r1.x
    add r7.xyz, r4.xyzx, -cb0[20].xyzx
    add r8.xyz, r4.xyzx, -cb0[22].xyzx
    mul r9.xz, r6.xxzx, cb0[13].wwww
    mul r1.z, cb0[13].z, cb0[13].y
    div r9.y, r6.y, r1.z
    add r10.xy, r4.xzxx, cb0[14].xzxx
    mul r10.xy, r10.xyxx, cb0[13].wwww
    div r1.z, r4.y, r1.z
    add r10.zw, cb0[14].xxxz, cb0[17].xxxz
    add r11.xy, cb0[14].xzxx, r22.xzxx
    frc r2.y, r0.z
    mad r1.x, r2.y, cb0[36].x, r1.x
    add r4.w, r4.y, cb0[13].x
    mul r12.xyz, r4.wwww, cb0[31].xywx
    mad r12.xyz, cb0[30].xywx, r4.xxxx, r12.xyzx
    mad r12.xyz, cb0[32].xywx, r4.zzzz, r12.xyzx
    add r12.xyz, r12.xyzx, cb0[33].xywx
    div r11.zw, r12.xxxy, r12.zzzz
    mad r11.zw, r11.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    mad r2.y, r0.z, cb0[35].y, l(1.000000)
    mul r2.y, r1.w, r2.y
    mul r3.xyz, r3.xyzx, r2.yyyy
    div r3.xyz, r3.xyzx, r0.wwww
    add r3.xyz, r3.xyzx, r4.xwzx
    mul r12.xyz, r3.yyyy, cb0[31].xywx
    mad r12.xyz, cb0[30].xywx, r3.xxxx, r12.xyzx
    mad r12.xyz, cb0[32].xywx, r3.zzzz, r12.xyzx
    add r12.xyz, r12.xyzx, cb0[33].xywx
    div r12.xy, r12.xyxx, r12.zzzz
    mad r12.xy, r12.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r0.w, -r2.w, cb0[34].w
    mul_sat r0.w, r0.w, l(0.0285714287)
    mul r0.w, r0.w, cb0[35].x
    div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
    ge r1.y, r1.w, r1.y
    and r1.y, r1.y, l(0x3f800000)
    add r11.zw, r11.zzzw, -r12.xxxy
    add r4.xyz, -r3.xyzx, r4.xwzx
    mov r13.xyzw, l(0,0,0,0)
    mov r14.xyz, r7.xyzx
    mov r15.xyz, r8.xyzx
    mov r17.xz, r10.xxyx
    mov r1.w, r1.x
    mov r17.y, r1.z
    mov r16.xyzw, l(0,0,0,0)
    loop
      ge r2.w, l(1.000000), r1.w
      breakc_nz r2.w
      mad r12.zw, r10.zzzw, cb0[13].wwww, -r17.xxxz
      mul r12.zw, r12.zzzw, cb0[18].xxxx
      dp2 r2.w, r12.zwzz, r12.zwzz
      sample_l r18.xyzw, r17.xzxx, t2.xyzw, s1, l(0.000000)
      mad r2.w, r2.w, cb0[18].w, |r17.y|
      add r2.w, -r2.w, r18.w
      mad r12.zw, r11.xxxy, cb0[13].wwww, -r17.xxxz
      dp2 r3.w, r12.zwzz, r12.zwzz
      add r3.w, -r3.w, cb0[12].x
      max r3.w, r3.w, l(0.000000)
      mad r2.w, -r3.w, cb0[12].y, r2.w
      lt r3.w, l(0.000000), r2.w
      if_nz r3.w
        add r3.w, -r2.w, l(1.000000)
        mul r19.xyz, r3.wwww, cb0[11].xyzx
        mul r19.w, r2.w, l(0.400000)
        mul r2.w, r2.y, r1.w
        mad r12.zw, r2.wwww, r11.zzzw, r12.xxxy
        sample_l r20.xyzw, r12.zwzz, t3.xyzw, s4, l(0.000000)
        dp4 r3.w, r20.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        mad r20.xyz, r2.wwww, r4.xyzx, r3.xyzx
        add r20.xyz, r20.xyzx, -cb0[34].xyzx
        dp3 r2.w, r20.xyzx, r20.xyzx
        sqrt r2.w, r2.w
        add_sat r2.w, -r2.w, r3.w
        mul r3.w, r0.w, r16.w
        add r2.w, r2.w, l(-1.000000)
        mad r3.w, r3.w, r2.w, l(1.000000)
        mad r2.w, cb0[35].z, r2.w, l(1.000000)
        mul r19.xyzw, r2.wwww, r19.xyzw
        dp3 r2.w, r14.xyzx, r14.xyzx
        div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
        dp3 r4.w, r15.xyzx, r15.xyzx
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        mul r20.xyz, r2.wwww, cb0[21].xyzx
        mad r20.xyz, cb0[23].xyzx, r4.wwww, r20.xyzx
        mul r20.xyz, r19.wwww, r20.xyzx
        mad r18.xyz, r18.xyzx, r3.wwww, r20.xyzx
        mul r18.xyz, r19.wwww, r18.xyzx
        mul r19.xyz, r18.xyzx, r19.xyzx
        add r2.w, -r16.w, l(1.000000)
        mad r18.xyzw, r19.xyzw, r2.wwww, r16.xyzw
        lt r2.w, l(0.990000), r18.w
        if_nz r2.w
          mov r13.xyzw, r19.xyzw
          mov r16.xyzw, r18.xyzw
          break
        endif
        mov r13.xyzw, r19.xyzw
        mov r16.xyzw, r18.xyzw
      endif
      add r14.xyz, r6.xyzx, r14.xyzx
      add r15.xyz, r6.xyzx, r15.xyzx
      add r1.w, r1.w, l(-1.000000)
      add r17.xyz, r9.xyzx, r17.xyzx
    endloop
    lt r0.w, r16.w, l(0.990000)
    and r0.w, r0.w, l(0x3f800000)
    add r1.x, -r16.w, l(1.000000)
    mul r1.y, r1.w, r1.y
    mul r0.w, r0.w, r1.x
    mul r0.w, r1.y, r0.w
    mad r1.xyzw, r13.xyzw, r0.wwww, r16.xyzw
    dp3 r0.w, r5.xyzx, cb0[25].xyzx
    mul r0.w, r0.w, cb0[28].w
    max r0.w, r0.w, l(0.000000)
    mul r0.w, r0.w, r0.w
    mul r0.w, r0.w, r0.w
    mul r0.w, r0.w, r0.w
    mul r0.w, r1.w, r0.w
    add r3.xyz, -r1.xyzx, cb0[26].xyzx
    mad r1.xyz, r0.wwww, r3.xyzx, r1.xyzx
    mul r1.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r2.y, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r1.xy, r0.xxxx, r2.xzxx
  mad r1.xy, r1.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r5.xyzw, r1.xyxx, t2.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r5.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r1.xyz, -r4.xyzx, cb0[19].xyzx
  mad r4.xyz, r0.xxxx, r1.xyzx, r4.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyw, r4.xyxz, r0.xxxx, r3.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[24].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[24].y
add r2.x, -v1.x, cb0[24].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[28].z, l(1.000000)
mul r0.z, r0.z, cb0[27].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[28].x
mov r3.x, cb0[27].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.zzzz, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[27].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[28].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[27].zzzz, r0.xywx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used