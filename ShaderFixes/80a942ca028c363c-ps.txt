// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 80a942ca028c363c-ps.txt
// 3DMigoto: 80a942ca028c363c |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 132 5 13
//   undeciphered1a: 18
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_HAZE_ON" "FOG_POINT_LIGHT1" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 464
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogSkyColor]
//   Vector 336 [_FogOfWarSize] 3
//   Vector 352 [_FogOfWarCenterAdjusted] 3
//   Vector 368 [_FogPointLightPosition0] 3
//   Vector 384 [_FogPointLightColor0] 3
//   Vector 400 [_FogPointLightPosition1] 3
//   Vector 416 [_FogPointLightColor1] 3
//   Float 428 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_FogOfWar] 2D 4
//   SetTexture 3 [_NoiseTex] 2D 1
//   SetTexture 4 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:29:57 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[27], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 20
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r18.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 80a942ca028c363c-ps.txt

mul r18.w, -r18.x, r18.y
mad r19.xyz, -r18.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r19.y
mov r1.xz, r19.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  lt r0.w, r0.x, cb0[16].w
  if_nz r0.w
    div r3.xy, r2.xzxx, cb0[21].xzxx
    add r3.xy, r3.xyxx, -cb0[22].xzxx
    sample r3.xyzw, r3.xyxx, t2.wxyz, s4
    ge r0.w, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.w, l(0)
  endif
  if_z r0.w
    add r2.w, r2.y, l(0.000010)
    add r3.yzw, -r1.xxyz, r2.xxwz
    dp3 r0.w, r3.yzwy, r3.yzwy
    sqrt r0.w, r0.w
    add r4.xyz, r1.xyzx, -cb0[17].xyzx
    div r5.xyz, r0.wwww, r3.yzwy
    div r6.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r7.xyz, -r4.xyzx, -r6.xyzx
    mul r7.xyz, r5.xyzx, r7.xyzx
    add r4.xyz, -r4.xyzx, r6.xyzx
    mul r4.xyz, r4.xyzx, r5.xyzx
    min r6.xyz, r7.xyzx, r4.xyzx
    max r2.yw, r6.yyyz, r6.xxxx
    max r1.w, r2.w, r2.y
    max r1.w, r1.w, l(0.000000)
    max r4.xyz, r7.xyzx, r4.xyzx
    min r2.yw, r4.yyyz, r4.xxxx
    min r2.y, r2.w, r2.y
    min r2.w, r0.w, cb0[12].z
    min r2.y, r2.w, r2.y
    add r2.y, -r1.w, r2.y
    lt r4.x, l(0.000000), r2.y
    if_nz r4.x
      div r4.xyz, r1.wwww, r5.xyzx
      add r1.xyz, r1.xyzx, r4.xyzx
      div r4.xy, cb0[18].xzxx, cb0[13].wwww
      log r4.z, r2.y
      mul r4.z, r4.z, l(0.693147182)
      max r4.z, r4.z, l(0.000000)
      mad r4.z, r4.z, cb0[15].x, l(0.100000)
      mul r4.z, r4.z, cb0[13].z
      mul_sat r4.w, r2.w, cb0[15].y
      mul r4.z, r4.w, r4.z
      add r1.w, -r1.w, r2.w
      max r2.w, r4.z, l(0.010000)
      mul r3.yzw, r2.wwww, r3.yyzw
      div r3.yzw, r3.yyzw, r0.wwww
      div r0.w, r2.y, r2.w
      add r5.xyz, r1.xyzx, -cb0[23].xyzx
      add r6.xyz, r1.xyzx, -cb0[25].xyzx
      mul r7.xz, r3.yywy, cb0[13].wwww
      mul r2.w, cb0[13].z, cb0[13].y
      div r7.y, r3.z, r2.w
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r2.w
      add r4.zw, cb0[14].xxxz, cb0[17].xxxz
      add r8.xy, cb0[14].xzxx, r19.xzxx
      frc r2.w, r0.z
      mad r0.w, r2.w, cb0[26].w, r0.w
      ge r1.w, r2.y, r1.w
      and r1.w, r1.w, l(0x3f800000)
      mov r9.xyzw, l(0,0,0,0)
      mov r10.xyz, r5.xyzx
      mov r11.xyz, r6.xyzx
      mov r2.y, r0.w
      mov r13.xyz, r1.xyzx
      mov r12.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r2.y
        breakc_nz r2.w
        mad r8.zw, r4.zzzw, cb0[13].wwww, -r13.xxxz
        mul r8.zw, r4.xxxy, |r8.zzzw|
        max r2.w, r8.w, r8.z
        sample_l r14.xyzw, r13.xzxx, t3.xyzw, s1, l(0.000000)
        mad r2.w, r2.w, cb0[18].w, |r13.y|
        add r2.w, -r2.w, r14.w
        mad r8.zw, r8.xxxy, cb0[13].wwww, -r13.xxxz
        dp2 r5.w, r8.zwzz, r8.zwzz
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r2.w, -r5.w, cb0[12].y, r2.w
        lt r5.w, l(0.000000), r2.w
        if_nz r5.w
          add r5.w, -r2.w, l(1.000000)
          mul r15.xyz, r5.wwww, cb0[11].xyzx
          mul r16.w, r2.w, l(0.400000)
          dp3 r2.w, r10.xyzx, r10.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          dp3 r5.w, r11.xyzx, r11.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mul r17.xyz, r2.wwww, cb0[24].xyzx
          mad r17.xyz, cb0[26].xyzx, r5.wwww, r17.xyzx
          mad r14.xyz, r17.xyzx, r16.wwww, r14.xyzx
          mul r14.xyz, r16.wwww, r14.xyzx
          mul r16.xyz, r14.xyzx, r15.xyzx
          add r2.w, -r12.w, l(1.000000)
          mad r14.xyzw, r16.xyzw, r2.wwww, r12.xyzw
          lt r2.w, l(0.990000), r14.w
          if_nz r2.w
            mov r9.xyzw, r16.xyzw
            mov r12.xyzw, r14.xyzw
            break
          endif
          mov r9.xyzw, r16.xyzw
          mov r12.xyzw, r14.xyzw
        endif
        add r10.xyz, r3.yzwy, r10.xyzx
        add r11.xyz, r3.yzwy, r11.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r13.xyz, r7.xyzx, r13.xyzx
      endloop
      lt r0.w, r12.w, l(0.990000)
      and r0.w, r0.w, l(0x3f800000)
      add r1.x, -r12.w, l(1.000000)
      mul r1.y, r1.w, r2.y
      mul r0.w, r0.w, r1.x
      mul r0.w, r1.y, r0.w
      mad r1.xyzw, r9.xyzw, r0.wwww, r12.xyzw
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r0.z, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.zzzz, r1.xyzw
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r1.xy, r0.xxxx, r2.xzxx
  mad r1.xy, r1.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r2.xyzw, r1.xyxx, t3.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r2.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r1.xyz, -r4.xyzx, cb0[19].xyzx
  mad r4.xyz, r0.xxxx, r1.xyzx, r4.xyzx
endif
mad_sat r0.x, -r1.w, r0.z, l(1.000000)
mad o0.xyz, r4.xyzx, r0.xxxx, r3.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used