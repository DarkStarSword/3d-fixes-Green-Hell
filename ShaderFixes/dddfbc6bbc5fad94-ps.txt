// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed dddfbc6bbc5fad94-ps.txt
// 3DMigoto: dddfbc6bbc5fad94 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 155 4 12
//   undeciphered1a: 13
//   Keywords { "FOG_VOID_BOX" "FOG_BLUR_ON" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 464
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 384 [_VolumetricFogSunWorldPos]
//   Vector 400 [_VolumetricFogSunShadowsData]
//   Float 416 [_Jitter]
//   Matrix 320 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:19:45 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[27], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 15
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r13.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed dddfbc6bbc5fad94-ps.txt

mul r13.w, -r13.x, r13.y
mad r14.xyz, -r13.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r14.y
mov r1.xz, r14.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.y, l(0.000010)
mul r0.yw, v1.xxxy, cb1[6].xxxy
dp2 r0.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.ywyy
frc r0.y, r0.y
add r0.y, r0.y, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.x
and r0.w, r0.w, r1.w
lt r1.w, r1.y, r0.z
lt r3.x, r0.x, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r2.xyzx, r2.xyzx
  sqrt r0.w, r0.w
  dp2 r1.w, r2.xzxx, r2.xzxx
  sqrt r1.w, r1.w
  div r3.xy, r2.xzxx, r1.wwww
  div r1.w, r1.w, r2.y
  max r2.w, r0.z, r1.y
  min r4.z, r2.w, cb0[13].y
  add r2.w, r1.y, -r4.z
  mul r2.w, r1.w, r2.w
  mad r4.xy, -r3.xyxx, r2.wwww, r14.xzxx
  min r2.w, r0.w, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xzyx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.z, r1.x, r2.w
  if_nz r1.z
    lt r1.z, l(0.000000), r1.w
    lt r3.z, l(-0.500000), r0.x
    and r1.z, r1.z, r3.z
    lt r3.z, r1.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r3.z
    and r0.x, r0.z, r0.x
    movc r5.y, r1.z, cb0[13].y, r0.x
    add r0.x, -r1.y, r5.y
    mul r0.x, r0.x, r1.w
    mad r5.xz, -r3.xxyx, r0.xxxx, r14.xxzx
    add r1.yzw, r4.xxzy, -r5.xxyz
    dp3 r0.x, r1.yzwy, r1.yzwy
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r2.w
    min r0.x, r0.z, r0.x
    lt r1.y, l(0.000000), r0.x
    if_nz r1.y
      mul r1.yzw, r2.xxyz, r0.xxxx
      div r1.yzw, r1.yyzw, r0.wwww
      add r1.yzw, r1.yyzw, r4.xxzy
      add r1.yzw, -r1.yyzw, cb0[17].xxyz
      mul r1.yzw, |r1.yyzw|, cb0[18].xxyz
      max r1.y, r1.z, r1.y
      max r1.y, r1.w, r1.y
      add r1.y, r1.y, l(-1.000000)
      mad_sat r1.y, cb0[18].w, r1.y, l(1.000000)
      lt r1.z, l(0.000000), r1.y
      if_nz r1.z
        log r1.z, r0.x
        mul r1.z, r1.z, l(0.693147182)
        max r1.z, r1.z, l(0.000000)
        mad r1.z, r1.z, cb0[15].x, l(0.100000)
        mul r1.z, r1.z, cb0[13].z
        mul_sat r1.w, r2.w, cb0[15].y
        mul r1.z, r1.w, r1.z
        max r1.z, r1.z, l(0.010000)
        mul r3.xyz, r1.zzzz, r2.xyzx
        div r3.xyz, r3.xyzx, r0.wwww
        div r1.z, r0.x, r1.z
        mul r5.xz, r3.xxzx, cb0[13].wwww
        mul r1.w, cb0[13].z, cb0[13].y
        div r5.y, r3.y, r1.w
        add r3.xy, r4.xyxx, cb0[14].xzxx
        mul r3.xy, r3.xyxx, cb0[13].wwww
        div r1.w, r4.z, r1.w
        frc r2.w, r0.y
        mad r1.z, r2.w, cb0[26].x, r1.z
        add r4.w, r4.z, cb0[13].x
        mul r6.xyz, r4.wwww, cb0[21].xywx
        mad r6.xyz, cb0[20].xywx, r4.xxxx, r6.xyzx
        mad r6.xyz, cb0[22].xywx, r4.yyyy, r6.xyzx
        add r6.xyz, r6.xyzx, cb0[23].xywx
        div r3.zw, r6.xxxy, r6.zzzz
        mad r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        mad r2.w, r0.y, cb0[25].y, l(1.000000)
        mul r2.w, r0.x, r2.w
        mul r2.xyz, r2.xyzx, r2.wwww
        div r2.xyz, r2.xyzx, r0.wwww
        add r2.xyz, r2.xyzx, r4.xwyx
        mul r6.xyz, r2.yyyy, cb0[21].xywx
        mad r6.xyz, cb0[20].xywx, r2.xxxx, r6.xyzx
        mad r6.xyz, cb0[22].xywx, r2.zzzz, r6.xyzx
        add r6.xyz, r6.xyzx, cb0[23].xywx
        div r6.xy, r6.xyxx, r6.zzzz
        mad r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r0.w, -r1.x, cb0[24].w
        mul_sat r0.w, r0.w, l(0.0285714287)
        mul r0.w, r0.w, cb0[25].x
        div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
        ge r0.x, r0.x, r0.z
        add r3.zw, r3.zzzw, -r6.xxxy
        add r4.xyz, -r2.xyzx, r4.xwyx
        mov r7.xyzw, l(0,0,0,0)
        mov r9.xz, r3.xxyx
        mov r0.z, r1.z
        mov r9.y, r1.w
        mov r8.xyzw, l(0,0,0,0)
        loop
          ge r4.w, l(1.000000), r0.z
          breakc_nz r4.w
          sample_l r10.xyzw, r9.xzxx, t2.xyzw, s1, l(0.000000)
          add r4.w, -|r9.y|, r10.w
          lt r5.w, l(0.000000), r4.w
          if_nz r5.w
            add r5.w, -r4.w, l(1.000000)
            mul r11.xyz, r5.wwww, cb0[11].xyzx
            mul r11.w, r4.w, l(0.400000)
            mul r4.w, r2.w, r0.z
            mad r6.zw, r4.wwww, r3.zzzw, r6.xxxy
            sample_l r12.xyzw, r6.zwzz, t3.xyzw, s5, l(0.000000)
            dp4 r5.w, r12.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            mad r12.xyz, r4.wwww, r4.xyzx, r2.xyzx
            add r12.xyz, r12.xyzx, -cb0[24].xyzx
            dp3 r4.w, r12.xyzx, r12.xyzx
            sqrt r4.w, r4.w
            add_sat r4.w, -r4.w, r5.w
            mul r5.w, r0.w, r8.w
            add r4.w, r4.w, l(-1.000000)
            mad r5.w, r5.w, r4.w, l(1.000000)
            mul r10.xyz, r5.wwww, r10.xyzx
            mad r4.w, cb0[25].z, r4.w, l(1.000000)
            mul r11.xyzw, r4.wwww, r11.xyzw
            mul r10.xyz, r10.xyzx, r11.wwww
            mul r11.xyz, r10.xyzx, r11.xyzx
            add r4.w, -r8.w, l(1.000000)
            mad r10.xyzw, r11.xyzw, r4.wwww, r8.xyzw
            lt r4.w, l(0.990000), r10.w
            if_nz r4.w
              mov r7.xyzw, r11.xyzw
              mov r8.xyzw, r10.xyzw
              break
            endif
            mov r7.xyzw, r11.xyzw
            mov r8.xyzw, r10.xyzw
          endif
          add r0.z, r0.z, l(-1.000000)
          add r9.xyz, r5.xyzx, r9.xyzx
        endloop
        lt r0.w, r8.w, l(0.990000)
        and r0.xw, r0.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
        add r1.z, -r8.w, l(1.000000)
        mul r0.x, r0.z, r0.x
        mul r0.z, r0.w, r1.z
        mul r0.x, r0.x, r0.z
        mad r2.xyzw, r7.xyzw, r0.xxxx, r8.xyzw
        mul r2.xyzw, r2.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r2.xyzw, r0.xxxx, r2.xyzw
        mul r1.xyzw, r1.yyyy, r2.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.y, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
sample r4.xyzw, v1.zwzz, t5.xyzw, s4
add r0.yzw, -r3.xxyz, r4.xxyz
mad r0.yzw, r2.wwww, r0.yyzw, r3.xxyz
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r0.yzwy, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used