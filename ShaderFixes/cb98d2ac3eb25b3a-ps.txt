// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed cb98d2ac3eb25b3a-ps.txt
// 3DMigoto: cb98d2ac3eb25b3a |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 154 4 14
//   undeciphered1a: 14
//   Keywords { "FOG_OF_WAR_ON" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 560
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 288 [_FogOfWarSize] 3
//   Vector 304 [_FogOfWarCenterAdjusted] 3
//   Vector 336 [_SunDir] 3
//   Vector 352 [_SunColor] 3
//   Vector 384 [_FogScatteringData2]
//   Vector 480 [_VolumetricFogSunWorldPos]
//   Vector 496 [_VolumetricFogSunShadowsData]
//   Float 512 [_Jitter]
//   Matrix 416 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   SetTexture 4 [_VolumetricFogSunDepthTexture] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:11:13 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[33], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed cb98d2ac3eb25b3a-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r15.y
mov r1.xz, r15.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, r0.z
lt r3.x, r0.y, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xw, r2.xxxz, cb0[18].xxxz
    add r0.xw, r0.xxxw, -cb0[19].xxxz
    sample r3.xyzw, r0.xwxx, t2.wxyz, s3
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r2.xyz, -r1.xyzx, r2.xwzx
    dp3 r0.x, r2.xyzx, r2.xyzx
    dp2 r0.w, r2.xzxx, r2.xzxx
    sqrt r0.xw, r0.xxxw
    div r3.yz, r2.xxzx, r0.wwww
    div r0.w, r0.w, r2.y
    max r1.w, r0.z, r1.y
    min r4.z, r1.w, cb0[13].y
    add r1.w, r1.y, -r4.z
    mul r1.w, r0.w, r1.w
    mad r4.xy, -r3.yzyy, r1.wwww, r15.xzxx
    min r1.w, r0.x, cb0[12].z
    add r5.xyz, -r1.xyzx, r4.xzyx
    dp3 r1.x, r5.xyzx, r5.xyzx
    sqrt r1.x, r1.x
    lt r1.z, r1.x, r1.w
    if_nz r1.z
      lt r1.z, l(0.000000), r0.w
      lt r2.w, l(-0.500000), r0.y
      and r1.z, r1.z, r2.w
      lt r2.w, r0.w, l(0.000000)
      lt r0.y, r0.y, l(0.500000)
      and r0.y, r0.y, r2.w
      and r0.y, r0.z, r0.y
      movc r5.y, r1.z, cb0[13].y, r0.y
      add r0.y, -r1.y, r5.y
      mul r0.y, r0.y, r0.w
      mad r5.xz, -r3.yyzy, r0.yyyy, r15.xxzx
      add r0.yzw, r4.xxzy, -r5.xxyz
      dp3 r0.y, r0.yzwy, r0.yzwy
      sqrt r0.y, r0.y
      add r0.z, -r1.x, r1.w
      min r0.y, r0.z, r0.y
      lt r0.w, l(0.000000), r0.y
      if_nz r0.w
        mul r1.yz, v1.xxyx, cb1[6].xxyx
        dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r1.yzyy
        frc r0.w, r0.w
        add r0.w, r0.w, l(-0.500000)
        log r1.y, r0.y
        mul r1.y, r1.y, l(0.693147182)
        max r1.y, r1.y, l(0.000000)
        mad r1.y, r1.y, cb0[15].x, l(0.100000)
        mul r1.y, r1.y, cb0[13].z
        mul_sat r1.z, r1.w, cb0[15].y
        mul r1.y, r1.z, r1.y
        max r1.y, r1.y, l(0.010000)
        mul r3.yzw, r1.yyyy, r2.xxyz
        div r3.yzw, r3.yyzw, r0.xxxx
        div r1.y, r0.y, r1.y
        mul r5.xz, r3.yywy, cb0[13].wwww
        mul r1.z, cb0[13].z, cb0[13].y
        div r5.y, r3.z, r1.z
        add r3.yz, r4.xxyx, cb0[14].xxzx
        mul r3.yz, r3.yyzy, cb0[13].wwww
        div r1.z, r4.z, r1.z
        frc r1.w, r0.w
        mad r1.y, r1.w, cb0[32].x, r1.y
        add r4.w, r4.z, cb0[13].x
        mul r6.xyz, r4.wwww, cb0[27].xywx
        mad r6.xyz, cb0[26].xywx, r4.xxxx, r6.xyzx
        mad r6.xyz, cb0[28].xywx, r4.yyyy, r6.xyzx
        add r6.xyz, r6.xyzx, cb0[29].xywx
        div r6.xy, r6.xyxx, r6.zzzz
        mad r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        mad r0.w, r0.w, cb0[31].y, l(1.000000)
        mul r0.w, r0.w, r0.y
        mul r7.xyz, r2.xyzx, r0.wwww
        div r7.xyz, r7.xyzx, r0.xxxx
        add r7.xyz, r4.xwyx, r7.xyzx
        mul r8.xyz, r7.yyyy, cb0[27].xywx
        mad r8.xyz, cb0[26].xywx, r7.xxxx, r8.xyzx
        mad r8.xyz, cb0[28].xywx, r7.zzzz, r8.xyzx
        add r8.xyz, r8.xyzx, cb0[29].xywx
        div r6.zw, r8.xxxy, r8.zzzz
        mad r6.zw, r6.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r0.w, -r1.x, cb0[30].w
        mul_sat r0.w, r0.w, l(0.0285714287)
        mul r0.w, r0.w, cb0[31].x
        div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
        ge r0.y, r0.y, r0.z
        add r6.xy, -r6.zwzz, r6.xyxx
        add r4.xyz, r4.xwyx, -r7.xyzx
        mov r8.xyzw, l(0,0,0,0)
        mov r10.xz, r3.yyzy
        mov r0.z, r1.y
        mov r10.y, r1.z
        mov r9.xyzw, l(0,0,0,0)
        loop
          ge r2.w, l(1.000000), r0.z
          breakc_nz r2.w
          sample_l r11.xyzw, r10.xzxx, t3.xyzw, s0, l(0.000000)
          add r2.w, -|r10.y|, r11.w
          lt r3.w, l(0.000000), r2.w
          if_nz r3.w
            add r3.w, -r2.w, l(1.000000)
            mul r12.xyz, r3.wwww, cb0[11].xyzx
            mul r12.w, r2.w, l(0.400000)
            mul r2.w, r1.w, r0.z
            mad r13.xy, r2.wwww, r6.xyxx, r6.zwzz
            sample_l r13.xyzw, r13.xyxx, t4.xyzw, s4, l(0.000000)
            dp4 r3.w, r13.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
            mad r13.xyz, r2.wwww, r4.xyzx, r7.xyzx
            add r13.xyz, r13.xyzx, -cb0[30].xyzx
            dp3 r2.w, r13.xyzx, r13.xyzx
            sqrt r2.w, r2.w
            add_sat r2.w, -r2.w, r3.w
            mul r3.w, r0.w, r9.w
            add r2.w, r2.w, l(-1.000000)
            mad r3.w, r3.w, r2.w, l(1.000000)
            mul r11.xyz, r3.wwww, r11.xyzx
            mad r2.w, cb0[31].z, r2.w, l(1.000000)
            mul r12.xyzw, r2.wwww, r12.xyzw
            mul r11.xyz, r11.xyzx, r12.wwww
            mul r12.xyz, r11.xyzx, r12.xyzx
            add r2.w, -r9.w, l(1.000000)
            mad r11.xyzw, r12.xyzw, r2.wwww, r9.xyzw
            lt r2.w, l(0.990000), r11.w
            if_nz r2.w
              mov r8.xyzw, r12.xyzw
              mov r9.xyzw, r11.xyzw
              break
            endif
            mov r8.xyzw, r12.xyzw
            mov r9.xyzw, r11.xyzw
          endif
          add r0.z, r0.z, l(-1.000000)
          add r10.xyz, r5.xyzx, r10.xyzx
        endloop
        lt r0.w, r9.w, l(0.990000)
        and r0.yw, r0.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
        add r1.y, -r9.w, l(1.000000)
        mul r0.y, r0.z, r0.y
        mul r0.z, r0.w, r1.y
        mul r0.y, r0.y, r0.z
        mad r4.xyzw, r8.xyzw, r0.yyyy, r9.xyzw
        div r0.xyz, r2.xyzx, r0.xxxx
        dp3 r0.x, r0.xyzx, cb0[21].xyzx
        mul r0.x, r0.x, cb0[24].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r4.w, r0.x
        add r0.yzw, -r4.xxyz, cb0[22].xxyz
        mad r4.xyz, r0.xxxx, r0.yzwy, r4.xyzx
        mul r0.xyzw, r4.xyzw, cb0[10].wwww
        add r1.x, -r1.x, cb0[12].z
        div_sat r1.x, r1.x, cb0[12].w
        mul r1.x, r1.x, r1.x
        mul r0.xyzw, r0.xyzw, r1.xxxx
        mul o0.xyzw, r3.xxxx, r0.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used