// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 880307fe40d9e21a-ps.txt
// 3DMigoto: 880307fe40d9e21a |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 125 4 14
//   undeciphered1a: 19
//   Keywords { "FOG_OF_WAR_ON" "FOG_POINT_LIGHT2" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 544
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 288 [_FogOfWarSize] 3
//   Vector 304 [_FogOfWarCenterAdjusted] 3
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_FogPointLightPosition2] 3
//   Vector 400 [_FogPointLightColor2] 3
//   Vector 432 [_SunDir] 3
//   Vector 448 [_SunColor] 3
//   Vector 480 [_FogScatteringData2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:34:24 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[31], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 21
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r19.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 880307fe40d9e21a-ps.txt

mul r19.w, -r19.x, r19.y
mad r20.xyz, -r19.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
sample r2.xyzw, v1.zwzz, t1.xyzw, s2
mad r1.y, cb1[7].x, r2.x, cb1[7].y
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
min r1.x, r1.y, r1.x
mov r1.yz, -cb0[13].xxyx
add r2.y, r1.y, r20.y
mov r2.xz, r20.xxzx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.y, r3.y, l(0.000010)
lt r1.w, cb0[13].y, r2.y
lt r2.w, cb0[13].y, r1.y
and r1.w, r1.w, r2.w
lt r2.w, r2.y, r1.z
lt r4.x, r1.y, r1.z
and r2.w, r2.w, r4.x
or r1.w, r1.w, r2.w
if_z r1.w
  lt r1.x, r1.x, cb0[16].w
  if_nz r1.x
    div r1.xw, r3.xxxz, cb0[18].xxxz
    add r1.xw, r1.xxxw, -cb0[19].xxxz
    sample r4.xyzw, r1.xwxx, t2.wxyz, s3
    ge r1.x, l(0.000000), r4.x
  else
    mov r4.x, l(1.000000)
    mov r1.x, l(0)
  endif
  if_z r1.x
    add r3.w, r3.y, l(0.000010)
    add r3.xyz, -r2.xyzx, r3.xwzx
    dp3 r1.x, r3.xyzx, r3.xyzx
    dp2 r1.w, r3.xzxx, r3.xzxx
    sqrt r1.xw, r1.xxxw
    div r4.yz, r3.xxzx, r1.wwww
    div r1.w, r1.w, r3.y
    max r2.w, r1.z, r2.y
    min r5.y, r2.w, cb0[13].y
    add r2.w, r2.y, -r5.y
    mul r2.w, r1.w, r2.w
    mad r5.xz, -r4.yyzy, r2.wwww, r20.xxzx
    min r2.w, r1.x, cb0[12].z
    add r6.xyz, -r2.xyzx, r5.xyzx
    dp3 r2.x, r6.xyzx, r6.xyzx
    sqrt r2.x, r2.x
    lt r2.z, r2.x, r2.w
    if_nz r2.z
      lt r2.z, l(0.000000), r1.w
      lt r3.w, l(-0.500000), r1.y
      and r2.z, r2.z, r3.w
      lt r3.w, r1.w, l(0.000000)
      lt r1.y, r1.y, l(0.500000)
      and r1.y, r1.y, r3.w
      and r1.y, r1.z, r1.y
      movc r6.y, r2.z, cb0[13].y, r1.y
      add r1.y, -r2.y, r6.y
      mul r1.y, r1.y, r1.w
      mad r6.xz, -r4.yyzy, r1.yyyy, r20.xxzx
      add r1.yzw, r5.xxyz, -r6.xxyz
      dp3 r1.y, r1.yzwy, r1.yzwy
      sqrt r1.y, r1.y
      add r1.z, -r2.x, r2.w
      min r1.y, r1.z, r1.y
      lt r1.w, l(0.000000), r1.y
      if_nz r1.w
        log r1.w, r1.y
        mul r1.w, r1.w, l(0.693147182)
        max r1.w, r1.w, l(0.000000)
        mad r1.w, r1.w, cb0[15].x, l(0.100000)
        mul r1.w, r1.w, cb0[13].z
        mul_sat r2.y, r2.w, cb0[15].y
        mul r1.w, r1.w, r2.y
        max r1.w, r1.w, l(0.010000)
        mul r2.yzw, r1.wwww, r3.xxyz
        div r2.yzw, r2.yyzw, r1.xxxx
        div r1.w, r1.y, r1.w
        add r4.yzw, r5.xxyz, -cb0[20].xxyz
        add r6.xyz, r5.xyzx, -cb0[22].xyzx
        add r7.xyz, r5.xyzx, -cb0[24].xyzx
        mul r8.xz, r2.yywy, cb0[13].wwww
        mul r3.w, cb0[13].z, cb0[13].y
        div r8.y, r2.z, r3.w
        add r5.xz, r5.xxzx, cb0[14].xxzx
        mul r5.xz, r5.xxzx, cb0[13].wwww
        div r3.w, r5.y, r3.w
        ge r1.y, r1.y, r1.z
        mov r9.xyzw, l(0,0,0,0)
        mov r10.xyz, r4.yzwy
        mov r11.xyz, r6.xyzx
        mov r12.xyz, r7.xyzx
        mov r14.xz, r5.xxzx
        mov r1.z, r1.w
        mov r14.y, r3.w
        mov r13.xyzw, l(0,0,0,0)
        loop
          ge r5.y, l(1.000000), r1.z
          breakc_nz r5.y
          sample_l r15.xyzw, r14.xzxx, t3.xyzw, s0, l(0.000000)
          add r5.y, -|r14.y|, r15.w
          lt r5.w, l(0.000000), r5.y
          if_nz r5.w
            add r5.w, -r5.y, l(1.000000)
            mul r16.xyz, r5.wwww, cb0[11].xyzx
            mul r17.w, r5.y, l(0.400000)
            dp3 r5.y, r10.xyzx, r10.xyzx
            div r5.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
            dp3 r5.w, r11.xyzx, r11.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            dp3 r6.w, r12.xyzx, r12.xyzx
            div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
            mul r18.xyz, r5.wwww, cb0[23].xyzx
            mad r18.xyz, cb0[25].xyzx, r6.wwww, r18.xyzx
            mad r18.xyz, cb0[21].xyzx, r5.yyyy, r18.xyzx
            mad r15.xyz, r18.xyzx, r17.wwww, r15.xyzx
            mul r15.xyz, r17.wwww, r15.xyzx
            mul r17.xyz, r15.xyzx, r16.xyzx
            add r5.y, -r13.w, l(1.000000)
            mad r15.xyzw, r17.xyzw, r5.yyyy, r13.xyzw
            lt r5.y, l(0.990000), r15.w
            if_nz r5.y
              mov r9.xyzw, r17.xyzw
              mov r13.xyzw, r15.xyzw
              break
            endif
            mov r9.xyzw, r17.xyzw
            mov r13.xyzw, r15.xyzw
          endif
          add r10.xyz, r2.yzwy, r10.xyzx
          add r11.xyz, r2.yzwy, r11.xyzx
          add r12.xyz, r2.yzwy, r12.xyzx
          add r1.z, r1.z, l(-1.000000)
          add r14.xyz, r8.xyzx, r14.xyzx
        endloop
        lt r1.w, r13.w, l(0.990000)
        and r1.yw, r1.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
        add r2.y, -r13.w, l(1.000000)
        mul r1.y, r1.z, r1.y
        mul r1.z, r1.w, r2.y
        mul r1.y, r1.y, r1.z
        mad r5.xyzw, r9.xyzw, r1.yyyy, r13.xyzw
        div r1.xyz, r3.xyzx, r1.xxxx
        dp3 r1.x, r1.xyzx, cb0[27].xyzx
        mul r1.x, r1.x, cb0[30].w
        max r1.x, r1.x, l(0.000000)
        mul r1.x, r1.x, r1.x
        mul r1.x, r1.x, r1.x
        mul r1.x, r1.x, r1.x
        mul r1.x, r5.w, r1.x
        add r1.yzw, -r5.xxyz, cb0[28].xxyz
        mad r5.xyz, r1.xxxx, r1.yzwy, r5.xyzx
        mul r1.xyzw, r5.xyzw, cb0[10].wwww
        add r2.x, -r2.x, cb0[12].z
        div_sat r2.x, r2.x, cb0[12].w
        mul r2.x, r2.x, r2.x
        mul r1.xyzw, r1.xyzw, r2.xxxx
        mul o0.xyzw, r4.xxxx, r1.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used