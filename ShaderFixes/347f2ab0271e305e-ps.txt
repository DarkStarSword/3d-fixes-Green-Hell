// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 347f2ab0271e305e-ps.txt
// 3DMigoto: 347f2ab0271e305e |    Unity headers extracted from Hidden_HxVolumetricDirectionalLight
//    Shader "Hidden/HxVolumetricDirectionalLight" {
//      SubShader 1/1 {
//        Pass 3/3 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Hidden_HxVolumetricDirectionalLight:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 208 0 21
//   undeciphered1a: 11
//   Keywords { "SHADOWS_OFF" "HEIGHTFOG_ON" }
//   undeciphered2: 1 2 3 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 6000
//   Vector 224 [Phase]
//   Vector 240 [Phase2]
//   Vector 256 [Density]
//   Vector 272 [FogHeights] 3
//   Vector 928 [hxVolumeSettingsOld0] 2
//   Vector 936 [hxVolumeSettingsOld1] 2
//   Vector 944 [hxVolumeSettingsOld2] 2
//   Vector 952 [hxVolumeSettingsOld3] 2
//   Vector 960 [hxVolumeSettingsOld4] 2
//   Vector 968 [hxVolumeSettingsOld5] 2
//   Vector 976 [hxVolumeSettingsOld6] 2
//   Vector 984 [hxVolumeSettingsOld7] 2
//   Vector 992 [hxVolumeSettingsOld8] 2
//   Vector 1000 [hxVolumeSettingsOld9] 2
//   Float 5152 [hxRayOffset]
//   Float 5156 [HxTileSize]
//   Float 5648 [FirstLight]
//   Vector 5744 [ShadowBias] 3
//   Vector 5840 [_SpotLightParams]
//   Vector 5856 [CameraFoward] 3
//   Float 5868 [VolumeScale]
//   Float 5872 [ExtinctionEffect]
//   Vector 5876 [LightColour] 3
//   Vector 5888 [LightColour2] 3
//   Float 5920 [TintPercent]
//   Vector 5924 [MaxRayDistance] 2
//   Vector 5984 [SunSize] 2
//   Matrix 288 [hxVolumeMatrixOld0]
//   Matrix 352 [hxVolumeMatrixOld1]
//   Matrix 416 [hxVolumeMatrixOld2]
//   Matrix 480 [hxVolumeMatrixOld3]
//   Matrix 544 [hxVolumeMatrixOld4]
//   Matrix 608 [hxVolumeMatrixOld5]
//   Matrix 672 [hxVolumeMatrixOld6]
//   Matrix 736 [hxVolumeMatrixOld7]
//   Matrix 800 [hxVolumeMatrixOld8]
//   Matrix 864 [hxVolumeMatrixOld9]
//   Matrix 5168 [InverseProjectionMatrix]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerCameraRare" 352
//   Matrix 288 [unity_CameraToWorld]
//   SetTexture 0 [VolumetricDepth] 2D 0
//   SetTexture 1 [Tile5x5] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerCameraRare" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:48:00 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[375], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r11.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 347f2ab0271e305e-ps.txt

mul r11.w, -r11.x, r11.y
mad r12.xyz, -r11.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
mad r1.xy, r1.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, r1.yyyy, cb0[324].xyzw
mad r1.xyzw, cb0[323].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[325].xyzw
add r1.xyzw, r1.xyzw, cb0[326].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb2[19].xyzx
mad r1.xyw, cb2[18].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb2[20].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb2[21].xyzx
add r2.xyz, -r1.xyzx, r12.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, cb0[366].xyzx, -r2.xyzx
div r0.w, cb1[5].y, r0.w
mad r2.xyz, -r2.xyzx, r0.wwww, r12.xyzx
mad r1.xyz, cb0[365].xyzx, cb0[359].xxxx, r1.xyzx
add r1.xyz, -r1.xyzx, r2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
div r1.xyz, r1.xyzx, r0.wwww
min r0.w, r0.w, cb0[370].z
min r1.w, r0.w, cb0[370].y
add r0.w, r0.w, -r1.w
min r2.w, cb0[16].y, l(128.000000)
ftoi r3.x, r2.w
round_z r2.w, r2.w
div r3.y, r1.w, r2.w
mul r3.zw, cb0[366].wwww, cb1[6].xxxy
mul r0.xy, r0.xyxx, r3.zwzz
div r0.xy, r0.xyxx, cb0[322].yyyy
ge r3.zw, r0.xxxy, -r0.xxxy
frc r0.xy, |r0.xyxx|
movc r0.xy, r3.zwzz, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[322].yyyy
div r0.xy, r0.xyxx, cb0[322].yyyy
sample_l r4.xyzw, r0.xyxx, t1.xyzw, s1, l(0.000000)
add r0.x, r4.x, cb0[322].x
frc r0.x, r0.x
mul r0.y, r0.x, r3.y
mad r2.xyz, -r0.yyyy, r1.xyzx, r2.xyzx
dp3 r0.y, cb0[365].xyzx, r1.xyzx
lt r0.z, l(0.990000), r0.z
and r0.z, r0.z, l(0x3f800000)
mad r3.z, -cb0[15].w, r0.y, cb0[15].z
log r3.z, r3.z
mul r3.z, r3.z, l(1.500000)
exp r3.z, r3.z
max r3.z, r3.z, l(0.000100)
div r3.z, cb0[15].y, r3.z
mul r3.z, r3.z, cb0[15].x
mul r3.z, r3.z, cb0[374].x
max r0.z, r0.z, cb0[374].y
mul r0.z, r0.z, r3.z
min r0.z, r0.z, l(100.000000)
mad r3.z, -cb0[14].w, r0.y, cb0[14].z
log r3.z, r3.z
mul r3.z, r3.z, l(1.500000)
exp r3.z, r3.z
div r3.z, cb0[14].y, r3.z
mul r3.z, r3.z, cb0[14].x
max r0.z, r0.z, r3.z
add r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, cb0[370].x
mul_sat r0.y, r0.y, l(0.500000)
add r4.xyz, cb0[367].yzwy, -cb0[368].xyzx
mad r4.xyz, r0.yyyy, r4.xyzx, cb0[368].xyzx
add r0.y, -cb0[17].y, cb0[17].x
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r3.z, -cb0[17].z, l(1.000000)
mov r5.z, l(0)
mov r6.xyz, r2.xyzx
mov r3.w, l(0)
mov r4.w, l(0)
mov r5.w, l(0)
loop
  ige r6.w, r5.w, r3.x
  breakc_nz r6.w
  add r6.w, r6.y, -cb0[17].y
  mul_sat r6.w, r0.y, r6.w
  mad r7.x, r6.w, l(-2.000000), l(3.000000)
  mul r6.w, r6.w, r6.w
  mul r6.w, r6.w, r7.x
  mad r6.w, r6.w, r3.z, cb0[17].z
  mul r6.w, r6.w, cb0[16].x
  mov r7.x, r6.w
  mov r7.yzw, l(0,0,0,0)
  loop
    ige r8.x, r7.z, l(10)
    mov r7.w, l(0)
    breakc_nz r8.x
    eq r8.x, l(-1.000000), cb0[r7.z + 58].y
    if_nz r8.x
      mov r7.xy, r7.xxxx
      mov r7.w, l(-1)
      break
    endif
    ishl r8.y, r7.z, l(2)
    mul r9.xyz, r6.yyyy, cb0[r8.y + 19].xyzx
    mad r9.xyz, cb0[r8.y + 18].xyzx, r6.xxxx, r9.xyzx
    mad r9.xyz, cb0[r8.y + 20].xyzx, r6.zzzz, r9.xyzx
    add r8.yzw, r9.xxyz, cb0[r8.y + 21].xxyz
    lt r9.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r8.yzwy
    lt r10.xyz, r8.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r9.x, r9.x, r10.x
    and r9.x, r9.y, r9.x
    and r9.x, r10.y, r9.x
    and r9.x, r9.z, r9.x
    and r9.x, r10.z, r9.x
    if_nz r9.x
      ge r9.x, l(3.000000), cb0[r7.z + 58].y
      if_nz r9.x
        max r9.x, r7.x, cb0[r7.z + 58].x
        add r9.y, r7.x, cb0[r7.z + 58].x
        min r9.z, r7.x, cb0[r7.z + 58].x
        eq r10.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r7.z + 58].yyyy
        add r9.w, r7.x, -cb0[r7.z + 58].x
        movc r9.w, r10.w, r9.w, r7.x
        movc r9.z, r10.z, r9.z, r9.w
        movc r9.y, r10.y, r9.y, r9.z
        movc r5.x, r10.x, r9.x, r9.y
      else
        ge r9.x, l(7.000000), cb0[r7.z + 58].y
        dp3 r8.z, r8.yzwy, r8.yzwy
        sqrt r8.z, r8.z
        lt r8.z, r8.z, l(0.500000)
        and r8.z, r8.z, r9.x
        if_nz r8.z
          max r8.z, r7.x, cb0[r7.z + 58].x
          add r9.x, r7.x, cb0[r7.z + 58].x
          min r9.y, r7.x, cb0[r7.z + 58].x
          eq r10.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r7.z + 58].yyyy
          add r9.z, r7.x, -cb0[r7.z + 58].x
          movc r9.z, r10.w, r9.z, r7.x
          movc r9.y, r10.z, r9.y, r9.z
          movc r9.x, r10.y, r9.x, r9.y
          movc r5.x, r10.x, r8.z, r9.x
        else
          ge r8.z, l(11.000000), cb0[r7.z + 58].y
          dp2 r8.y, r8.ywyy, r8.ywyy
          sqrt r8.y, r8.y
          lt r8.y, r8.y, l(0.500000)
          and r8.y, r8.y, r8.z
          max r8.z, r7.x, cb0[r7.z + 58].x
          add r8.w, r7.x, cb0[r7.z + 58].x
          min r9.x, r7.x, cb0[r7.z + 58].x
          eq r10.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r7.z + 58].yyyy
          add r9.y, r7.x, -cb0[r7.z + 58].x
          movc r9.y, r10.w, r9.y, r7.x
          movc r9.x, r10.z, r9.x, r9.y
          movc r8.w, r10.y, r8.w, r9.x
          movc r8.z, r10.x, r8.z, r8.w
          movc r5.x, r8.y, r8.z, r7.x
        endif
      endif
    else
      mov r5.x, r7.x
    endif
    iadd r5.y, r7.z, l(1)
    mov r7.xyz, r5.xzyx
    mov r7.w, r8.x
  endloop
  movc r5.x, r7.w, r7.y, r7.x
  mul r5.y, r5.x, cb0[16].w
  mad r4.w, r5.y, r3.y, r4.w
  mul r5.y, r4.w, l(-1.442695)
  exp r5.y, r5.y
  mul r5.x, r3.y, r5.x
  mul r5.x, r5.y, r5.x
  mul r5.x, r0.z, r5.x
  max r5.x, r5.x, l(0.000000)
  add r3.w, r3.w, r5.x
  mad r6.xyz, -r1.xyzx, r3.yyyy, r6.xyzx
  iadd r5.w, r5.w, l(1)
endloop
lt r2.x, l(0.000000), r0.w
if_nz r2.x
  add r1.w, r1.w, r3.y
  mad r2.xyz, -r1.xyzx, r1.wwww, r12.xyzx
  div r0.w, r0.w, r2.w
  mul r0.x, r0.x, r0.w
  mad r2.xyz, -r0.xxxx, r1.xyzx, r2.xyzx
  mov r5.z, l(0)
  mov r6.xyz, r2.xyzx
  mov r0.x, r3.w
  mov r1.w, r4.w
  mov r2.w, l(0)
  loop
    ige r3.y, r2.w, r3.x
    breakc_nz r3.y
    add r3.y, r6.y, -cb0[17].y
    mul_sat r3.y, r0.y, r3.y
    mad r5.w, r3.y, l(-2.000000), l(3.000000)
    mul r3.y, r3.y, r3.y
    mul r3.y, r3.y, r5.w
    mad r3.y, r3.y, r3.z, cb0[17].z
    mul r3.y, r3.y, cb0[16].x
    mov r7.x, r3.y
    mov r7.yz, l(0,0,0,0)
    mov r5.w, l(0)
    loop
      ige r6.w, r7.z, l(10)
      mov r5.w, l(0)
      breakc_nz r6.w
      eq r6.w, l(-1.000000), cb0[r7.z + 58].y
      if_nz r6.w
        mov r7.xy, r7.xxxx
        mov r5.w, l(-1)
        break
      endif
      ishl r7.w, r7.z, l(2)
      mul r8.xyz, r6.yyyy, cb0[r7.w + 19].xyzx
      mad r8.xyz, cb0[r7.w + 18].xyzx, r6.xxxx, r8.xyzx
      mad r8.xyz, cb0[r7.w + 20].xyzx, r6.zzzz, r8.xyzx
      add r8.xyz, r8.xyzx, cb0[r7.w + 21].xyzx
      lt r9.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r8.xyzx
      lt r10.xyz, r8.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      and r7.w, r9.x, r10.x
      and r7.w, r9.y, r7.w
      and r7.w, r10.y, r7.w
      and r7.w, r9.z, r7.w
      and r7.w, r10.z, r7.w
      if_nz r7.w
        ge r7.w, l(3.000000), cb0[r7.z + 58].y
        if_nz r7.w
          max r7.w, r7.x, cb0[r7.z + 58].x
          add r8.w, r7.x, cb0[r7.z + 58].x
          min r9.x, r7.x, cb0[r7.z + 58].x
          eq r10.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r7.z + 58].yyyy
          add r9.y, r7.x, -cb0[r7.z + 58].x
          movc r9.y, r10.w, r9.y, r7.x
          movc r9.x, r10.z, r9.x, r9.y
          movc r8.w, r10.y, r8.w, r9.x
          movc r5.x, r10.x, r7.w, r8.w
        else
          ge r7.w, l(7.000000), cb0[r7.z + 58].y
          dp3 r8.y, r8.xyzx, r8.xyzx
          sqrt r8.y, r8.y
          lt r8.y, r8.y, l(0.500000)
          and r7.w, r7.w, r8.y
          if_nz r7.w
            max r7.w, r7.x, cb0[r7.z + 58].x
            add r8.y, r7.x, cb0[r7.z + 58].x
            min r8.w, r7.x, cb0[r7.z + 58].x
            eq r9.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r7.z + 58].yyyy
            add r10.x, r7.x, -cb0[r7.z + 58].x
            movc r9.w, r9.w, r10.x, r7.x
            movc r8.w, r9.z, r8.w, r9.w
            movc r8.y, r9.y, r8.y, r8.w
            movc r5.x, r9.x, r7.w, r8.y
          else
            ge r7.w, l(11.000000), cb0[r7.z + 58].y
            dp2 r8.x, r8.xzxx, r8.xzxx
            sqrt r8.x, r8.x
            lt r8.x, r8.x, l(0.500000)
            and r7.w, r7.w, r8.x
            max r8.x, r7.x, cb0[r7.z + 58].x
            add r8.y, r7.x, cb0[r7.z + 58].x
            min r8.z, r7.x, cb0[r7.z + 58].x
            eq r9.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r7.z + 58].yyyy
            add r8.w, r7.x, -cb0[r7.z + 58].x
            movc r8.w, r9.w, r8.w, r7.x
            movc r8.z, r9.z, r8.z, r8.w
            movc r8.y, r9.y, r8.y, r8.z
            movc r8.x, r9.x, r8.x, r8.y
            movc r5.x, r7.w, r8.x, r7.x
          endif
        endif
      else
        mov r5.x, r7.x
      endif
      iadd r5.y, r7.z, l(1)
      mov r7.xyz, r5.xzyx
      mov r5.w, r6.w
    endloop
    movc r3.y, r5.w, r7.y, r7.x
    mul r5.x, r3.y, cb0[16].w
    mad r1.w, r5.x, r0.w, r1.w
    mul r5.x, r1.w, l(-1.442695)
    exp r5.x, r5.x
    mul r3.y, r0.w, r3.y
    mul r3.y, r5.x, r3.y
    mul r3.y, r0.z, r3.y
    max r3.y, r3.y, l(0.000000)
    add r0.x, r0.x, r3.y
    mad r6.xyz, -r1.xyzx, r0.wwww, r6.xyzx
    iadd r2.w, r2.w, l(1)
  endloop
  mov r3.w, r0.x
  mov r4.w, r1.w
endif
mul r0.x, r4.w, l(-1.442695)
exp r0.x, r0.x
min r0.x, r0.x, l(1.000000)
mul o0.xyz, r3.wwww, r4.xyzx
add r0.y, -cb0[367].x, l(1.000000)
add r0.z, -r0.x, l(1.000000)
mad r0.x, r0.y, r0.z, r0.x
add r0.x, -r0.x, l(1.000000)
mul o0.w, r0.x, cb0[353].x
ret
// Approximately 0 instruction slots used