// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 5ada91b0f3ea8d9d-ps.txt
// 3DMigoto: 5ada91b0f3ea8d9d |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 150 2 8
//   undeciphered1a: 20
//   Keywords { "FOG_AREA_BOX" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 384 [_SunDir] 3
//   Vector 400 [_SunColor] 3
//   Vector 432 [_FogScatteringData2]
//   Vector 528 [_VolumetricFogSunWorldPos]
//   Vector 544 [_VolumetricFogSunShadowsData]
//   Float 560 [_Jitter]
//   Matrix 464 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:07:23 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 22
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r20.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 5ada91b0f3ea8d9d-ps.txt

mul r20.w, -r20.x, r20.y
mad r21.xyz, -r20.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.z, -cb0[13].x, r21.z
mov r2.xy, r21.xyxx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.z, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.zwzz
and r3.x, r3.y, r3.x
lt r3.y, r2.z, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.z, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xywx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[17].xyzx
  div r4.xyz, r1.wwww, r1.xyzx
  div r5.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r6.xyz, -r3.xyzx, -r5.xyzx
  mul r6.xyz, r4.xyzx, r6.xyzx
  add r3.xyz, -r3.xyzx, r5.xyzx
  mul r3.xyz, r3.xyzx, r4.xyzx
  min r5.xyz, r6.xyzx, r3.xyzx
  max r5.xy, r5.yzyy, r5.xxxx
  max r2.w, r5.y, r5.x
  max r2.w, r2.w, l(0.000000)
  max r3.xyz, r6.xyzx, r3.xyzx
  min r3.xy, r3.yzyy, r3.xxxx
  min r3.x, r3.y, r3.x
  min r3.y, r1.w, cb0[12].z
  min r3.x, r3.y, r3.x
  add r3.x, -r2.w, r3.x
  lt r3.z, l(0.000000), r3.x
  if_nz r3.z
    mul r3.zw, v1.xxxy, cb1[6].xxxy
    dp2 r3.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.zwzz
    frc r3.z, r3.z
    add r3.z, r3.z, l(-0.500000)
    div r4.xyz, r2.wwww, r4.xyzx
    add r4.xyz, r2.xyzx, r4.xyzx
    div r2.xy, cb0[18].xyxx, cb0[13].wwww
    log r2.z, r3.x
    mul r2.z, r2.z, l(0.693147182)
    max r2.z, r2.z, l(0.000000)
    mad r2.z, r2.z, cb0[15].x, l(0.100000)
    mul r2.z, r2.z, cb0[13].z
    mul_sat r3.w, r3.y, cb0[15].y
    mul r2.z, r2.z, r3.w
    add r3.y, -r2.w, r3.y
    max r2.z, r2.z, l(0.010000)
    mul r5.xyz, r1.xyzx, r2.zzzz
    div r5.xyz, r5.xyzx, r1.wwww
    div r2.z, r3.x, r2.z
    add r6.xyz, r4.xyzx, -cb0[19].xyzx
    add r7.xyz, r4.xyzx, -cb0[21].xyzx
    mul r8.xy, r5.xyxx, cb0[13].wwww
    mul r3.w, cb0[13].z, cb0[13].y
    div r8.z, r5.z, r3.w
    add r9.xy, r4.xyxx, cb0[14].xzxx
    mul r9.xy, r9.xyxx, cb0[13].wwww
    div r3.w, r4.z, r3.w
    add r9.zw, cb0[14].xxxy, cb0[17].xxxy
    frc r5.w, r3.z
    mad r2.z, r5.w, cb0[35].x, r2.z
    add r4.w, r4.z, cb0[13].x
    mul r10.xyz, r4.yyyy, cb0[30].xywx
    mad r10.xyz, cb0[29].xywx, r4.xxxx, r10.xyzx
    mad r10.xyz, cb0[31].xywx, r4.wwww, r10.xyzx
    add r10.xyz, r10.xyzx, cb0[32].xywx
    div r10.xy, r10.xyxx, r10.zzzz
    mad r10.xy, r10.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r3.z, r3.z, cb0[34].y, l(1.000000)
    mul r3.z, r3.z, r3.x
    mul r11.xyz, r1.xyzx, r3.zzzz
    div r11.xyz, r11.xyzx, r1.wwww
    add r11.xyz, r4.xywx, r11.xyzx
    mul r12.xyz, r11.yyyy, cb0[30].xywx
    mad r12.xyz, cb0[29].xywx, r11.xxxx, r12.xyzx
    mad r12.xyz, cb0[31].xywx, r11.zzzz, r12.xyzx
    add r12.xyz, r12.xyzx, cb0[32].xywx
    div r10.zw, r12.xxxy, r12.zzzz
    mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    add r2.w, -r2.w, cb0[33].w
    mul_sat r2.w, r2.w, l(0.0285714287)
    mul r2.w, r2.w, cb0[34].x
    div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
    ge r3.x, r3.x, r3.y
    and r3.x, r3.x, l(0x3f800000)
    add r10.xy, -r10.zwzz, r10.xyxx
    add r4.xyz, r4.xywx, -r11.xyzx
    mov r12.xyzw, l(0,0,0,0)
    mov r13.xyz, r6.xyzx
    mov r14.xyz, r7.xyzx
    mov r16.xy, r9.xyxx
    mov r3.y, r2.z
    mov r16.z, r3.w
    mov r15.xyzw, l(0,0,0,0)
    loop
      ge r4.w, l(1.000000), r3.y
      breakc_nz r4.w
      mad r17.xy, r9.zwzz, cb0[13].wwww, -r16.xyxx
      mul r17.xy, r2.xyxx, |r17.xyxx|
      max r4.w, r17.y, r17.x
      sample_l r17.xyzw, r16.xyxx, t1.xyzw, s0, l(0.000000)
      mad r4.w, r4.w, cb0[18].w, |r16.z|
      add r4.w, -r4.w, r17.w
      lt r5.w, l(0.000000), r4.w
      if_nz r5.w
        add r5.w, -r4.w, l(1.000000)
        mul r18.xyz, r5.wwww, cb0[11].xyzx
        mul r18.w, r4.w, l(0.400000)
        mul r4.w, r3.z, r3.y
        mad r19.xy, r4.wwww, r10.xyxx, r10.zwzz
        sample_l r19.xyzw, r19.xyxx, t2.xyzw, s2, l(0.000000)
        dp4 r5.w, r19.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        mad r19.xyz, r4.wwww, r4.xyzx, r11.xyzx
        add r19.xyz, r19.xyzx, -cb0[33].xyzx
        dp3 r4.w, r19.xyzx, r19.xyzx
        sqrt r4.w, r4.w
        add_sat r4.w, -r4.w, r5.w
        mul r5.w, r2.w, r15.w
        add r4.w, r4.w, l(-1.000000)
        mad r5.w, r5.w, r4.w, l(1.000000)
        mad r4.w, cb0[34].z, r4.w, l(1.000000)
        mul r18.xyzw, r4.wwww, r18.xyzw
        dp3 r4.w, r13.xyzx, r13.xyzx
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        dp3 r6.w, r14.xyzx, r14.xyzx
        div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
        mul r19.xyz, r4.wwww, cb0[20].xyzx
        mad r19.xyz, cb0[22].xyzx, r6.wwww, r19.xyzx
        mul r19.xyz, r18.wwww, r19.xyzx
        mad r17.xyz, r17.xyzx, r5.wwww, r19.xyzx
        mul r17.xyz, r18.wwww, r17.xyzx
        mul r18.xyz, r17.xyzx, r18.xyzx
        add r4.w, -r15.w, l(1.000000)
        mad r17.xyzw, r18.xyzw, r4.wwww, r15.xyzw
        lt r4.w, l(0.990000), r17.w
        if_nz r4.w
          mov r12.xyzw, r18.xyzw
          mov r15.xyzw, r17.xyzw
          break
        endif
        mov r12.xyzw, r18.xyzw
        mov r15.xyzw, r17.xyzw
      endif
      add r13.xyz, r5.xyzx, r13.xyzx
      add r14.xyz, r5.xyzx, r14.xyzx
      add r3.y, r3.y, l(-1.000000)
      add r16.xyz, r8.xyzx, r16.xyzx
    endloop
    lt r2.x, r15.w, l(0.990000)
    and r2.x, r2.x, l(0x3f800000)
    add r2.y, -r15.w, l(1.000000)
    mul r2.z, r3.y, r3.x
    mul r2.x, r2.y, r2.x
    mul r2.x, r2.z, r2.x
    mad r2.xyzw, r12.xyzw, r2.xxxx, r15.xyzw
    div r1.xyz, r1.xyzx, r1.wwww
    dp3 r1.x, r1.xyzx, cb0[24].xyzx
    mul r1.x, r1.x, cb0[27].w
    max r1.x, r1.x, l(0.000000)
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r1.x, r2.w, r1.x
    add r1.yzw, -r2.xxyz, cb0[25].xxyz
    mad r2.xyz, r1.xxxx, r1.yzwy, r2.xyzx
    mul o0.xyzw, r2.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used