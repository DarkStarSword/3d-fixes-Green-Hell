// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d6781a55fc95d6c8-ps.txt
// 3DMigoto: d6781a55fc95d6c8 |    Unity headers extracted from Custom_Hair
//    Shader "Custom/Hair" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="AlphaTest+0" "RenderType"="TreeTransparentCutout" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDBASE" "QUEUE"="AlphaTest+0" "RenderType"="TreeTransparentCutout" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Custom_Hair:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 217 7 8
//   undeciphered1a: 16
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" }
//   undeciphered2: 1 6 8 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 176
//   Vector 32 [_LightColor0]
//   Float 64 [_NormalIntensity]
//   Vector 80 [_TillingOffset]
//   Vector 96 [_AlbedoTint]
//   Vector 112 [_AdditionalTint]
//   Vector 128 [_SpecularTint]
//   Float 144 [_AnisotropyX]
//   Float 148 [_AnisotropyY]
//   Float 152 [_SpacularIntensity]
//   Float 156 [_Cutoff]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 624 [unity_SHAr]
//   Vector 640 [unity_SHAg]
//   Vector 656 [unity_SHAb]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_NormalMap] 2D 3
//   SetTexture 1 [_PackRAlbedoGAdditionalMaskBSpecular] 2D 4
//   SetTexture 2 [_ShadowMapTexture] 2D 2
//   SetTexture 3 [unity_SpecCube0] CUBE 0
//   SetTexture 4 [unity_SpecCube1] CUBE -1
//   SetTexture 5 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerFrame" 4
//   BindCB "UnityFog" 5
//   BindCB "UnityReflectionProbes" 6
//   BindCB "UnityProbeVolume" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:16:24 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 6     z         1     NONE   float     z
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   x
// TEXCOORD                 4   xyzw        6     NONE   float   xy w
// TEXCOORD                 5   xyz         7     NONE   float   xyz
// TEXCOORD                 7   xyzw        8     NONE   float   xy w
// TEXCOORD                 8   xyzw        9     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 9.000000, 0, 0, 0},
                              { 3.000000, 0, 0, 0},
                              { 11.000000, 0, 0, 0},
                              { 13.000000, 0, 0, 0},
                              { 5.000000, 0, 0, 0},
                              { 15.000000, 0, 0, 0},
                              { 7.000000, 0, 0, 0},
                              { 4.000000, 0, 0, 0},
                              { 12.000000, 0, 0, 0},
                              { 2.000000, 0, 0, 0},
                              { 10.000000, 0, 0, 0},
                              { 16.000000, 0, 0, 0},
                              { 8.000000, 0, 0, 0},
                              { 14.000000, 0, 0, 0},
                              { 6.000000, 0, 0, 0} }
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_constantbuffer cb5[2], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_constantbuffer cb7[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.x
dcl_input_ps linear v6.xyw
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyw
dcl_output o0.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d6781a55fc95d6c8-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

mov r0.x, v2.w
mov r0.y, v3.w
mov r0.z, v4.w
add r1.xyz, -r0.xyzx, r17.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r1.xyzx
mad r3.xy, v1.xyxx, cb0[5].xyxx, cb0[5].zwzz
sample r4.xyzw, r3.xyxx, t0.xyzw, s3
mul r4.x, r4.w, r4.x
mad r3.zw, r4.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r4.xy, r3.zwzz, cb0[4].xxxx
dp2 r1.w, r4.xyxx, r4.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r4.z, r1.w
sample r3.xyzw, r3.xyxx, t1.xyzw, s4
mul r5.xyz, r3.xxxx, cb0[6].xyzx
mad r6.xyz, r3.xxxx, cb0[7].xyzx, -r5.xyzx
mad r5.xyz, r3.yyyy, r6.xyzx, r5.xyzx
dp3 r1.w, cb2[0].xyzx, cb2[0].xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, cb2[0].xyzx
mad r7.xyz, cb2[0].xyzx, r1.wwww, r2.xyzx
dp3 r1.w, r7.xyzx, r7.xyzx
rsq r1.w, r1.w
mul r7.xyz, r1.wwww, r7.xyzx
dp3 r8.x, v2.xyzx, r4.xyzx
dp3 r8.y, v3.xyzx, r4.xyzx
dp3 r8.z, v4.xyzx, r4.xyzx
dp3 r1.w, r8.xyzx, r8.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r8.xyzx
mov r8.y, v4.y
mov r8.z, v2.y
mov r8.x, v3.y
mul r9.xyz, r4.zxyz, r8.xyzx
mad r8.xyz, r4.yzxy, r8.yzxy, -r9.xyzx
dp3 r1.w, r8.xyzx, r8.xyzx
rsq r1.w, r1.w
mul r8.xyz, r1.wwww, r8.xyzx
dp3 r1.w, r7.xyzx, r8.xyzx
div r1.w, r1.w, cb0[9].x
mov r8.y, v4.x
mov r8.z, v2.x
mov r8.x, v3.x
mul r9.xyz, r4.zxyz, r8.xyzx
mad r8.xyz, r4.yzxy, r8.yzxy, -r9.xyzx
dp3 r2.w, r8.xyzx, r8.xyzx
rsq r2.w, r2.w
mul r8.xyz, r2.wwww, r8.xyzx
dp3 r2.w, r7.xyzx, r8.xyzx
div r2.w, r2.w, cb0[9].y
dp3 r3.x, r4.xyzx, r7.xyzx
dp3 r3.y, r4.xyzx, r6.xyzx
mul r6.xyz, r3.zzzz, cb0[8].xyzx
mul r2.w, r2.w, r2.w
mad r1.w, r1.w, r1.w, r2.w
add r2.w, r3.x, l(1.000000)
div r1.w, r1.w, r2.w
mul r1.w, r1.w, l(-2.885390)
exp r1.w, r1.w
max r2.w, r3.y, l(0.000000)
mul r1.w, r1.w, r2.w
mul r3.xyz, r1.wwww, r6.xyzx
mul r3.xyz, r3.xyzx, v5.xxxx
mul r6.xyz, r3.xyzx, cb0[9].zzzz
div r7.xy, v6.xyxx, v6.wwww
mul r7.xy, r7.xyxx, cb1[6].xyxx
mul r7.xy, r7.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
ge r7.zw, r7.xxxy, -r7.xxxy
frc r7.xy, |r7.xyxx|
movc r7.xy, r7.zwzz, r7.xyxx, -r7.xyxx
mul r7.xy, r7.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
ftoi r7.xy, r7.xyxx
ishl r1.w, r7.y, l(2)
iadd r1.w, r7.x, r1.w
mul r1.w, l(0.062500), icb[r1.w + 0].x
ge r1.w, r3.w, r1.w
and r2.w, r1.w, l(0x3f800000)
movc r1.w, r1.w, l(0), l(1.000000)
mad r1.w, r3.w, r1.w, r2.w
add r1.w, r1.w, -cb0[9].w
lt r1.w, r1.w, l(0.000000)
discard_nz r1.w
mov r7.x, cb4[9].z
mov r7.y, cb4[10].z
mov r7.z, cb4[11].z
dp3 r1.w, r1.xyzx, r7.xyzx
add r7.xyz, r0.xyzx, -cb3[25].xyzx
dp3 r2.w, r7.xyzx, r7.xyzx
sqrt r2.w, r2.w
add r2.w, -r1.w, r2.w
mad r1.w, cb3[25].w, r2.w, r1.w
mad_sat r1.w, r1.w, cb3[24].z, cb3[24].w
eq r2.w, cb7[0].x, l(1.000000)
if_nz r2.w
  eq r3.w, cb7[0].y, l(1.000000)
  mul r7.xyz, v3.wwww, cb7[2].xyzx
  mad r7.xyz, cb7[1].xyzx, v2.wwww, r7.xyzx
  mad r7.xyz, cb7[3].xyzx, v4.wwww, r7.xyzx
  add r7.xyz, r7.xyzx, cb7[4].xyzx
  movc r7.xyz, r3.wwww, r7.xyzx, r0.xyzx
  add r7.xyz, r7.xyzx, -cb7[6].xyzx
  mul r7.yzw, r7.xxyz, cb7[5].xxyz
  mad r3.w, r7.y, l(0.250000), l(0.750000)
  mad r5.w, cb7[0].z, l(0.500000), l(0.750000)
  max r7.x, r3.w, r5.w
  sample r7.xyzw, r7.xzwx, t5.xyzw, s1
else
  mov r7.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r3.w, r7.xyzw, cb2[46].xyzw
div r7.xy, v8.xyxx, v8.wwww
sample r7.xyzw, r7.xyxx, t2.xyzw, s2
add r3.w, r3.w, -r7.x
mad r1.w, r1.w, r3.w, r7.x
dp3 r3.w, -r2.xyzx, r4.xyzx
add r3.w, r3.w, r3.w
mad r7.xyz, r4.xyzx, -r3.wwww, -r2.xyzx
mul r8.xyz, r1.wwww, cb0[2].xyzx
if_nz r2.w
  eq r1.w, cb7[0].y, l(1.000000)
  mul r9.xyz, v3.wwww, cb7[2].xyzx
  mad r9.xyz, cb7[1].xyzx, v2.wwww, r9.xyzx
  mad r9.xyz, cb7[3].xyzx, v4.wwww, r9.xyzx
  add r9.xyz, r9.xyzx, cb7[4].xyzx
  movc r9.xyz, r1.wwww, r9.xyzx, r0.xyzx
  add r9.xyz, r9.xyzx, -cb7[6].xyzx
  mul r9.yzw, r9.xxyz, cb7[5].xxyz
  mul r1.w, r9.y, l(0.250000)
  mul r2.w, cb7[0].z, l(0.500000)
  mad r3.w, -cb7[0].z, l(0.500000), l(0.250000)
  max r1.w, r1.w, r2.w
  min r9.x, r3.w, r1.w
  sample r10.xyzw, r9.xzwx, t5.xyzw, s1
  add r11.xyz, r9.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r11.xyzw, r11.xyzx, t5.xyzw, s1
  add r9.xyz, r9.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r9.xyzw, r9.xyzx, t5.xyzw, s1
  mov r4.w, l(1.000000)
  dp4 r10.x, r10.xyzw, r4.xyzw
  dp4 r10.y, r11.xyzw, r4.xyzw
  dp4 r10.z, r9.xyzw, r4.xyzw
else
  mov r4.w, l(1.000000)
  dp4 r10.x, cb2[39].xyzw, r4.xyzw
  dp4 r10.y, cb2[40].xyzw, r4.xyzw
  dp4 r10.z, cb2[41].xyzw, r4.xyzw
endif
add r9.xyz, r10.xyzx, v7.xyzx
max r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r1.w, l(0.000000), cb6[2].w
if_nz r1.w
  dp3 r1.w, r7.xyzx, r7.xyzx
  rsq r1.w, r1.w
  mul r10.xyz, r1.wwww, r7.xyzx
  add r11.xyz, -r0.xyzx, cb6[0].xyzx
  div r11.xyz, r11.xyzx, r10.xyzx
  add r12.xyz, -r0.xyzx, cb6[1].xyzx
  div r12.xyz, r12.xyzx, r10.xyzx
  lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
  movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
  min r1.w, r11.y, r11.x
  min r1.w, r11.z, r1.w
  add r11.xyz, r0.xyzx, -cb6[2].xyzx
  mad r10.xyz, r10.xyzx, r1.wwww, r11.xyzx
else
  mov r10.xyz, r7.xyzx
endif
sample_l r10.xyzw, r10.xyzx, t3.xyzw, s0, l(6.000000)
add r1.w, r10.w, l(-1.000000)
mad r1.w, cb6[3].w, r1.w, l(1.000000)
log r1.w, r1.w
mul r1.w, r1.w, cb6[3].y
exp r1.w, r1.w
mul r1.w, r1.w, cb6[3].x
mul r11.xyz, r10.xyzx, r1.wwww
lt r2.w, cb6[1].w, l(0.999990)
if_nz r2.w
  lt r2.w, l(0.000000), cb6[6].w
  if_nz r2.w
    dp3 r2.w, r7.xyzx, r7.xyzx
    rsq r2.w, r2.w
    mul r12.xyz, r2.wwww, r7.xyzx
    add r13.xyz, -r0.xyzx, cb6[4].xyzx
    div r13.xyz, r13.xyzx, r12.xyzx
    add r14.xyz, -r0.xyzx, cb6[5].xyzx
    div r14.xyz, r14.xyzx, r12.xyzx
    lt r15.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
    movc r13.xyz, r15.xyzx, r13.xyzx, r14.xyzx
    min r2.w, r13.y, r13.x
    min r2.w, r13.z, r2.w
    add r0.xyz, r0.xyzx, -cb6[6].xyzx
    mad r7.xyz, r12.xyzx, r2.wwww, r0.xyzx
  endif
  sample_l r7.xyzw, r7.xyzx, t4.xyzw, s0, l(6.000000)
  add r0.x, r7.w, l(-1.000000)
  mad r0.x, cb6[7].w, r0.x, l(1.000000)
  log r0.x, r0.x
  mul r0.x, r0.x, cb6[7].y
  exp r0.x, r0.x
  mul r0.x, r0.x, cb6[7].x
  mul r0.xyz, r7.xyzx, r0.xxxx
  mad r7.xyz, r1.wwww, r10.xyzx, -r0.xyzx
  mad r11.xyz, cb6[1].wwww, r7.xyzx, r0.xyzx
endif
max r0.x, r6.y, r6.x
max r0.x, r6.z, r0.x
add r0.x, -r0.x, l(1.000000)
mul r5.xyz, r0.xxxx, r5.xyzx
mad r0.yzw, r1.xxyz, r0.wwww, cb2[0].xxyz
dp3 r1.x, r0.yzwy, r0.yzwy
max r1.x, r1.x, l(0.001000)
rsq r1.x, r1.x
mul r0.yzw, r0.yyzw, r1.xxxx
dp3 r1.x, r4.xyzx, r2.xyzx
dp3_sat r1.y, r4.xyzx, cb2[0].xyzx
dp3_sat r0.y, cb2[0].xyzx, r0.yzwy
dp2 r0.z, r0.yyyy, r0.yyyy
add r0.z, r0.z, l(-0.500000)
add r0.w, -r1.y, l(1.000000)
mul r1.z, r0.w, r0.w
mul r1.z, r1.z, r1.z
mul r0.w, r0.w, r1.z
mad r0.w, r0.z, r0.w, l(1.000000)
add r1.z, -|r1.x|, l(1.000000)
mul r1.w, r1.z, r1.z
mul r1.w, r1.w, r1.w
mul r1.z, r1.z, r1.w
mad r0.z, r0.z, r1.z, l(1.000000)
mul r0.z, r0.z, r0.w
add r0.w, |r1.x|, r1.y
add r0.w, r0.w, l(0.000010)
div r0.w, l(0.500000), r0.w
mul r0.w, r0.w, l(0.999999881)
mul r0.zw, r1.yyyy, r0.zzzw
dp3 r1.x, r6.xyzx, r6.xyzx
ne r1.x, r1.x, l(0.000000)
and r1.x, r1.x, l(0x3f800000)
mul r0.w, r0.w, r1.x
add_sat r0.x, -r0.x, l(1.000000)
mad r1.xyw, r8.xyxz, r0.zzzz, r9.xyxz
mul r2.xyz, r8.xyzx, r0.wwww
add r0.y, -r0.y, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.y, r0.z
mad r4.xyz, -r3.xyzx, cb0[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.yzw, r4.xxyz, r0.yyyy, r6.xxyz
mul r0.yzw, r0.yyzw, r2.xxyz
mad r0.yzw, r5.xxyz, r1.xxyw, r0.yyzw
mul r1.xyw, r11.xyxz, l(0.500000, 0.500000, 0.000000, 0.500000)
mad r2.xyz, -r3.xyzx, cb0[9].zzzz, r0.xxxx
mad r2.xyz, r1.zzzz, r2.xyzx, r6.xyzx
mad r0.xyz, r1.xywx, r2.xyzx, r0.yzwy
div r0.w, v1.z, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mad_sat r0.w, r0.w, cb5[1].z, cb5[1].w
add r0.xyz, r0.xyzx, -cb5[0].xyzx
mad o0.xyz, r0.wwww, r0.xyzx, cb5[0].xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used