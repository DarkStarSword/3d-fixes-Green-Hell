// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9ad060b053431347-ps.txt
// 3DMigoto: 9ad060b053431347 |    Unity headers extracted from AVP_POM
//    Shader "AVP/POM" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry+0" "RenderType"="Opaque" }
//        Pass 2/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDADD" "QUEUE"="Geometry+0" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from AVP_POM:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 147 2 4
//   undeciphered1a: 13
//   Keywords { "POINT" "FOG_LINEAR" }
//   undeciphered2: 1 6 5 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 240
//   Vector 96 [_LightColor0]
//   Float 128 [_NormalScale]
//   Vector 144 [_Albedo_ST]
//   Float 160 [_Scale]
//   Float 164 [_RefPlane]
//   Float 168 [_CurvFix]
//   Float 172 [_CurvatureU]
//   Float 176 [_CurvatureV]
//   Float 208 [_Metallic_Power]
//   Float 212 [_SmoothnessPower]
//   Matrix 32 [unity_WorldToLight]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_HeightMap] 2D 4
//   SetTexture 1 [_Normal] 2D 2
//   SetTexture 2 [_Albedo] 2D 3
//   SetTexture 3 [_Metallic] 2D 5
//   SetTexture 4 [_LightTexture0] 2D 1
//   SetTexture 5 [unity_ProbeVolumeSH] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityFog" 3
//   BindCB "UnityProbeVolume" 4
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:45:24 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 7     z         1     NONE   float     z
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyz         3     NONE   float   xyz
// TEXCOORD                 3   xyz         4     NONE   float   xyz
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 5   xyz         6     NONE   float
// TEXCOORD                 6   xyzw        7     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[14], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 15
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r13.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9ad060b053431347-ps.txt

mul r13.w, -r13.x, r13.y
mad r14.xyz, -r13.wwww, cb10[0].xyzw, cb1[4].xyzw

add r0.xyz, -v5.xyzx, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r0.xyzx
add r2.xyz, -v5.xyzx, r14.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
mul r3.xyz, r2.yyyy, v3.xyzx
mad r3.xyz, v2.xyzx, r2.xxxx, r3.xyzx
mad r3.xyz, v4.xyzx, r2.zzzz, r3.xyzx
mad r4.xy, v1.xyxx, cb0[9].xyxx, cb0[9].zwzz
deriv_rtx r4.zw, r4.xxxy
deriv_rty r5.xy, r4.xyxx
div r3.xy, r3.xyxx, r3.zzzz
mul r3.xy, r3.xyxx, cb0[10].xxxx
mad r3.zw, cb0[10].yyyy, r3.xxxy, r4.xxxy
mul r4.xy, r3.xyxx, l(-0.00781250000, -0.00781250000, 0.000000, 0.000000)
add r1.w, cb0[10].z, l(1.000000)
mov r6.x, cb0[10].w
mov r6.y, cb0[11].x
mov r7.x, l(129)
mov r5.zw, l(0,0,0,0)
mov r6.zw, r4.xxxy
mov r2.w, l(0)
mov r8.xyzw, l(0,1.000000,0,0.992187500)
mov r9.x, l(0)
loop
  ige r10.x, r8.x, l(129)
  breakc_nz r10.x
  mul r10.xy, r6.zwzz, r6.zwzz
  dp2 r2.w, r6.xyxx, r10.xyxx
  add r10.xy, r3.zwzz, r6.zwzz
  sample_d r10.xyzw, r10.xyxx, t0.xyzw, s4, r4.zwzz, r5.xyxx
  add r10.y, -r2.w, l(1.000000)
  mul r9.x, r10.y, r10.x
  lt r10.x, r8.w, r9.x
  iadd r9.y, r8.x, l(1)
  mad r10.zw, r3.xxxy, l(0.000000, 0.000000, -0.00781250000, -0.00781250000), r6.zzzw
  mul r10.y, r1.w, r10.y
  mad r9.w, -r10.y, l(0.00781250000), r8.w
  movc r5.zw, r10.xxxx, r5.zzzw, r6.zzzw
  movc r6.zw, r10.xxxx, r6.zzzw, r10.zzzw
  mov r7.yzw, r8.yyzw
  mov r9.z, r7.w
  movc r8.xyzw, r10.xxxx, r7.xyzw, r9.yzxw
endloop
mov r3.xy, r4.xyxx
mov r6.xy, r5.zwzz
mov r6.zw, l(0,0,0,0)
mov r1.w, l(0.00781250000)
mov r7.xyz, r8.yzwy
mov r7.w, r9.x
mov r8.x, l(0)
loop
  ige r9.y, r8.x, l(10)
  breakc_nz r9.y
  add r9.yz, -r7.xxwx, r7.yyyy
  add r9.z, r7.z, r9.z
  add r9.z, -r7.x, r9.z
  div r9.y, r9.y, r9.z
  mul r9.zw, r3.xxxy, r9.yyyy
  mad r6.zw, r9.yyyy, r3.xxxy, r6.xxxy
  mul r10.x, r1.w, r9.y
  mad r11.z, -r9.y, r1.w, r7.x
  add r10.yz, r3.zzwz, r6.zzwz
  sample_d r12.xyzw, r10.yzyy, t0.xyzw, s4, r4.zwzz, r5.xyxx
  lt r10.y, r11.z, r12.x
  add r9.y, -r9.y, l(1.000000)
  mul r10.zw, r3.xxxy, r9.yyyy
  mul r9.y, r1.w, r9.y
  movc r3.xy, r10.yyyy, r9.zwzz, r10.zwzz
  movc r6.xy, r10.yyyy, r6.xyxx, r6.zwzz
  movc r1.w, r10.y, r10.x, r9.y
  mov r11.xy, r7.xyxx
  mov r11.w, r12.x
  mov r7.xy, r11.zwzz
  movc r7.xyzw, r10.yyyy, r11.xyzw, r7.xyzw
  iadd r8.x, r8.x, l(1)
endloop
lt r1.w, l(1.000000), r2.w
discard_nz r1.w
add r3.xy, r3.zwzz, r6.zwzz
sample_d r6.xyzw, r3.xyxx, t1.xyzw, s2, r4.zwzz, r5.xyxx
mul r6.x, r6.w, r6.x
mad r3.zw, r6.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r6.xy, r3.zwzz, cb0[8].xxxx
dp2 r1.w, r6.xyxx, r6.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r6.z, r1.w
sample_d r7.xyzw, r3.xyxx, t2.xyzw, s3, r4.zwzz, r5.xyxx
sample_d r3.xyzw, r3.xyxx, t3.xyzw, s5, r4.zwzz, r5.xyxx
mul r1.w, r3.x, cb0[13].x
mul r3.xyz, v5.yyyy, cb0[3].xyzx
mad r3.xyz, cb0[2].xyzx, v5.xxxx, r3.xyzx
mad r3.xyz, cb0[4].xyzx, v5.zzzz, r3.xyzx
add r3.xyz, r3.xyzx, cb0[5].xyzx
eq r2.w, cb4[0].x, l(1.000000)
if_nz r2.w
  eq r2.w, cb4[0].y, l(1.000000)
  mul r4.xyz, v5.yyyy, cb4[2].xyzx
  mad r4.xyz, cb4[1].xyzx, v5.xxxx, r4.xyzx
  mad r4.xyz, cb4[3].xyzx, v5.zzzz, r4.xyzx
  add r4.xyz, r4.xyzx, cb4[4].xyzx
  movc r4.xyz, r2.wwww, r4.xyzx, v5.xyzx
  add r4.xyz, r4.xyzx, -cb4[6].xyzx
  mul r4.yzw, r4.xxyz, cb4[5].xxyz
  mad r2.w, r4.y, l(0.250000), l(0.750000)
  mad r4.y, cb4[0].z, l(0.500000), l(0.750000)
  max r4.x, r2.w, r4.y
  sample r4.xyzw, r4.xzwx, t5.xyzw, s0
else
  mov r4.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r2.w, r4.xyzw, cb2[46].xyzw
dp3 r3.x, r3.xyzx, r3.xyzx
sample r4.xyzw, r3.xxxx, t4.xyzw, s1
mul r2.w, r2.w, r4.x
dp3 r3.x, v2.xyzx, r6.xyzx
dp3 r3.y, v3.xyzx, r6.xyzx
dp3 r3.z, v4.xyzx, r6.xyzx
dp3 r4.x, r3.xyzx, r3.xyzx
rsq r4.x, r4.x
mul r3.xyz, r3.xyzx, r4.xxxx
mul r4.xyz, r2.wwww, cb0[6].xyzx
add r5.xyz, r7.xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
mad r5.xyz, r1.wwww, r5.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
mad r1.w, -r1.w, l(0.960000), l(0.960000)
mul r6.xyz, r1.wwww, r7.xyzx
mad r1.w, -r3.w, cb0[13].y, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r3.xyzx, r2.xyzx
dp3_sat r2.x, r3.xyzx, r1.xyzx
dp3_sat r2.y, r3.xyzx, r0.xyzx
dp3_sat r0.x, r1.xyzx, r0.xyzx
mul r0.y, r0.x, r0.x
dp2 r0.y, r0.yyyy, r1.wwww
add r0.y, r0.y, l(-0.500000)
add r0.z, -r2.x, l(1.000000)
mul r1.x, r0.z, r0.z
mul r1.x, r1.x, r1.x
mul r0.z, r0.z, r1.x
mad r0.z, r0.y, r0.z, l(1.000000)
add r1.x, -|r0.w|, l(1.000000)
mul r1.y, r1.x, r1.x
mul r1.y, r1.y, r1.y
mul r1.x, r1.x, r1.y
mad r0.y, r0.y, r1.x, l(1.000000)
mul r0.y, r0.y, r0.z
mul r0.z, r1.w, r1.w
max r0.z, r0.z, l(0.002000)
add r1.x, -r0.z, l(1.000000)
mad r1.y, |r0.w|, r1.x, r0.z
mad r1.x, r2.x, r1.x, r0.z
mul r0.w, |r0.w|, r1.x
mad r0.w, r2.x, r1.y, r0.w
add r0.w, r0.w, l(0.000010)
div r0.w, l(0.500000), r0.w
mul r0.z, r0.z, r0.z
mad r1.x, r2.y, r0.z, -r2.y
mad r1.x, r1.x, r2.y, l(1.000000)
mul r0.z, r0.z, l(0.318309873)
mad r1.x, r1.x, r1.x, l(1.000000012E-007)
div r0.z, r0.z, r1.x
mul r0.z, r0.z, r0.w
mul r0.z, r0.z, l(3.14159274)
mul r0.yz, r2.xxxx, r0.yyzy
max r0.z, r0.z, l(0.000000)
dp3 r0.w, r5.xyzx, r5.xyzx
ne r0.w, r0.w, l(0.000000)
and r0.w, r0.w, l(0x3f800000)
mul r0.z, r0.w, r0.z
mul r1.xyz, r0.yyyy, r4.xyzx
mul r0.yzw, r4.xxyz, r0.zzzz
add r0.x, -r0.x, l(1.000000)
mul r1.w, r0.x, r0.x
mul r1.w, r1.w, r1.w
mul r0.x, r0.x, r1.w
add r2.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, r2.xyzx, r0.xxxx, r5.xyzx
mul r0.xyz, r0.yzwy, r2.xyzx
mad r0.xyz, r6.xyzx, r1.xyzx, r0.xyzx
div r0.w, v1.z, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mad_sat r0.w, r0.w, cb3[1].z, cb3[1].w
mul o0.xyz, r0.xyzx, r0.wwww
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used