// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e4e2cfb067181422-ps.txt
// 3DMigoto: e4e2cfb067181422 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 147 5 14
//   undeciphered1a: 20
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_SPHERE" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT2" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 592
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogSkyColor]
//   Vector 336 [_FogOfWarSize] 3
//   Vector 352 [_FogOfWarCenterAdjusted] 3
//   Vector 368 [_FogPointLightPosition0] 3
//   Vector 384 [_FogPointLightColor0] 3
//   Vector 400 [_FogPointLightPosition1] 3
//   Vector 416 [_FogPointLightColor1] 3
//   Vector 432 [_FogPointLightPosition2] 3
//   Vector 448 [_FogPointLightColor2] 3
//   Vector 464 [_SunPosition] 3
//   Vector 480 [_SunDir] 3
//   Vector 496 [_SunColor] 3
//   Vector 512 [_FogScatteringData]
//   Vector 528 [_FogScatteringData2]
//   Float 544 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_FogOfWar] 2D 4
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:23:06 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 22
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r20.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e4e2cfb067181422-ps.txt

mul r20.w, -r20.x, r20.y
mad r21.xyz, -r20.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r21.y
mov r1.xz, r21.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  lt r0.w, r0.x, cb0[16].w
  if_nz r0.w
    div r3.xy, r2.xzxx, cb0[21].xzxx
    add r3.xy, r3.xyxx, -cb0[22].xzxx
    sample r3.xyzw, r3.xyxx, t1.wxyz, s4
    ge r0.w, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.w, l(0)
  endif
  if_z r0.w
    add r2.w, r2.y, l(0.000010)
    add r3.yzw, -r1.xxyz, r2.xxwz
    dp3 r0.w, r3.yzwy, r3.yzwy
    sqrt r0.w, r0.w
    add r4.xyz, r1.xyzx, -cb0[17].xyzx
    div r5.xyz, r3.yzwy, r0.wwww
    dp3 r1.w, r5.xyzx, r4.xyzx
    dp3 r2.y, r4.xyzx, r4.xyzx
    add r2.y, r2.y, -cb0[18].y
    mad r2.y, r1.w, r1.w, -r2.y
    ge r2.w, r2.y, l(0.000000)
    sqrt r4.x, r2.y
    movc r2.y, r2.w, r4.x, r2.y
    add r2.w, -r1.w, -r2.y
    max r2.w, r2.w, l(0.000000)
    min r4.x, r0.w, cb0[12].z
    add r1.w, -r1.w, r2.y
    min r1.w, r4.x, r1.w
    add r1.w, -r2.w, r1.w
    ge r2.y, r1.w, l(0.000000)
    if_nz r2.y
      mad r1.xyz, r5.xyzx, r2.wwww, r1.xyzx
      log r2.y, r1.w
      mul r2.y, r2.y, l(0.693147182)
      max r2.y, r2.y, l(0.000000)
      mad r2.y, r2.y, cb0[15].x, l(0.100000)
      mul r2.y, r2.y, cb0[13].z
      mul_sat r4.y, r4.x, cb0[15].y
      mul r2.y, r2.y, r4.y
      add r2.w, -r2.w, r4.x
      max r2.y, r2.y, l(0.010000)
      mul r3.yzw, r2.yyyy, r3.yyzw
      div r3.yzw, r3.yyzw, r0.wwww
      div r0.w, r1.w, r2.y
      add r4.xyz, r1.xyzx, -cb0[23].xyzx
      add r6.xyz, r1.xyzx, -cb0[25].xyzx
      add r7.xyz, r1.xyzx, -cb0[27].xyzx
      mul r8.xz, r3.yywy, cb0[13].wwww
      mul r2.y, cb0[13].z, cb0[13].y
      div r8.y, r3.z, r2.y
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r2.y
      add r9.xy, cb0[14].xzxx, cb0[17].xzxx
      frc r2.y, r0.z
      mad r0.w, r2.y, cb0[34].x, r0.w
      ge r1.w, r1.w, r2.w
      and r1.w, r1.w, l(0x3f800000)
      mov r10.xyzw, l(0,0,0,0)
      mov r11.xyz, r4.xyzx
      mov r12.xyz, r6.xyzx
      mov r13.xyz, r7.xyzx
      mov r2.y, r0.w
      mov r15.xyz, r1.xyzx
      mov r14.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r2.y
        breakc_nz r2.w
        mad r9.zw, r9.xxxy, cb0[13].wwww, -r15.xxxz
        mul r9.zw, r9.zzzw, cb0[18].xxxx
        dp2 r2.w, r9.zwzz, r9.zwzz
        sample_l r16.xyzw, r15.xzxx, t2.xyzw, s1, l(0.000000)
        mad r2.w, r2.w, cb0[18].w, |r15.y|
        add r2.w, -r2.w, r16.w
        lt r4.w, l(0.000000), r2.w
        if_nz r4.w
          add r4.w, -r2.w, l(1.000000)
          mul r17.xyz, r4.wwww, cb0[11].xyzx
          mul r18.w, r2.w, l(0.400000)
          dp3 r2.w, r11.xyzx, r11.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          dp3 r4.w, r12.xyzx, r12.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r13.xyzx, r13.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mul r19.xyz, r4.wwww, cb0[26].xyzx
          mad r19.xyz, cb0[28].xyzx, r5.wwww, r19.xyzx
          mad r19.xyz, cb0[24].xyzx, r2.wwww, r19.xyzx
          mad r16.xyz, r19.xyzx, r18.wwww, r16.xyzx
          mul r16.xyz, r18.wwww, r16.xyzx
          mul r18.xyz, r16.xyzx, r17.xyzx
          add r2.w, -r14.w, l(1.000000)
          mad r16.xyzw, r18.xyzw, r2.wwww, r14.xyzw
          lt r2.w, l(0.990000), r16.w
          if_nz r2.w
            mov r10.xyzw, r18.xyzw
            mov r14.xyzw, r16.xyzw
            break
          endif
          mov r10.xyzw, r18.xyzw
          mov r14.xyzw, r16.xyzw
        endif
        add r11.xyz, r3.yzwy, r11.xyzx
        add r12.xyz, r3.yzwy, r12.xyzx
        add r13.xyz, r3.yzwy, r13.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r15.xyz, r8.xyzx, r15.xyzx
      endloop
      lt r0.w, r14.w, l(0.990000)
      and r0.w, r0.w, l(0x3f800000)
      add r1.x, -r14.w, l(1.000000)
      mul r1.y, r1.w, r2.y
      mul r0.w, r0.w, r1.x
      mul r0.w, r1.y, r0.w
      mad r1.xyzw, r10.xyzw, r0.wwww, r14.xyzw
      dp3 r0.w, r5.xyzx, cb0[30].xyzx
      mul r0.w, r0.w, cb0[33].w
      max r0.w, r0.w, l(0.000000)
      mul r0.w, r0.w, r0.w
      mul r0.w, r0.w, r0.w
      mul r0.w, r0.w, r0.w
      mul r0.w, r1.w, r0.w
      add r3.yzw, -r1.xxyz, cb0[31].xxyz
      mad r1.xyz, r0.wwww, r3.yzwy, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r2.y, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t3.xyzw, s0
sample r5.xyzw, v1.zwzz, t4.xyzw, s3
add r1.xyz, -r4.xyzx, r5.xyzx
mad r1.xyz, r3.wwww, r1.xyzx, r4.xyzx
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r2.xz, r0.xxxx, r2.xxzx
  mad r2.xz, r2.xxzx, cb0[13].wwww, cb0[16].zzzz
  sample r4.xyzw, r2.xzxx, t2.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r4.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r2.xzw, -r1.xxyz, cb0[19].xxyz
  mad r1.xyz, r0.xxxx, r2.xzwx, r1.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyw, r1.xyxz, r0.xxxx, r3.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[29].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[29].y
add r2.x, -v1.x, cb0[29].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[33].z, l(1.000000)
mul r0.z, r0.z, cb0[32].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[33].x
mov r3.x, cb0[32].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.zzzz, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[32].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[33].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[32].zzzz, r0.xywx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used