// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d7849b98d6c1360c-ps.txt
// 3DMigoto: d7849b98d6c1360c |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 169 4 12
//   undeciphered1a: 24
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_POINT_LIGHT3" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 720
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 416 [_FogPointLightPosition2] 3
//   Vector 432 [_FogPointLightColor2] 3
//   Vector 448 [_FogPointLightPosition3] 3
//   Vector 464 [_FogPointLightColor3] 3
//   Vector 496 [_SunDir] 3
//   Vector 512 [_SunColor] 3
//   Vector 544 [_FogScatteringData2]
//   Vector 640 [_VolumetricFogSunWorldPos]
//   Vector 656 [_VolumetricFogSunShadowsData]
//   Float 672 [_Jitter]
//   Matrix 576 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   SetTexture 4 [_VolumetricFogSunDepthTexture] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:16:54 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[43], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 26
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r24.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d7849b98d6c1360c-ps.txt

mul r24.w, -r24.x, r24.y
mad r25.xyz, -r24.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
sample r2.xyzw, v1.zwzz, t1.xyzw, s2
mad r1.y, cb1[7].x, r2.x, cb1[7].y
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
min r1.x, r1.y, r1.x
add r2.y, -cb0[13].x, r25.y
mov r2.xz, r25.xxzx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.y, r3.y, l(0.000010)
lt r1.z, cb0[13].y, r2.y
lt r1.w, cb0[13].y, r1.y
and r1.z, r1.w, r1.z
lt r1.w, r2.y, -cb0[13].y
lt r1.y, r1.y, -cb0[13].y
and r1.y, r1.y, r1.w
or r1.y, r1.y, r1.z
if_z r1.y
  lt r1.x, r1.x, cb0[16].w
  if_nz r1.x
    div r1.xy, r3.xzxx, cb0[20].xzxx
    add r1.xy, r1.xyxx, -cb0[21].xzxx
    sample r1.xyzw, r1.xyxx, t2.wxyz, s3
    ge r1.y, l(0.000000), r1.x
  else
    mov r1.xy, l(1.000000,0,0,0)
  endif
  if_z r1.y
    add r3.w, r3.y, l(0.000010)
    add r1.yzw, -r2.xxyz, r3.xxwz
    dp3 r2.w, r1.yzwy, r1.yzwy
    sqrt r2.w, r2.w
    add r3.xyz, r2.xyzx, -cb0[17].xyzx
    div r4.xyz, r1.yzwy, r2.wwww
    dp3 r3.w, r4.xyzx, r3.xyzx
    dp3 r3.x, r3.xyzx, r3.xyzx
    add r3.x, r3.x, -cb0[18].y
    mad r3.x, r3.w, r3.w, -r3.x
    ge r3.y, r3.x, l(0.000000)
    sqrt r3.z, r3.x
    movc r3.x, r3.y, r3.z, r3.x
    add r3.y, -r3.x, -r3.w
    max r3.y, r3.y, l(0.000000)
    min r3.z, r2.w, cb0[12].z
    add r3.x, r3.x, -r3.w
    min r3.x, r3.z, r3.x
    add r3.x, -r3.y, r3.x
    ge r3.w, r3.x, l(0.000000)
    if_nz r3.w
      mul r5.xy, v1.xyxx, cb1[6].xyxx
      dp2 r3.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r5.xyxx
      frc r3.w, r3.w
      add r3.w, r3.w, l(-0.500000)
      mad r5.xyz, r4.xyzx, r3.yyyy, r2.xyzx
      log r2.x, r3.x
      mul r2.x, r2.x, l(0.693147182)
      max r2.x, r2.x, l(0.000000)
      mad r2.x, r2.x, cb0[15].x, l(0.100000)
      mul r2.x, r2.x, cb0[13].z
      mul_sat r2.y, r3.z, cb0[15].y
      mul r2.x, r2.y, r2.x
      add r2.y, -r3.y, r3.z
      max r2.x, r2.x, l(0.010000)
      mul r6.xyz, r1.yzwy, r2.xxxx
      div r6.xyz, r6.xyzx, r2.wwww
      div r2.x, r3.x, r2.x
      add r7.xyz, r5.xyzx, -cb0[22].xyzx
      add r8.xyz, r5.xyzx, -cb0[24].xyzx
      add r9.xyz, r5.xyzx, -cb0[26].xyzx
      add r10.xyz, r5.xyzx, -cb0[28].xyzx
      mul r11.xz, r6.xxzx, cb0[13].wwww
      mul r2.z, cb0[13].z, cb0[13].y
      div r11.y, r6.y, r2.z
      add r12.xy, r5.xzxx, cb0[14].xzxx
      mul r12.xy, r12.xyxx, cb0[13].wwww
      div r2.z, r5.y, r2.z
      add r12.zw, cb0[14].xxxz, cb0[17].xxxz
      add r13.xy, cb0[14].xzxx, r25.xzxx
      frc r3.z, r3.w
      mad r2.x, r3.z, cb0[42].x, r2.x
      add r5.w, r5.y, cb0[13].x
      mul r14.xyz, r5.wwww, cb0[37].xywx
      mad r14.xyz, cb0[36].xywx, r5.xxxx, r14.xyzx
      mad r14.xyz, cb0[38].xywx, r5.zzzz, r14.xyzx
      add r14.xyz, r14.xyzx, cb0[39].xywx
      div r13.zw, r14.xxxy, r14.zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r3.z, r3.w, cb0[41].y, l(1.000000)
      mul r3.z, r3.z, r3.x
      mul r1.yzw, r1.yyzw, r3.zzzz
      div r1.yzw, r1.yyzw, r2.wwww
      add r1.yzw, r1.yyzw, r5.xxwz
      mul r14.xyz, r1.zzzz, cb0[37].xywx
      mad r14.xyz, cb0[36].xywx, r1.yyyy, r14.xyzx
      mad r14.xyz, cb0[38].xywx, r1.wwww, r14.xyzx
      add r14.xyz, r14.xyzx, cb0[39].xywx
      div r3.zw, r14.xxxy, r14.zzzz
      mad r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r2.w, -r3.y, cb0[40].w
      mul_sat r2.w, r2.w, l(0.0285714287)
      mul r2.w, r2.w, cb0[41].x
      div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
      ge r2.y, r3.x, r2.y
      and r2.y, r2.y, l(0x3f800000)
      add r13.zw, -r3.zzzw, r13.zzzw
      add r5.xyz, -r1.yzwy, r5.xwzx
      mov r14.xyzw, l(0,0,0,0)
      mov r15.xyz, r7.xyzx
      mov r16.xyz, r8.xyzx
      mov r17.xyz, r9.xyzx
      mov r18.xyz, r10.xyzx
      mov r20.xz, r12.xxyx
      mov r3.x, r2.x
      mov r20.y, r2.z
      mov r19.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r3.x
        breakc_nz r4.w
        mad r21.xy, r12.zwzz, cb0[13].wwww, -r20.xzxx
        mul r21.xy, r21.xyxx, cb0[18].xxxx
        dp2 r4.w, r21.xyxx, r21.xyxx
        sample_l r21.xyzw, r20.xzxx, t3.xyzw, s0, l(0.000000)
        mad r4.w, r4.w, cb0[18].w, |r20.y|
        add r4.w, -r4.w, r21.w
        mad r22.xy, r13.xyxx, cb0[13].wwww, -r20.xzxx
        dp2 r5.w, r22.xyxx, r22.xyxx
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r4.w, -r5.w, cb0[12].y, r4.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r22.xyz, r5.wwww, cb0[11].xyzx
          mul r22.w, r4.w, l(0.400000)
          mul r4.w, r3.y, r3.x
          mad r23.xy, r4.wwww, r13.zwzz, r3.zwzz
          sample_l r23.xyzw, r23.xyxx, t4.xyzw, s4, l(0.000000)
          dp4 r5.w, r23.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mad r23.xyz, r4.wwww, r5.xyzx, r1.yzwy
          add r23.xyz, r23.xyzx, -cb0[40].xyzx
          dp3 r4.w, r23.xyzx, r23.xyzx
          sqrt r4.w, r4.w
          add_sat r4.w, -r4.w, r5.w
          mul r5.w, r2.w, r19.w
          add r4.w, r4.w, l(-1.000000)
          mad r5.w, r5.w, r4.w, l(1.000000)
          mad r4.w, cb0[41].z, r4.w, l(1.000000)
          mul r22.xyzw, r4.wwww, r22.xyzw
          dp3 r4.w, r15.xyzx, r15.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r6.w, r16.xyzx, r16.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r17.xyzx, r17.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          dp3 r8.w, r18.xyzx, r18.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          mul r23.xyz, r7.wwww, cb0[27].xyzx
          mad r23.xyz, cb0[29].xyzx, r8.wwww, r23.xyzx
          mad r23.xyz, cb0[25].xyzx, r6.wwww, r23.xyzx
          mad r23.xyz, cb0[23].xyzx, r4.wwww, r23.xyzx
          mul r23.xyz, r22.wwww, r23.xyzx
          mad r21.xyz, r21.xyzx, r5.wwww, r23.xyzx
          mul r21.xyz, r22.wwww, r21.xyzx
          mul r22.xyz, r21.xyzx, r22.xyzx
          add r4.w, -r19.w, l(1.000000)
          mad r21.xyzw, r22.xyzw, r4.wwww, r19.xyzw
          lt r4.w, l(0.990000), r21.w
          if_nz r4.w
            mov r14.xyzw, r22.xyzw
            mov r19.xyzw, r21.xyzw
            break
          endif
          mov r14.xyzw, r22.xyzw
          mov r19.xyzw, r21.xyzw
        endif
        add r15.xyz, r6.xyzx, r15.xyzx
        add r16.xyz, r6.xyzx, r16.xyzx
        add r17.xyz, r6.xyzx, r17.xyzx
        add r18.xyz, r6.xyzx, r18.xyzx
        add r3.x, r3.x, l(-1.000000)
        add r20.xyz, r11.xyzx, r20.xyzx
      endloop
      lt r1.y, r19.w, l(0.990000)
      and r1.y, r1.y, l(0x3f800000)
      add r1.z, -r19.w, l(1.000000)
      mul r1.w, r2.y, r3.x
      mul r1.y, r1.z, r1.y
      mul r1.y, r1.w, r1.y
      mad r2.xyzw, r14.xyzw, r1.yyyy, r19.xyzw
      dp3 r1.y, r4.xyzx, cb0[31].xyzx
      mul r1.y, r1.y, cb0[34].w
      max r1.y, r1.y, l(0.000000)
      mul r1.y, r1.y, r1.y
      mul r1.y, r1.y, r1.y
      mul r1.y, r1.y, r1.y
      mul r1.y, r2.w, r1.y
      add r3.xyz, -r2.xyzx, cb0[32].xyzx
      mad r2.xyz, r1.yyyy, r3.xyzx, r2.xyzx
      mul r2.xyzw, r2.xyzw, cb0[10].wwww
      mul o0.xyzw, r1.xxxx, r2.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used