// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed caf64725b0ee9f98-ps.txt
// 3DMigoto: caf64725b0ee9f98 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 110 5 12
//   undeciphered1a: 14
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_BLUR_ON" "FOG_POINT_LIGHT0" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 416
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Float 380 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_FogOfWar] 2D 5
//   SetTexture 3 [_NoiseTex] 2D 1
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:10:54 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[24], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed caf64725b0ee9f98-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r15.y
mov r1.xz, r15.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r1.w
or r0.y, r0.y, r0.w
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r3.xyzw, r0.xyxx, t2.wxyz, s5
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r0.xyw, -r1.xyxz, r2.xwxz
    dp3 r1.w, r0.xywx, r0.xywx
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.yzw, r0.xxyw, r1.wwww
    dp3 r2.w, r3.yzwy, r2.xyzx
    dp3 r2.x, r2.xyzx, r2.xyzx
    add r2.x, r2.x, -cb0[18].y
    mad r2.x, r2.w, r2.w, -r2.x
    ge r2.y, r2.x, l(0.000000)
    sqrt r2.z, r2.x
    movc r2.x, r2.y, r2.z, r2.x
    add r2.y, -r2.x, -r2.w
    max r2.y, r2.y, l(0.000000)
    min r2.z, r1.w, cb0[12].z
    add r2.x, r2.x, -r2.w
    min r2.x, r2.z, r2.x
    add r2.x, -r2.y, r2.x
    ge r2.w, r2.x, l(0.000000)
    if_nz r2.w
      mad r1.xyz, r3.yzwy, r2.yyyy, r1.xyzx
      log r2.w, r2.x
      mul r2.w, r2.w, l(0.693147182)
      max r2.w, r2.w, l(0.000000)
      mad r2.w, r2.w, cb0[15].x, l(0.100000)
      mul r2.w, r2.w, cb0[13].z
      mul_sat r3.y, r2.z, cb0[15].y
      mul r2.w, r2.w, r3.y
      add r2.y, -r2.y, r2.z
      max r2.z, r2.w, l(0.010000)
      mul r0.xyw, r0.xyxw, r2.zzzz
      div r0.xyw, r0.xyxw, r1.wwww
      div r1.w, r2.x, r2.z
      add r3.yzw, r1.xxyz, -cb0[22].xxyz
      mul r4.xz, r0.xxwx, cb0[13].wwww
      mul r2.z, cb0[13].z, cb0[13].y
      div r4.y, r0.y, r2.z
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r2.z
      add r2.zw, cb0[14].xxxz, cb0[17].xxxz
      add r5.xy, cb0[14].xzxx, r15.xzxx
      frc r4.w, r0.z
      mad r1.w, r4.w, cb0[23].w, r1.w
      ge r2.x, r2.x, r2.y
      and r2.x, r2.x, l(0x3f800000)
      mov r6.xyzw, l(0,0,0,0)
      mov r7.xyz, r3.yzwy
      mov r2.y, r1.w
      mov r9.xyz, r1.xyzx
      mov r8.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r2.y
        breakc_nz r4.w
        mad r5.zw, r2.zzzw, cb0[13].wwww, -r9.xxxz
        mul r5.zw, r5.zzzw, cb0[18].xxxx
        dp2 r4.w, r5.zwzz, r5.zwzz
        sample_l r10.xyzw, r9.xzxx, t3.xyzw, s1, l(0.000000)
        mad r4.w, r4.w, cb0[18].w, |r9.y|
        add r4.w, -r4.w, r10.w
        mad r5.zw, r5.xxxy, cb0[13].wwww, -r9.xxxz
        dp2 r5.z, r5.zwzz, r5.zwzz
        add r5.z, -r5.z, cb0[12].x
        max r5.z, r5.z, l(0.000000)
        mad r4.w, -r5.z, cb0[12].y, r4.w
        lt r5.z, l(0.000000), r4.w
        if_nz r5.z
          add r5.z, -r4.w, l(1.000000)
          mul r11.xyz, r5.zzzz, cb0[11].xyzx
          mul r12.w, r4.w, l(0.400000)
          dp3 r4.w, r7.xyzx, r7.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mul r13.xyz, r4.wwww, cb0[23].xyzx
          mad r10.xyz, r13.xyzx, r12.wwww, r10.xyzx
          mul r10.xyz, r12.wwww, r10.xyzx
          mul r12.xyz, r10.xyzx, r11.xyzx
          add r4.w, -r8.w, l(1.000000)
          mad r10.xyzw, r12.xyzw, r4.wwww, r8.xyzw
          lt r4.w, l(0.990000), r10.w
          if_nz r4.w
            mov r6.xyzw, r12.xyzw
            mov r8.xyzw, r10.xyzw
            break
          endif
          mov r6.xyzw, r12.xyzw
          mov r8.xyzw, r10.xyzw
        endif
        add r7.xyz, r0.xywx, r7.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r9.xyz, r4.xyzx, r9.xyzx
      endloop
      lt r0.x, r8.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r8.w, l(1.000000)
      mul r0.w, r2.y, r2.x
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.w, r0.x
      mad r1.xyzw, r6.xyzw, r0.xxxx, r8.xyzw
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.z, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
sample r4.xyzw, v1.zwzz, t5.xyzw, s4
add r0.yzw, -r3.xxyz, r4.xxyz
mad r0.yzw, r2.wwww, r0.yyzw, r3.xxyz
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r0.yzwy, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used