// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ada831e8e3aee76e-ps.txt
// 3DMigoto: ada831e8e3aee76e |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 162 3 12
//   undeciphered1a: 22
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_VOID_BOX" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT3" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogSkyColor]
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 416 [_FogPointLightPosition2] 3
//   Vector 432 [_FogPointLightColor2] 3
//   Vector 448 [_FogPointLightPosition3] 3
//   Vector 464 [_FogPointLightColor3] 3
//   Vector 480 [_SunPosition] 3
//   Vector 496 [_SunDir] 3
//   Vector 512 [_SunColor] 3
//   Vector 528 [_FogScatteringData]
//   Vector 544 [_FogScatteringData2]
//   Float 560 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:56:43 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 24
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r22.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ada831e8e3aee76e-ps.txt

mul r22.w, -r22.x, r22.y
mad r23.xyz, -r22.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r23.y
mov r1.xz, r23.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  add r4.xyz, r1.xyzx, -cb0[19].xyzx
  div r5.xyz, r3.xyzx, r0.wwww
  dp3 r1.w, r5.xyzx, r4.xyzx
  dp3 r2.y, r4.xyzx, r4.xyzx
  add r2.y, r2.y, -cb0[20].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.w, r2.y, l(0.000000)
  sqrt r3.w, r2.y
  movc r2.y, r2.w, r3.w, r2.y
  add r2.w, -r1.w, -r2.y
  max r2.w, r2.w, l(0.000000)
  min r3.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r3.w, r1.w
  add r1.w, -r2.w, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r1.xyz, r5.xyzx, r2.wwww, r1.xyzx
    mul r4.xyz, r3.xyzx, r1.wwww
    div r4.xyz, r4.xyzx, r0.wwww
    add r4.xyz, r1.xyzx, r4.xyzx
    add r4.xyz, -r4.xyzx, cb0[17].xyzx
    mul r4.xyz, |r4.xyzx|, cb0[18].xyzx
    max r2.y, r4.y, r4.x
    max r2.y, r4.z, r2.y
    add r2.y, r2.y, l(-1.000000)
    mad_sat r2.y, cb0[18].w, r2.y, l(1.000000)
    lt r4.x, l(0.000000), r2.y
    if_nz r4.x
      log r4.x, r1.w
      mul r4.x, r4.x, l(0.693147182)
      max r4.x, r4.x, l(0.000000)
      mad r4.x, r4.x, cb0[15].x, l(0.100000)
      mul r4.x, r4.x, cb0[13].z
      mul_sat r4.y, r3.w, cb0[15].y
      mul r4.x, r4.y, r4.x
      add r2.w, -r2.w, r3.w
      max r3.w, r4.x, l(0.010000)
      mul r3.xyz, r3.wwww, r3.xyzx
      div r3.xyz, r3.xyzx, r0.wwww
      div r0.w, r1.w, r3.w
      add r4.xyz, r1.xyzx, -cb0[22].xyzx
      add r6.xyz, r1.xyzx, -cb0[24].xyzx
      add r7.xyz, r1.xyzx, -cb0[26].xyzx
      add r8.xyz, r1.xyzx, -cb0[28].xyzx
      mul r9.xz, r3.xxzx, cb0[13].wwww
      mul r3.w, cb0[13].z, cb0[13].y
      div r9.y, r3.y, r3.w
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r3.w
      add r10.xy, cb0[14].xzxx, cb0[19].xzxx
      add r10.zw, cb0[14].xxxz, r23.xxxz
      frc r3.w, r0.z
      mad r0.w, r3.w, cb0[35].x, r0.w
      ge r1.w, r1.w, r2.w
      and r1.w, r1.w, l(0x3f800000)
      mov r11.xyzw, l(0,0,0,0)
      mov r12.xyz, r4.xyzx
      mov r13.xyz, r6.xyzx
      mov r14.xyz, r7.xyzx
      mov r15.xyz, r8.xyzx
      mov r2.w, r0.w
      mov r17.xyz, r1.xyzx
      mov r16.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r2.w
        breakc_nz r3.w
        mad r18.xy, r10.xyxx, cb0[13].wwww, -r17.xzxx
        mul r18.xy, r18.xyxx, cb0[20].xxxx
        dp2 r3.w, r18.xyxx, r18.xyxx
        sample_l r18.xyzw, r17.xzxx, t1.xyzw, s1, l(0.000000)
        mad r3.w, r3.w, cb0[20].w, |r17.y|
        add r3.w, -r3.w, r18.w
        mad r19.xy, r10.zwzz, cb0[13].wwww, -r17.xzxx
        dp2 r4.w, r19.xyxx, r19.xyxx
        add r4.w, -r4.w, cb0[12].x
        max r4.w, r4.w, l(0.000000)
        mad r3.w, -r4.w, cb0[12].y, r3.w
        lt r4.w, l(0.000000), r3.w
        if_nz r4.w
          add r4.w, -r3.w, l(1.000000)
          mul r19.xyz, r4.wwww, cb0[11].xyzx
          mul r20.w, r3.w, l(0.400000)
          dp3 r3.w, r12.xyzx, r12.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          dp3 r4.w, r13.xyzx, r13.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r14.xyzx, r14.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r6.w, r15.xyzx, r15.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          mul r21.xyz, r5.wwww, cb0[27].xyzx
          mad r21.xyz, cb0[29].xyzx, r6.wwww, r21.xyzx
          mad r21.xyz, cb0[25].xyzx, r4.wwww, r21.xyzx
          mad r21.xyz, cb0[23].xyzx, r3.wwww, r21.xyzx
          mad r18.xyz, r21.xyzx, r20.wwww, r18.xyzx
          mul r18.xyz, r20.wwww, r18.xyzx
          mul r20.xyz, r18.xyzx, r19.xyzx
          add r3.w, -r16.w, l(1.000000)
          mad r18.xyzw, r20.xyzw, r3.wwww, r16.xyzw
          lt r3.w, l(0.990000), r18.w
          if_nz r3.w
            mov r11.xyzw, r20.xyzw
            mov r16.xyzw, r18.xyzw
            break
          endif
          mov r11.xyzw, r20.xyzw
          mov r16.xyzw, r18.xyzw
        endif
        add r12.xyz, r3.xyzx, r12.xyzx
        add r13.xyz, r3.xyzx, r13.xyzx
        add r14.xyz, r3.xyzx, r14.xyzx
        add r15.xyz, r3.xyzx, r15.xyzx
        add r2.w, r2.w, l(-1.000000)
        add r17.xyz, r9.xyzx, r17.xyzx
      endloop
      lt r0.w, r16.w, l(0.990000)
      and r0.w, r0.w, l(0x3f800000)
      add r1.x, -r16.w, l(1.000000)
      mul r1.y, r1.w, r2.w
      mul r0.w, r0.w, r1.x
      mul r0.w, r1.y, r0.w
      mad r1.xyzw, r11.xyzw, r0.wwww, r16.xyzw
      dp3 r0.w, r5.xyzx, cb0[31].xyzx
      mul r0.w, r0.w, cb0[34].w
      max r0.w, r0.w, l(0.000000)
      mul r0.w, r0.w, r0.w
      mul r0.w, r0.w, r0.w
      mul r0.w, r0.w, r0.w
      mul r0.w, r1.w, r0.w
      add r3.xyz, -r1.xyzx, cb0[32].xyzx
      mad r1.xyz, r0.wwww, r3.xyzx, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r2.yyyy, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r2.y, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t2.xyzw, s0
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r1.xy, r0.xxxx, r2.xzxx
  mad r1.xy, r1.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r5.xyzw, r1.xyxx, t1.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r5.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[21].w
  add r1.xyz, -r4.xyzx, cb0[21].xyzx
  mad r4.xyz, r0.xxxx, r1.xyzx, r4.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyw, r4.xyxz, r0.xxxx, r3.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[30].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[30].y
add r2.x, -v1.x, cb0[30].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[34].z, l(1.000000)
mul r0.z, r0.z, cb0[33].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[34].x
mov r3.x, cb0[33].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.zzzz, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t2.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[33].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[34].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[33].zzzz, r0.xywx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used