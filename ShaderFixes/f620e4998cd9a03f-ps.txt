// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f620e4998cd9a03f-ps.txt
// 3DMigoto: f620e4998cd9a03f |    Unity headers extracted from Custom_RainCone
//    Shader "Custom/RainCone" {
//      SubShader 1/1 {
//        LOD 200
//        Tags { "IGNOREPROJECTOR"="true" "QUEUE"="Transparent" "RenderType"="Transparent" }
//        Pass 1/3 {
//          Name "FORWARD"
//          Tags { "IGNOREPROJECTOR"="true" "LIGHTMODE"="FORWARDBASE" "QUEUE"="Transparent" "RenderType"="Transparent" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Custom_RainCone:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 60 7 2
//   undeciphered1a: 6
//   Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" }
//   undeciphered2: 1 5 5 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 208
//   Float 80 [_Intensity]
//   Float 84 [_InRainCutter]
//   Matrix 96 [_RainCutterMtx]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 112 [_ZBufferParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 624 [unity_SHAr]
//   Vector 640 [unity_SHAg]
//   Vector 656 [unity_SHAb]
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_CameraDepthTexture] 2D 4
//   SetTexture 1 [_MainTex] 2D 1
//   SetTexture 2 [_UV1Tex] 2D 2
//   SetTexture 3 [_UV2Tex] 2D 3
//   SetTexture 4 [unity_ProbeVolumeSH] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityFog" 3
//   BindCB "UnityProbeVolume" 4
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:31:07 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy
// TEXCOORD                 7     z         2     NONE   float     z
// TEXCOORD                 2   xyz         3     NONE   float
// TEXCOORD                 3   xyz         4     NONE   float   xyz
// COLOR                    0   xyzw        5     NONE   float   xyz
// TEXCOORD                 4   xyzw        6     NONE   float   xyzw
// TEXCOORD                 5   xyz         7     NONE   float   xyz
// TEXCOORD                 6   xyz         8     NONE   float   xyz
// TEXCOORD                 9   xyzw        9     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[42], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture3d (float,float,float,float) t4
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v2.z
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_output o0.xyzw
dcl_temps 8
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r6.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f620e4998cd9a03f-ps.txt

mul r6.w, -r6.x, r6.y
mad r7.xyz, -r6.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v6.xyxx, v6.wwww
sample r0.xyzw, r0.xyxx, t0.xyzw, s4
mad r0.x, cb1[7].z, r0.x, cb1[7].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.xyxx, t1.xyzw, s1
mul r1.xyz, r1.xyzx, v5.xyzx
sample r2.xyzw, v1.zwzz, t2.xyzw, s2
sample r3.xyzw, v2.xyxx, t3.xyzw, s3
mul r0.y, r1.x, l(0.400000)
add r4.xyz, v7.xyzx, -r7.xyzx
dp3 r0.z, r4.xyzx, r4.xyzx
rsq r0.z, r0.z
mul r4.xyz, r0.zzzz, r4.xyzx
mad r4.xyz, r4.xyzx, r0.xxxx, r7.xyzx
mul r5.xyz, r4.yyyy, cb0[7].xyzx
mad r4.xyw, cb0[6].xyxz, r4.xxxx, r5.xyxz
mad r4.xyz, cb0[8].xyzx, r4.zzzz, r4.xywx
add r4.xyz, r4.xyzx, cb0[9].xyzx
lt r4.xyz, |r4.xyzx|, l(0.500000, 0.500000, 0.500000, 0.000000)
and r0.z, r4.y, r4.x
and r0.z, r4.z, r0.z
lt r0.w, l(0.990000), cb0[5].y
and r0.w, r0.w, r0.z
add r2.w, -cb0[5].y, l(1.000000)
mul r0.y, r0.y, r2.w
movc r1.w, r0.w, l(0), r0.y
mul r4.x, cb1[0].y, l(12.989800)
mov r4.yz, l(0,78.233002,45.543201,0)
dp3 r0.y, v6.xyzx, r4.xyzx
sincos r0.y, null, r0.y
mul r0.y, r0.y, l(43758.546875)
frc r0.y, r0.y
mad r4.xy, r0.yyyy, l(16.000000, 30.000000, 0.000000, 0.000000), l(2.000000, 15.000000, 0.000000, 0.000000)
not r0.z, r0.z
lt r0.xw, r4.xxxy, r0.xxxx
lt r0.y, r0.y, l(0.100000)
or r0.x, r0.y, r0.x
and r0.x, r0.x, r0.z
mad r2.xyzw, r2.xyzx, v5.xyzx, r1.xyzw
movc r1.xyzw, r0.xxxx, r2.xyzw, r1.xyzw
and r0.x, r0.z, r0.w
mad r2.xyzw, r3.xyzx, v5.xyzx, r1.xyzw
movc r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw
mul o0.w, r0.w, cb0[5].x
eq r0.w, cb4[0].x, l(1.000000)
if_nz r0.w
  eq r0.w, cb4[0].y, l(1.000000)
  mul r1.xyz, v4.yyyy, cb4[2].xyzx
  mad r1.xyz, cb4[1].xyzx, v4.xxxx, r1.xyzx
  mad r1.xyz, cb4[3].xyzx, v4.zzzz, r1.xyzx
  add r1.xyz, r1.xyzx, cb4[4].xyzx
  movc r1.xyz, r0.wwww, r1.xyzx, v4.xyzx
  add r1.xyz, r1.xyzx, -cb4[6].xyzx
  mul r1.yzw, r1.xxyz, cb4[5].xxyz
  mul r0.w, r1.y, l(0.250000)
  mul r1.y, cb4[0].z, l(0.500000)
  mad r2.x, -cb4[0].z, l(0.500000), l(0.250000)
  max r0.w, r0.w, r1.y
  min r1.x, r2.x, r0.w
  sample r2.xyzw, r1.xzwx, t4.xyzw, s0
  add r2.xyz, r1.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r3.xyzw, r2.xyzx, t4.xyzw, s0
  add r1.xyz, r1.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r1.xyzw, r1.xyzx, t4.xywz, s0
  mov r1.x, r2.w
  mov r1.y, r3.w
else
  mov r1.x, cb2[39].w
  mov r1.y, cb2[40].w
  mov r1.z, cb2[41].w
endif
add r1.xyz, r1.xyzx, v8.xyzx
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
div r0.w, v2.z, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mad_sat r0.w, r0.w, cb3[1].z, cb3[1].w
mad r0.xyz, r0.xyzx, r1.xyzx, -cb3[0].xyzx
mad o0.xyz, r0.wwww, r0.xyzx, cb3[0].xyzx
ret
// Approximately 0 instruction slots used