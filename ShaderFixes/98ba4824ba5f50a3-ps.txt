// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 98ba4824ba5f50a3-ps.txt
// 3DMigoto: 98ba4824ba5f50a3 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 148 4 12
//   undeciphered1a: 16
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_BOX" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 592
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 368 [_SunDir] 3
//   Vector 384 [_SunColor] 3
//   Vector 416 [_FogScatteringData2]
//   Vector 512 [_VolumetricFogSunWorldPos]
//   Vector 528 [_VolumetricFogSunShadowsData]
//   Float 544 [_Jitter]
//   Matrix 448 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   SetTexture 4 [_VolumetricFogSunDepthTexture] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:44:14 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 98ba4824ba5f50a3-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
sample r2.xyzw, v1.zwzz, t1.xyzw, s2
mad r1.y, cb1[7].x, r2.x, cb1[7].y
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
min r1.x, r1.y, r1.x
add r2.y, -cb0[13].x, r17.y
mov r2.xz, r17.xxzx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.y, r3.y, l(0.000010)
lt r1.z, cb0[13].y, r2.y
lt r1.w, cb0[13].y, r1.y
and r1.z, r1.w, r1.z
lt r1.w, r2.y, -cb0[13].y
lt r1.y, r1.y, -cb0[13].y
and r1.y, r1.y, r1.w
or r1.y, r1.y, r1.z
if_z r1.y
  lt r1.x, r1.x, cb0[16].w
  if_nz r1.x
    div r1.xy, r3.xzxx, cb0[20].xzxx
    add r1.xy, r1.xyxx, -cb0[21].xzxx
    sample r1.xyzw, r1.xyxx, t2.wxyz, s3
    ge r1.y, l(0.000000), r1.x
  else
    mov r1.xy, l(1.000000,0,0,0)
  endif
  if_z r1.y
    add r3.w, r3.y, l(0.000010)
    add r1.yzw, -r2.xxyz, r3.xxwz
    dp3 r2.w, r1.yzwy, r1.yzwy
    sqrt r2.w, r2.w
    add r3.xyz, r2.xyzx, -cb0[17].xyzx
    div r4.xyz, r2.wwww, r1.yzwy
    div r5.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r6.xyz, -r3.xyzx, -r5.xyzx
    mul r6.xyz, r4.xyzx, r6.xyzx
    add r3.xyz, -r3.xyzx, r5.xyzx
    mul r3.xyz, r3.xyzx, r4.xyzx
    min r5.xyz, r6.xyzx, r3.xyzx
    max r5.xy, r5.yzyy, r5.xxxx
    max r3.w, r5.y, r5.x
    max r3.w, r3.w, l(0.000000)
    max r3.xyz, r6.xyzx, r3.xyzx
    min r3.xy, r3.yzyy, r3.xxxx
    min r3.x, r3.y, r3.x
    min r3.y, r2.w, cb0[12].z
    min r3.x, r3.y, r3.x
    add r3.x, -r3.w, r3.x
    lt r3.z, l(0.000000), r3.x
    if_nz r3.z
      mul r5.xy, v1.xyxx, cb1[6].xyxx
      dp2 r3.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r5.xyxx
      frc r3.z, r3.z
      add r3.z, r3.z, l(-0.500000)
      div r4.xyz, r3.wwww, r4.xyzx
      add r4.xyz, r2.xyzx, r4.xyzx
      div r2.xy, cb0[18].xzxx, cb0[13].wwww
      log r2.z, r3.x
      mul r2.z, r2.z, l(0.693147182)
      max r2.z, r2.z, l(0.000000)
      mad r2.z, r2.z, cb0[15].x, l(0.100000)
      mul r2.z, r2.z, cb0[13].z
      mul_sat r5.x, r3.y, cb0[15].y
      mul r2.z, r2.z, r5.x
      add r3.y, -r3.w, r3.y
      max r2.z, r2.z, l(0.010000)
      mul r5.xyz, r1.yzwy, r2.zzzz
      div r5.xyz, r5.xyzx, r2.wwww
      div r2.z, r3.x, r2.z
      mul r6.xz, r5.xxzx, cb0[13].wwww
      mul r5.x, cb0[13].z, cb0[13].y
      div r6.y, r5.y, r5.x
      add r5.yz, r4.xxzx, cb0[14].xxzx
      mul r5.yz, r5.yyzy, cb0[13].wwww
      div r5.x, r4.y, r5.x
      add r7.xy, cb0[14].xzxx, cb0[17].xzxx
      frc r5.w, r3.z
      mad r2.z, r5.w, cb0[34].x, r2.z
      add r4.w, r4.y, cb0[13].x
      mul r8.xyz, r4.wwww, cb0[29].xywx
      mad r8.xyz, cb0[28].xywx, r4.xxxx, r8.xyzx
      mad r8.xyz, cb0[30].xywx, r4.zzzz, r8.xyzx
      add r8.xyz, r8.xyzx, cb0[31].xywx
      div r7.zw, r8.xxxy, r8.zzzz
      mad r7.zw, r7.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r3.z, r3.z, cb0[33].y, l(1.000000)
      mul r3.z, r3.z, r3.x
      mul r8.xyz, r1.yzwy, r3.zzzz
      div r8.xyz, r8.xyzx, r2.wwww
      add r8.xyz, r4.xwzx, r8.xyzx
      mul r9.xyz, r8.yyyy, cb0[29].xywx
      mad r9.xyz, cb0[28].xywx, r8.xxxx, r9.xyzx
      mad r9.xyz, cb0[30].xywx, r8.zzzz, r9.xyzx
      add r9.xyz, r9.xyzx, cb0[31].xywx
      div r9.xy, r9.xyxx, r9.zzzz
      mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r3.z, -r3.w, cb0[32].w
      mul_sat r3.z, r3.z, l(0.0285714287)
      mul r3.z, r3.z, cb0[33].x
      div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
      ge r3.x, r3.x, r3.y
      and r3.x, r3.x, l(0x3f800000)
      add r7.zw, r7.zzzw, -r9.xxxy
      add r4.xyz, r4.xwzx, -r8.xyzx
      mov r10.xyzw, l(0,0,0,0)
      mov r3.y, r2.z
      mov r12.xyz, r5.yxzy
      mov r11.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r3.y
        breakc_nz r4.w
        mad r9.zw, r7.xxxy, cb0[13].wwww, -r12.xxxz
        mul r9.zw, r2.xxxy, |r9.zzzw|
        max r4.w, r9.w, r9.z
        sample_l r13.xyzw, r12.xzxx, t3.xyzw, s0, l(0.000000)
        mad r4.w, r4.w, cb0[18].w, |r12.y|
        add r4.w, -r4.w, r13.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r14.xyz, r5.wwww, cb0[11].xyzx
          mul r14.w, r4.w, l(0.400000)
          mul r4.w, r3.w, r3.y
          mad r9.zw, r4.wwww, r7.zzzw, r9.xxxy
          sample_l r15.xyzw, r9.zwzz, t4.xyzw, s4, l(0.000000)
          dp4 r5.w, r15.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mad r15.xyz, r4.wwww, r4.xyzx, r8.xyzx
          add r15.xyz, r15.xyzx, -cb0[32].xyzx
          dp3 r4.w, r15.xyzx, r15.xyzx
          sqrt r4.w, r4.w
          add_sat r4.w, -r4.w, r5.w
          mul r5.w, r3.z, r11.w
          add r4.w, r4.w, l(-1.000000)
          mad r5.w, r5.w, r4.w, l(1.000000)
          mul r13.xyz, r5.wwww, r13.xyzx
          mad r4.w, cb0[33].z, r4.w, l(1.000000)
          mul r14.xyzw, r4.wwww, r14.xyzw
          mul r13.xyz, r13.xyzx, r14.wwww
          mul r14.xyz, r13.xyzx, r14.xyzx
          add r4.w, -r11.w, l(1.000000)
          mad r13.xyzw, r14.xyzw, r4.wwww, r11.xyzw
          lt r4.w, l(0.990000), r13.w
          if_nz r4.w
            mov r10.xyzw, r14.xyzw
            mov r11.xyzw, r13.xyzw
            break
          endif
          mov r10.xyzw, r14.xyzw
          mov r11.xyzw, r13.xyzw
        endif
        add r3.y, r3.y, l(-1.000000)
        add r12.xyz, r6.xyzx, r12.xyzx
      endloop
      lt r2.x, r11.w, l(0.990000)
      and r2.x, r2.x, l(0x3f800000)
      add r2.y, -r11.w, l(1.000000)
      mul r2.z, r3.y, r3.x
      mul r2.x, r2.y, r2.x
      mul r2.x, r2.z, r2.x
      mad r3.xyzw, r10.xyzw, r2.xxxx, r11.xyzw
      div r1.yzw, r1.yyzw, r2.wwww
      dp3 r1.y, r1.yzwy, cb0[23].xyzx
      mul r1.y, r1.y, cb0[26].w
      max r1.y, r1.y, l(0.000000)
      mul r1.y, r1.y, r1.y
      mul r1.y, r1.y, r1.y
      mul r1.y, r1.y, r1.y
      mul r1.y, r3.w, r1.y
      add r2.xyz, -r3.xyzx, cb0[24].xyzx
      mad r3.xyz, r1.yyyy, r2.xyzx, r3.xyzx
      mul r2.xyzw, r3.xyzw, cb0[10].wwww
      mul o0.xyzw, r1.xxxx, r2.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used