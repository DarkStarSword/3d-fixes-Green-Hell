// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a63fb80c63e60e46-ps.txt
// 3DMigoto: a63fb80c63e60e46 |    Unity headers extracted from Amplify_d1_tent
//    Shader "Amplify/d1_tent" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry+0" "RenderType"="Opaque" }
//        Pass 1/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry+0" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_d1_tent:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 194 7 8
//   undeciphered1a: 14
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "INSTANCING_ON" }
//   undeciphered2: 1 6 9 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 128
//   Vector 32 [_LightColor0]
//   Float 64 [_DetailTiling]
//   Float 68 [_Float0]
//   Vector 80 [_Color0]
//   Float 96 [_Metallic]
//   Float 100 [_Smth]
//   Float 104 [_Translucency]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "UnityDrawCallInfo" 16
//   ScalarInt 0 [unity_BaseInstanceID]
//   ConstBuffer "UnityInstancing_PerDraw2" 224
//   Struct 0 [unity_Builtins2Array] 2 112
//   Vector 0 [unity_SHArArray]
//   Vector 16 [unity_SHAgArray]
//   Vector 32 [unity_SHAbArray]
//   Vector 48 [unity_SHBrArray]
//   Vector 64 [unity_SHBgArray]
//   Vector 80 [unity_SHBbArray]
//   Vector 96 [unity_SHCArray]
//   SetTexture 0 [_TextureSample0] 2D 3
//   SetTexture 1 [_TextureSample1] 2D 4
//   SetTexture 2 [_ShadowMapTexture] 2D 2
//   SetTexture 3 [unity_SpecCube0] CUBE 0
//   SetTexture 4 [unity_SpecCube1] CUBE -1
//   SetTexture 5 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerFrame" 4
//   BindCB "UnityReflectionProbes" 5
//   BindCB "UnityProbeVolume" 6
//   BindCB "UnityDrawCallInfo" 7
//   BindCB "UnityInstancing_PerDraw2" 8
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:52:20 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyzw        6     NONE   float   xy w
// TEXCOORD                 7   xyzw        7     NONE   float
// SV_InstanceID            0   x           8     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_constantbuffer cb5[8], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_constantbuffer cb7[1], immediateIndexed
dcl_constantbuffer cb8[14], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyw
dcl_input_ps constant v8.x
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a63fb80c63e60e46-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

iadd r0.x, v8.x, cb7[0].x
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r0.yzw, -r1.xxyz, r15.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r2.xyz, r0.yzwy, r1.wwww
mul r3.xyzw, v1.xyxy, cb0[4].xxyy
sample r4.xyzw, r3.xyxx, t0.xyzw, s3
mul r4.x, r4.w, r4.x
mad r3.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r3.xyxx, r3.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r2.w, r2.w
sample r4.xyzw, r3.zwzz, t1.xyzw, s4
mul r4.x, r4.w, r4.x
mad r3.zw, r4.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
dp2 r4.x, r3.zwzz, r3.zwzz
min r4.x, r4.x, l(1.000000)
add r4.x, -r4.x, l(1.000000)
sqrt r4.x, r4.x
add r3.xy, r3.zwzz, r3.xyxx
mul r3.z, r2.w, r4.x
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
mov r4.x, cb4[9].z
mov r4.y, cb4[10].z
mov r4.z, cb4[11].z
dp3 r2.w, r0.yzwy, r4.xyzx
add r4.xyz, r1.xyzx, -cb3[25].xyzx
dp3 r3.w, r4.xyzx, r4.xyzx
sqrt r3.w, r3.w
add r3.w, -r2.w, r3.w
mad r2.w, cb3[25].w, r3.w, r2.w
mad_sat r2.w, r2.w, cb3[24].z, cb3[24].w
imul null, r0.x, r0.x, l(7)
eq r3.w, cb6[0].x, l(1.000000)
if_nz r3.w
  eq r4.x, cb6[0].y, l(1.000000)
  mul r4.yzw, v3.wwww, cb6[2].xxyz
  mad r4.yzw, cb6[1].xxyz, v2.wwww, r4.yyzw
  mad r4.yzw, cb6[3].xxyz, v4.wwww, r4.yyzw
  add r4.yzw, r4.yyzw, cb6[4].xxyz
  movc r4.xyz, r4.xxxx, r4.yzwy, r1.xyzx
  add r4.xyz, r4.xyzx, -cb6[6].xyzx
  mul r4.yzw, r4.xxyz, cb6[5].xxyz
  mad r4.y, r4.y, l(0.250000), l(0.750000)
  mad r5.x, cb6[0].z, l(0.500000), l(0.750000)
  max r4.x, r4.y, r5.x
  sample r4.xyzw, r4.xzwx, t5.xyzw, s1
else
  mov r4.xyzw, cb8[r0.x + 6].wwww
endif
dp4_sat r4.x, r4.xyzw, cb2[46].xyzw
div r4.yz, v6.xxyx, v6.wwww
sample r5.xyzw, r4.yzyy, t2.xyzw, s2
add r4.x, r4.x, -r5.x
mad r2.w, r2.w, r4.x, r5.x
dp3 r4.x, v2.xyzx, r3.xyzx
dp3 r4.y, v3.xyzx, r3.xyzx
dp3 r4.z, v4.xyzx, r3.xyzx
dp3 r3.x, r4.xyzx, r4.xyzx
rsq r3.x, r3.x
mul r4.xyz, r3.xxxx, r4.xyzx
add r3.xy, -cb0[6].yxyy, l(1.000000, 1.000000, 0.000000, 0.000000)
dp3 r3.z, -r2.xyzx, r4.xyzx
add r3.z, r3.z, r3.z
mad r5.xyz, r4.xyzx, -r3.zzzz, -r2.xyzx
mul r6.xyz, r2.wwww, cb0[2].xyzx
if_nz r3.w
  eq r2.w, cb6[0].y, l(1.000000)
  mul r7.xyz, v3.wwww, cb6[2].xyzx
  mad r7.xyz, cb6[1].xyzx, v2.wwww, r7.xyzx
  mad r7.xyz, cb6[3].xyzx, v4.wwww, r7.xyzx
  add r7.xyz, r7.xyzx, cb6[4].xyzx
  movc r7.xyz, r2.wwww, r7.xyzx, r1.xyzx
  add r7.xyz, r7.xyzx, -cb6[6].xyzx
  mul r7.yzw, r7.xxyz, cb6[5].xxyz
  mul r2.w, r7.y, l(0.250000)
  mul r3.z, cb6[0].z, l(0.500000)
  mad r3.w, -cb6[0].z, l(0.500000), l(0.250000)
  max r2.w, r2.w, r3.z
  min r7.x, r3.w, r2.w
  sample r8.xyzw, r7.xzwx, t5.xyzw, s1
  add r9.xyz, r7.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r9.xyzw, r9.xyzx, t5.xyzw, s1
  add r7.xyz, r7.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r7.xyzw, r7.xyzx, t5.xyzw, s1
  mov r4.w, l(1.000000)
  dp4 r8.x, r8.xyzw, r4.xyzw
  dp4 r8.y, r9.xyzw, r4.xyzw
  dp4 r8.z, r7.xyzw, r4.xyzw
else
  mov r4.w, l(1.000000)
  dp4 r8.x, cb8[r0.x + 0].xyzw, r4.xyzw
  dp4 r8.y, cb8[r0.x + 1].xyzw, r4.xyzw
  dp4 r8.z, cb8[r0.x + 2].xyzw, r4.xyzw
endif
add r7.xyz, r8.xyzx, v5.xyzx
max r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.x, l(0.000000), cb5[2].w
if_nz r0.x
  dp3 r0.x, r5.xyzx, r5.xyzx
  rsq r0.x, r0.x
  mul r8.xyz, r0.xxxx, r5.xyzx
  add r9.xyz, -r1.xyzx, cb5[0].xyzx
  div r9.xyz, r9.xyzx, r8.xyzx
  add r10.xyz, -r1.xyzx, cb5[1].xyzx
  div r10.xyz, r10.xyzx, r8.xyzx
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
  movc r9.xyz, r11.xyzx, r9.xyzx, r10.xyzx
  min r0.x, r9.y, r9.x
  min r0.x, r9.z, r0.x
  add r9.xyz, r1.xyzx, -cb5[2].xyzx
  mad r8.xyz, r8.xyzx, r0.xxxx, r9.xyzx
else
  mov r8.xyz, r5.xyzx
endif
mad r0.x, -r3.x, l(0.700000), l(1.700000)
mul r0.x, r0.x, r3.x
mul r0.x, r0.x, l(6.000000)
sample_l r8.xyzw, r8.xyzx, t3.xyzw, s0, r0.x
add r2.w, r8.w, l(-1.000000)
mad r2.w, cb5[3].w, r2.w, l(1.000000)
log r2.w, r2.w
mul r2.w, r2.w, cb5[3].y
exp r2.w, r2.w
mul r2.w, r2.w, cb5[3].x
mul r9.xyz, r8.xyzx, r2.wwww
lt r3.z, cb5[1].w, l(0.999990)
if_nz r3.z
  lt r3.z, l(0.000000), cb5[6].w
  if_nz r3.z
    dp3 r3.z, r5.xyzx, r5.xyzx
    rsq r3.z, r3.z
    mul r10.xyz, r3.zzzz, r5.xyzx
    add r11.xyz, -r1.xyzx, cb5[4].xyzx
    div r11.xyz, r11.xyzx, r10.xyzx
    add r12.xyz, -r1.xyzx, cb5[5].xyzx
    div r12.xyz, r12.xyzx, r10.xyzx
    lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
    min r3.z, r11.y, r11.x
    min r3.z, r11.z, r3.z
    add r1.xyz, r1.xyzx, -cb5[6].xyzx
    mad r5.xyz, r10.xyzx, r3.zzzz, r1.xyzx
  endif
  sample_l r5.xyzw, r5.xyzx, t4.xyzw, s0, r0.x
  add r0.x, r5.w, l(-1.000000)
  mad r0.x, cb5[7].w, r0.x, l(1.000000)
  log r0.x, r0.x
  mul r0.x, r0.x, cb5[7].y
  exp r0.x, r0.x
  mul r0.x, r0.x, cb5[7].x
  mul r1.xyz, r5.xyzx, r0.xxxx
  mad r5.xyz, r2.wwww, r8.xyzx, -r1.xyzx
  mad r9.xyz, cb5[1].wwww, r5.xyzx, r1.xyzx
endif
dp3 r0.x, r4.xyzx, cb2[0].xyzx
max r1.x, -r0.x, l(0.000000)
mul r1.xyz, r6.xyzx, r1.xxxx
mul r1.xyz, r1.xyzx, cb0[6].zzzz
mul r5.xyz, r3.yyyy, cb0[5].xyzx
mad r0.yzw, r0.yyzw, r1.wwww, cb2[0].xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
max r1.w, r1.w, l(0.001000)
rsq r1.w, r1.w
mul r0.yzw, r0.yyzw, r1.wwww
dp3 r1.w, r4.xyzx, r2.xyzx
mov_sat r0.x, r0.x
dp3_sat r2.x, r4.xyzx, r0.yzwy
dp3_sat r0.y, cb2[0].xyzx, r0.yzwy
mul r0.z, r0.y, r0.y
dp2 r0.z, r0.zzzz, r3.xxxx
add r0.z, r0.z, l(-0.500000)
add r0.w, -r0.x, l(1.000000)
mul r2.y, r0.w, r0.w
mul r2.y, r2.y, r2.y
mul r0.w, r0.w, r2.y
mad r0.w, r0.z, r0.w, l(1.000000)
add r2.y, -|r1.w|, l(1.000000)
mul r2.z, r2.y, r2.y
mul r2.z, r2.z, r2.z
mul r2.y, r2.y, r2.z
mad r0.z, r0.z, r2.y, l(1.000000)
mul r0.z, r0.z, r0.w
mul r0.z, r0.x, r0.z
mul r0.w, r3.x, r3.x
max r0.w, r0.w, l(0.002000)
add r2.z, -r0.w, l(1.000000)
mad r2.w, |r1.w|, r2.z, r0.w
mad r2.z, r0.x, r2.z, r0.w
mul r1.w, |r1.w|, r2.z
mad r1.w, r0.x, r2.w, r1.w
add r1.w, r1.w, l(0.000010)
div r1.w, l(0.500000), r1.w
mul r2.z, r0.w, r0.w
mad r2.w, r2.x, r2.z, -r2.x
mad r2.x, r2.w, r2.x, l(1.000000)
mul r2.z, r2.z, l(0.318309873)
mad r2.x, r2.x, r2.x, l(1.000000012E-007)
div r2.x, r2.z, r2.x
mul r1.w, r1.w, r2.x
mul r1.w, r1.w, l(3.14159274)
mul r0.x, r0.x, r1.w
max r0.x, r0.x, l(0.000000)
mad r0.w, r0.w, r0.w, l(1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
dp3 r1.w, cb0[6].xxxx, cb0[6].xxxx
ne r1.w, r1.w, l(0.000000)
and r1.w, r1.w, l(0x3f800000)
mul r0.x, r0.x, r1.w
add r1.w, -r3.y, l(1.000000)
add_sat r1.w, r1.w, cb0[6].y
mad r2.xzw, r6.xxyz, r0.zzzz, r7.xxyz
mul r3.xzw, r6.xxyz, r0.xxxx
add r0.x, -r0.y, l(1.000000)
mul r0.y, r0.x, r0.x
mul r0.y, r0.y, r0.y
mul r0.x, r0.x, r0.y
mad r0.x, r3.y, r0.x, cb0[6].x
mul r0.xyz, r0.xxxx, r3.xzwx
mad r0.xyz, r5.xyzx, r2.xzwx, r0.xyzx
mul r2.xzw, r9.xxyz, r0.wwww
add r0.w, r1.w, -cb0[6].x
mad r0.w, r2.y, r0.w, cb0[6].x
mad r0.xyz, r2.xzwx, r0.wwww, r0.xyzx
mad o0.xyz, cb0[5].xyzx, r1.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used