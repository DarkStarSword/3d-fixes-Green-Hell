// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 7dd638c2e4d44cf4-ps.txt
// 3DMigoto: 7dd638c2e4d44cf4 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 166 3 12
//   undeciphered1a: 23
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT3" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 720
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 416 [_FogPointLightPosition2] 3
//   Vector 432 [_FogPointLightColor2] 3
//   Vector 448 [_FogPointLightPosition3] 3
//   Vector 464 [_FogPointLightColor3] 3
//   Vector 496 [_SunDir] 3
//   Vector 512 [_SunColor] 3
//   Vector 544 [_FogScatteringData2]
//   Vector 640 [_VolumetricFogSunWorldPos]
//   Vector 656 [_VolumetricFogSunShadowsData]
//   Float 672 [_Jitter]
//   Matrix 576 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_FogOfWar] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:28:27 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[43], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 25
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r23.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 7dd638c2e4d44cf4-ps.txt

mul r23.w, -r23.x, r23.y
mad r24.xyz, -r23.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.z, -cb0[13].x, r24.z
mov r1.xy, r24.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.z, l(0.000010)
lt r0.z, cb0[13].y, r1.z
lt r0.w, cb0[13].y, r0.y
and r0.z, r0.w, r0.z
lt r0.w, r1.z, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r0.w
or r0.y, r0.y, r0.z
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xyxx, cb0[20].xyxx
    add r0.xy, r0.xyxx, -cb0[21].xyxx
    sample r0.xyzw, r0.xyxx, t1.wxyz, s2
    ge r0.y, l(0.000000), r0.x
  else
    mov r0.xy, l(1.000000,0,0,0)
  endif
  if_z r0.y
    add r2.w, r2.z, l(0.000010)
    add r0.yzw, -r1.xxyz, r2.xxyw
    dp3 r1.w, r0.yzwy, r0.yzwy
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.xyz, r0.yzwy, r1.wwww
    dp3 r2.w, r3.xyzx, r2.xyzx
    dp3 r2.x, r2.xyzx, r2.xyzx
    add r2.x, r2.x, -cb0[18].y
    mad r2.x, r2.w, r2.w, -r2.x
    ge r2.y, r2.x, l(0.000000)
    sqrt r2.z, r2.x
    movc r2.x, r2.y, r2.z, r2.x
    add r2.y, -r2.x, -r2.w
    max r2.y, r2.y, l(0.000000)
    min r2.z, r1.w, cb0[12].z
    add r2.x, r2.x, -r2.w
    min r2.x, r2.z, r2.x
    add r2.x, -r2.y, r2.x
    ge r2.w, r2.x, l(0.000000)
    if_nz r2.w
      mul r4.xy, v1.xyxx, cb1[6].xyxx
      dp2 r2.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r4.xyxx
      frc r2.w, r2.w
      add r2.w, r2.w, l(-0.500000)
      mad r4.xyz, r3.xyzx, r2.yyyy, r1.xyzx
      log r1.x, r2.x
      mul r1.x, r1.x, l(0.693147182)
      max r1.x, r1.x, l(0.000000)
      mad r1.x, r1.x, cb0[15].x, l(0.100000)
      mul r1.x, r1.x, cb0[13].z
      mul_sat r1.y, r2.z, cb0[15].y
      mul r1.x, r1.y, r1.x
      add r1.y, -r2.y, r2.z
      max r1.x, r1.x, l(0.010000)
      mul r5.xyz, r0.yzwy, r1.xxxx
      div r5.xyz, r5.xyzx, r1.wwww
      div r1.x, r2.x, r1.x
      add r6.xyz, r4.xyzx, -cb0[22].xyzx
      add r7.xyz, r4.xyzx, -cb0[24].xyzx
      add r8.xyz, r4.xyzx, -cb0[26].xyzx
      add r9.xyz, r4.xyzx, -cb0[28].xyzx
      mul r10.xy, r5.xyxx, cb0[13].wwww
      mul r1.z, cb0[13].z, cb0[13].y
      div r10.z, r5.z, r1.z
      add r11.xy, r4.xyxx, cb0[14].xzxx
      mul r11.xy, r11.xyxx, cb0[13].wwww
      div r1.z, r4.z, r1.z
      add r11.zw, cb0[14].xxxy, cb0[17].xxxy
      add r12.xy, cb0[14].xyxx, r24.xyxx
      frc r2.z, r2.w
      mad r1.x, r2.z, cb0[42].x, r1.x
      add r4.w, r4.z, cb0[13].x
      mul r13.xyz, r4.yyyy, cb0[37].xywx
      mad r13.xyz, cb0[36].xywx, r4.xxxx, r13.xyzx
      mad r13.xyz, cb0[38].xywx, r4.wwww, r13.xyzx
      add r13.xyz, r13.xyzx, cb0[39].xywx
      div r12.zw, r13.xxxy, r13.zzzz
      mad r12.zw, r12.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r2.z, r2.w, cb0[41].y, l(1.000000)
      mul r2.z, r2.z, r2.x
      mul r0.yzw, r0.yyzw, r2.zzzz
      div r0.yzw, r0.yyzw, r1.wwww
      add r0.yzw, r0.yyzw, r4.xxyw
      mul r13.xyz, r0.zzzz, cb0[37].xywx
      mad r13.xyz, cb0[36].xywx, r0.yyyy, r13.xyzx
      mad r13.xyz, cb0[38].xywx, r0.wwww, r13.xyzx
      add r13.xyz, r13.xyzx, cb0[39].xywx
      div r2.zw, r13.xxxy, r13.zzzz
      mad r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r1.w, -r2.y, cb0[40].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[41].x
      div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
      ge r1.y, r2.x, r1.y
      and r1.y, r1.y, l(0x3f800000)
      add r12.zw, -r2.zzzw, r12.zzzw
      add r4.xyz, -r0.yzwy, r4.xywx
      mov r13.xyzw, l(0,0,0,0)
      mov r14.xyz, r6.xyzx
      mov r15.xyz, r7.xyzx
      mov r16.xyz, r8.xyzx
      mov r17.xyz, r9.xyzx
      mov r19.xy, r11.xyxx
      mov r2.x, r1.x
      mov r19.z, r1.z
      mov r18.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r2.x
        breakc_nz r3.w
        mad r20.xy, r11.zwzz, cb0[13].wwww, -r19.xyxx
        mul r20.xy, r20.xyxx, cb0[18].xxxx
        dp2 r3.w, r20.xyxx, r20.xyxx
        sample_l r20.xyzw, r19.xyxx, t2.xyzw, s0, l(0.000000)
        mad r3.w, r3.w, cb0[18].w, |r19.z|
        add r3.w, -r3.w, r20.w
        mad r21.xy, r12.xyxx, cb0[13].wwww, -r19.xyxx
        dp2 r4.w, r21.xyxx, r21.xyxx
        add r4.w, -r4.w, cb0[12].x
        max r4.w, r4.w, l(0.000000)
        mad r3.w, -r4.w, cb0[12].y, r3.w
        lt r4.w, l(0.000000), r3.w
        if_nz r4.w
          add r4.w, -r3.w, l(1.000000)
          mul r21.xyz, r4.wwww, cb0[11].xyzx
          mul r21.w, r3.w, l(0.400000)
          mul r3.w, r2.y, r2.x
          mad r22.xy, r3.wwww, r12.zwzz, r2.zwzz
          sample_l r22.xyzw, r22.xyxx, t3.xyzw, s3, l(0.000000)
          dp4 r4.w, r22.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mad r22.xyz, r3.wwww, r4.xyzx, r0.yzwy
          add r22.xyz, r22.xyzx, -cb0[40].xyzx
          dp3 r3.w, r22.xyzx, r22.xyzx
          sqrt r3.w, r3.w
          add_sat r3.w, -r3.w, r4.w
          mul r4.w, r1.w, r18.w
          add r3.w, r3.w, l(-1.000000)
          mad r4.w, r4.w, r3.w, l(1.000000)
          mad r3.w, cb0[41].z, r3.w, l(1.000000)
          mul r21.xyzw, r3.wwww, r21.xyzw
          dp3 r3.w, r14.xyzx, r14.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          dp3 r5.w, r15.xyzx, r15.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r6.w, r16.xyzx, r16.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r17.xyzx, r17.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          mul r22.xyz, r6.wwww, cb0[27].xyzx
          mad r22.xyz, cb0[29].xyzx, r7.wwww, r22.xyzx
          mad r22.xyz, cb0[25].xyzx, r5.wwww, r22.xyzx
          mad r22.xyz, cb0[23].xyzx, r3.wwww, r22.xyzx
          mul r22.xyz, r21.wwww, r22.xyzx
          mad r20.xyz, r20.xyzx, r4.wwww, r22.xyzx
          mul r20.xyz, r21.wwww, r20.xyzx
          mul r21.xyz, r20.xyzx, r21.xyzx
          add r3.w, -r18.w, l(1.000000)
          mad r20.xyzw, r21.xyzw, r3.wwww, r18.xyzw
          lt r3.w, l(0.990000), r20.w
          if_nz r3.w
            mov r13.xyzw, r21.xyzw
            mov r18.xyzw, r20.xyzw
            break
          endif
          mov r13.xyzw, r21.xyzw
          mov r18.xyzw, r20.xyzw
        endif
        add r14.xyz, r5.xyzx, r14.xyzx
        add r15.xyz, r5.xyzx, r15.xyzx
        add r16.xyz, r5.xyzx, r16.xyzx
        add r17.xyz, r5.xyzx, r17.xyzx
        add r2.x, r2.x, l(-1.000000)
        add r19.xyz, r10.xyzx, r19.xyzx
      endloop
      lt r0.y, r18.w, l(0.990000)
      and r0.y, r0.y, l(0x3f800000)
      add r0.z, -r18.w, l(1.000000)
      mul r0.w, r1.y, r2.x
      mul r0.y, r0.z, r0.y
      mul r0.y, r0.w, r0.y
      mad r1.xyzw, r13.xyzw, r0.yyyy, r18.xyzw
      dp3 r0.y, r3.xyzx, cb0[31].xyzx
      mul r0.y, r0.y, cb0[34].w
      max r0.y, r0.y, l(0.000000)
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r1.w, r0.y
      add r2.xyz, -r1.xyzx, cb0[32].xyzx
      mad r1.xyz, r0.yyyy, r2.xyzx, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul o0.xyzw, r0.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used