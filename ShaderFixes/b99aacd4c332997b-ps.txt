// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b99aacd4c332997b-ps.txt
// 3DMigoto: b99aacd4c332997b |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 114 3 10
//   undeciphered1a: 16
//   Keywords { "FOG_AREA_SPHERE" "FOG_VOID_SPHERE" "FOG_POINT_LIGHT1" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 528
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 416 [_SunDir] 3
//   Vector 432 [_SunColor] 3
//   Vector 464 [_FogScatteringData2]
//   Float 480 [_Jitter]
//   Float 496 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:03:04 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b99aacd4c332997b-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r17.y
mov r1.xz, r17.xxzx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.y, l(0.000010)
lt r2.xy, cb0[13].yyyy, r1.ywyy
and r2.x, r2.y, r2.x
lt r2.y, r1.y, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.y
or r1.w, r1.w, r2.x
if_z r1.w
  add r0.w, r0.y, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xwzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.xyz, r1.xyzx, -cb0[19].xyzx
  div r3.xyz, r0.xyzx, r0.wwww
  dp3 r1.w, r3.xyzx, r2.xyzx
  dp3 r2.x, r2.xyzx, r2.xyzx
  add r2.x, r2.x, -cb0[20].y
  mad r2.x, r1.w, r1.w, -r2.x
  ge r2.y, r2.x, l(0.000000)
  sqrt r2.z, r2.x
  movc r2.x, r2.y, r2.z, r2.x
  add r2.y, -r1.w, -r2.x
  max r2.y, r2.y, l(0.000000)
  min r2.z, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.x
  min r1.w, r2.z, r1.w
  add r1.w, -r2.y, r1.w
  ge r2.x, r1.w, l(0.000000)
  if_nz r2.x
    mad r1.xyz, r3.xyzx, r2.yyyy, r1.xyzx
    mul r4.xyz, r0.xyzx, r1.wwww
    div r4.xyz, r4.xyzx, r0.wwww
    add r4.xyz, r1.xyzx, r4.xyzx
    add r4.xyz, -r4.xyzx, cb0[17].xyzx
    dp3 r2.x, r4.xyzx, r4.xyzx
    sqrt r2.x, r2.x
    mad r2.x, r2.x, cb0[18].x, l(-1.000000)
    mad_sat r2.x, cb0[18].w, r2.x, l(1.000000)
    lt r2.w, l(0.000000), r2.x
    if_nz r2.w
      log r2.w, r1.w
      mul r2.w, r2.w, l(0.693147182)
      max r2.w, r2.w, l(0.000000)
      mad r2.w, r2.w, cb0[15].x, l(0.100000)
      mul r2.w, r2.w, cb0[13].z
      mul_sat r3.w, r2.z, cb0[15].y
      mul r2.w, r2.w, r3.w
      add r2.y, -r2.y, r2.z
      max r2.z, r2.w, l(0.010000)
      mul r0.xyz, r0.xyzx, r2.zzzz
      div r0.xyz, r0.xyzx, r0.wwww
      div r0.w, r1.w, r2.z
      add r4.xyz, r1.xyzx, -cb0[21].xyzx
      add r5.xyz, r1.xyzx, -cb0[23].xyzx
      mul r6.xz, r0.xxzx, cb0[13].wwww
      mul r2.z, cb0[13].z, cb0[13].y
      div r6.y, r0.y, r2.z
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r2.z
      add r2.zw, cb0[14].xxxz, cb0[19].xxxz
      frc r3.w, cb0[31].x
      mad r0.w, r3.w, cb0[30].x, r0.w
      ge r1.w, r1.w, r2.y
      and r1.w, r1.w, l(0x3f800000)
      mov r7.xyzw, l(0,0,0,0)
      mov r8.xyz, r4.xyzx
      mov r9.xyz, r5.xyzx
      mov r2.y, r0.w
      mov r11.xyz, r1.xyzx
      mov r10.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r2.y
        breakc_nz r3.w
        mad r12.xy, r2.zwzz, cb0[13].wwww, -r11.xzxx
        mul r12.xy, r12.xyxx, cb0[20].xxxx
        dp2 r3.w, r12.xyxx, r12.xyxx
        sample_l r12.xyzw, r11.xzxx, t2.xyzw, s0, l(0.000000)
        mad r3.w, r3.w, cb0[20].w, |r11.y|
        add r3.w, -r3.w, r12.w
        lt r4.w, l(0.000000), r3.w
        if_nz r4.w
          add r4.w, -r3.w, l(1.000000)
          mul r13.xyz, r4.wwww, cb0[11].xyzx
          mul r14.w, r3.w, l(0.400000)
          dp3 r3.w, r8.xyzx, r8.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          dp3 r4.w, r9.xyzx, r9.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mul r15.xyz, r3.wwww, cb0[22].xyzx
          mad r15.xyz, cb0[24].xyzx, r4.wwww, r15.xyzx
          mad r12.xyz, r15.xyzx, r14.wwww, r12.xyzx
          mul r12.xyz, r14.wwww, r12.xyzx
          mul r14.xyz, r12.xyzx, r13.xyzx
          add r3.w, -r10.w, l(1.000000)
          mad r12.xyzw, r14.xyzw, r3.wwww, r10.xyzw
          lt r3.w, l(0.990000), r12.w
          if_nz r3.w
            mov r7.xyzw, r14.xyzw
            mov r10.xyzw, r12.xyzw
            break
          endif
          mov r7.xyzw, r14.xyzw
          mov r10.xyzw, r12.xyzw
        endif
        add r8.xyz, r0.xyzx, r8.xyzx
        add r9.xyz, r0.xyzx, r9.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r11.xyz, r6.xyzx, r11.xyzx
      endloop
      lt r0.x, r10.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r10.w, l(1.000000)
      mul r0.z, r1.w, r2.y
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.z, r0.x
      mad r0.xyzw, r7.xyzw, r0.xxxx, r10.xyzw
      dp3 r1.x, r3.xyzx, cb0[26].xyzx
      mul r1.x, r1.x, cb0[29].w
      max r1.x, r1.x, l(0.000000)
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r0.w, r1.x
      add r1.yzw, -r0.xxyz, cb0[27].xxyz
      mad r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
      mul r0.xyzw, r0.xyzw, cb0[10].wwww
      mul o0.xyzw, r2.xxxx, r0.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used