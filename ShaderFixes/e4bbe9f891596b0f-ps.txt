// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e4bbe9f891596b0f-ps.txt
// 3DMigoto: e4bbe9f891596b0f |    Unity headers extracted from Amplify_mud_buildings
//    Shader "Amplify/mud_buildings" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry+0" "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry+0" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_mud_buildings:
//   API d3d11
//   Shader model ps_5_0
//   undeciphered1: 201802150 206 11 8
//   undeciphered1a: 14
//   Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "INSTANCING_ON" "_LIGHTEN_ON" "_1OR2COLORVARIABLE_ON" "_INVERTMASK_ON" }
//   undeciphered2: 1 10 8 9 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 144
//   Vector 32 [_LightColor0]
//   Float 64 [_Tilingdetail]
//   Float 68 [_Tilingdetail2]
//   Float 72 [_MaskContrast]
//   Float 76 [_cracknrmpower]
//   Float 80 [_cracktilling]
//   Float 84 [_AlbedoVariabletilling]
//   Float 88 [_variablepower]
//   Vector 96 [_AlbedoColor]
//   Float 112 [_Smth1]
//   Float 116 [_Smth2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "UnityDrawCallInfo" 16
//   ScalarInt 0 [unity_BaseInstanceID]
//   ConstBuffer "UnityInstancing_PerDraw2" 224
//   Struct 0 [unity_Builtins2Array] 2 112
//   Vector 0 [unity_SHArArray]
//   Vector 16 [unity_SHAgArray]
//   Vector 32 [unity_SHAbArray]
//   Vector 48 [unity_SHBrArray]
//   Vector 64 [unity_SHBgArray]
//   Vector 80 [unity_SHBbArray]
//   Vector 96 [unity_SHCArray]
//   SetTexture 0 [_mask] 2D 4
//   SetTexture 1 [_nrm1] 2D 2
//   SetTexture 2 [_nrm2] 2D 3
//   SetTexture 3 [_cracknrm] 2D 5
//   SetTexture 4 [_Albedovariable] 2D 6
//   SetTexture 5 [_albedo1] 2D 7
//   SetTexture 6 [_albedo2] 2D 8
//   SetTexture 7 [unity_SpecCube0] CUBE 0
//   SetTexture 8 [unity_SpecCube1] CUBE -1
//   SetTexture 9 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityFog" 3
//   BindCB "UnityReflectionProbes" 4
//   BindCB "UnityProbeVolume" 5
//   BindCB "UnityDrawCallInfo" 6
//   BindCB "UnityInstancing_PerDraw2" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:23:03 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 5     z         1     NONE   float     z
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyzw        6     NONE   float
// TEXCOORD                 7   xyzw        7     NONE   float
// SV_InstanceID            0   x           8     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb6[1], immediateIndexed
dcl_constantbuffer cb7[14], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texturecube (float,float,float,float) t7
dcl_resource_texturecube (float,float,float,float) t8
dcl_resource_texture3d (float,float,float,float) t9
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps constant v8.x
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e4bbe9f891596b0f-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

iadd r0.x, v8.x, cb6[0].x
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r0.yzw, -r1.xxyz, r15.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r2.xyz, r0.yzwy, r1.wwww
mul r3.xyzw, v1.xyxy, cb0[4].xxyy
sample_indexable(texture2d)(float,float,float,float) r4.xyz, v1.xyxx, t0.xyzw, s4
mul r4.yzw, r4.xxyz, cb0[4].zzzz
mad r2.w, -r4.x, cb0[4].z, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r3.xyxx, t1.xywz, s2
mul r5.x, r5.z, r5.x
mad r5.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r4.x, r5.xyxx, r5.xyxx
min r4.x, r4.x, l(1.000000)
add r4.x, -r4.x, l(1.000000)
sqrt r5.z, r4.x
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r3.zwzz, t2.xywz, s3
mul r6.x, r6.z, r6.x
mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r4.x, r6.xyxx, r6.xyxx
min r4.x, r4.x, l(1.000000)
add r4.x, -r4.x, l(1.000000)
sqrt r6.z, r4.x
add r6.xyz, -r5.xyzx, r6.xyzx
mad r5.xyz, r2.wwww, r6.xyzx, r5.xyzx
mul r6.xyzw, v1.xyxy, cb0[5].xxyy
sample_indexable(texture2d)(float,float,float,float) r7.xyz, r6.xyxx, t3.xywz, s5
mul r7.x, r7.z, r7.x
mad r6.xy, r7.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r7.xy, r6.xyxx, cb0[4].wwww
dp2 r4.x, r7.xyxx, r7.xyxx
min r4.x, r4.x, l(1.000000)
add r4.x, -r4.x, l(1.000000)
sqrt r4.x, r4.x
mad r7.xy, r6.xyxx, cb0[4].wwww, r5.xyxx
mul r7.z, r4.x, r5.z
dp3 r4.x, r7.xyzx, r7.xyzx
rsq r4.x, r4.x
mul r5.xyz, r4.xxxx, r7.xyzx
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r6.zwzz, t4.xyzw, s6
add r6.xyz, r6.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r6.xyz, cb0[5].zzzz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r7.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r4.xyz, r4.yzwy, r7.xyzx, r6.xyzx
sample_indexable(texture2d)(float,float,float,float) r6.xyzw, r3.xyxx, t5.xyzw, s7
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.zwzz, t6.xyzw, s8
add r3.xyz, -r6.xyzx, r3.xyzx
mad r3.xyz, r2.wwww, r3.xyzx, r6.xyzx
add r6.xyz, -cb0[6].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r3.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad_sat r3.xyz, -r6.xyzx, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.xyz, r3.xyzx, r4.xyzx
mul r4.x, r6.w, cb0[7].x
mad r3.w, r3.w, cb0[7].y, -r4.x
mad r2.w, r2.w, r3.w, r4.x
imul null, r0.x, r0.x, l(7)
eq r3.w, cb5[0].x, l(1.000000)
if_nz r3.w
  eq r4.x, cb5[0].y, l(1.000000)
  mul r4.yzw, v3.wwww, cb5[2].xxyz
  mad r4.yzw, cb5[1].xxyz, v2.wwww, r4.yyzw
  mad r4.yzw, cb5[3].xxyz, v4.wwww, r4.yyzw
  add r4.yzw, r4.yyzw, cb5[4].xxyz
  movc r4.xyz, r4.xxxx, r4.yzwy, r1.xyzx
  add r4.xyz, r4.xyzx, -cb5[6].xyzx
  mul r4.yzw, r4.xxyz, cb5[5].xxyz
  mad r4.y, r4.y, l(0.250000), l(0.750000)
  mad r5.w, cb5[0].z, l(0.500000), l(0.750000)
  max r4.x, r4.y, r5.w
  sample_indexable(texture3d)(float,float,float,float) r4.xyzw, r4.xzwx, t9.xyzw, s1
else
  mov r4.xyzw, cb7[r0.x + 6].wwww
endif
dp4_sat r4.x, r4.xyzw, cb2[46].xyzw
dp3 r6.x, v2.xyzx, r5.xyzx
dp3 r6.y, v3.xyzx, r5.xyzx
dp3 r6.z, v4.xyzx, r5.xyzx
dp3 r4.y, r6.xyzx, r6.xyzx
rsq r4.y, r4.y
mul r5.xyz, r4.yyyy, r6.xyzx
add r4.y, -r2.w, l(1.000000)
dp3 r4.z, -r2.xyzx, r5.xyzx
add r4.z, r4.z, r4.z
mad r6.xyz, r5.xyzx, -r4.zzzz, -r2.xyzx
mul r4.xzw, r4.xxxx, cb0[2].xxyz
if_nz r3.w
  eq r3.w, cb5[0].y, l(1.000000)
  mul r7.xyz, v3.wwww, cb5[2].xyzx
  mad r7.xyz, cb5[1].xyzx, v2.wwww, r7.xyzx
  mad r7.xyz, cb5[3].xyzx, v4.wwww, r7.xyzx
  add r7.xyz, r7.xyzx, cb5[4].xyzx
  movc r7.xyz, r3.wwww, r7.xyzx, r1.xyzx
  add r7.xyz, r7.xyzx, -cb5[6].xyzx
  mul r7.yzw, r7.xxyz, cb5[5].xxyz
  mul r3.w, r7.y, l(0.250000)
  mul r6.w, cb5[0].z, l(0.500000)
  mad r7.y, -cb5[0].z, l(0.500000), l(0.250000)
  max r3.w, r3.w, r6.w
  min r7.x, r7.y, r3.w
  sample_indexable(texture3d)(float,float,float,float) r8.xyzw, r7.xzwx, t9.xyzw, s1
  add r9.xyz, r7.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample_indexable(texture3d)(float,float,float,float) r9.xyzw, r9.xyzx, t9.xyzw, s1
  add r7.xyz, r7.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample_indexable(texture3d)(float,float,float,float) r7.xyzw, r7.xyzx, t9.xyzw, s1
  mov r5.w, l(1.000000)
  dp4 r8.x, r8.xyzw, r5.xyzw
  dp4 r8.y, r9.xyzw, r5.xyzw
  dp4 r8.z, r7.xyzw, r5.xyzw
else
  mov r5.w, l(1.000000)
  dp4 r8.x, cb7[r0.x + 0].xyzw, r5.xyzw
  dp4 r8.y, cb7[r0.x + 1].xyzw, r5.xyzw
  dp4 r8.z, cb7[r0.x + 2].xyzw, r5.xyzw
endif
add r7.xyz, r8.xyzx, v5.xyzx
max r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.x, l(0.000000), cb4[2].w
if_nz r0.x
  dp3 r0.x, r6.xyzx, r6.xyzx
  rsq r0.x, r0.x
  mul r8.xyz, r0.xxxx, r6.xyzx
  add r9.xyz, -r1.xyzx, cb4[0].xyzx
  div r9.xyz, r9.xyzx, r8.xyzx
  add r10.xyz, -r1.xyzx, cb4[1].xyzx
  div r10.xyz, r10.xyzx, r8.xyzx
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
  movc r9.xyz, r11.xyzx, r9.xyzx, r10.xyzx
  min r0.x, r9.y, r9.x
  min r0.x, r9.z, r0.x
  add r9.xyz, r1.xyzx, -cb4[2].xyzx
  mad r8.xyz, r8.xyzx, r0.xxxx, r9.xyzx
else
  mov r8.xyz, r6.xyzx
endif
mad r0.x, -r4.y, l(0.700000), l(1.700000)
mul r0.x, r0.x, r4.y
mul r0.x, r0.x, l(6.000000)
sample_l_indexable(texturecube)(float,float,float,float) r8.xyzw, r8.xyzx, t7.xyzw, s0, r0.x
add r3.w, r8.w, l(-1.000000)
mad r3.w, cb4[3].w, r3.w, l(1.000000)
log r3.w, r3.w
mul r3.w, r3.w, cb4[3].y
exp r3.w, r3.w
mul r3.w, r3.w, cb4[3].x
mul r9.xyz, r8.xyzx, r3.wwww
lt r5.w, cb4[1].w, l(0.999990)
if_nz r5.w
  lt r5.w, l(0.000000), cb4[6].w
  if_nz r5.w
    dp3 r5.w, r6.xyzx, r6.xyzx
    rsq r5.w, r5.w
    mul r10.xyz, r5.wwww, r6.xyzx
    add r11.xyz, -r1.xyzx, cb4[4].xyzx
    div r11.xyz, r11.xyzx, r10.xyzx
    add r12.xyz, -r1.xyzx, cb4[5].xyzx
    div r12.xyz, r12.xyzx, r10.xyzx
    lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
    min r5.w, r11.y, r11.x
    min r5.w, r11.z, r5.w
    add r1.xyz, r1.xyzx, -cb4[6].xyzx
    mad r6.xyz, r10.xyzx, r5.wwww, r1.xyzx
  endif
  sample_l_indexable(texturecube)(float,float,float,float) r6.xyzw, r6.xyzx, t8.xyzw, s0, r0.x
  add r0.x, r6.w, l(-1.000000)
  mad r0.x, cb4[7].w, r0.x, l(1.000000)
  log r0.x, r0.x
  mul r0.x, r0.x, cb4[7].y
  exp r0.x, r0.x
  mul r0.x, r0.x, cb4[7].x
  mul r1.xyz, r6.xyzx, r0.xxxx
  mad r6.xyz, r3.wwww, r8.xyzx, -r1.xyzx
  mad r9.xyz, cb4[1].wwww, r6.xyzx, r1.xyzx
endif
mul r1.xyz, r3.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r0.xyz, r0.yzwy, r1.wwww, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r5.xyzx, r2.xyzx
dp3_sat r1.w, r5.xyzx, cb2[0].xyzx
dp3_sat r2.x, r5.xyzx, r0.xyzx
dp3_sat r0.x, cb2[0].xyzx, r0.xyzx
mul r0.y, r0.x, r0.x
dp2 r0.y, r0.yyyy, r4.yyyy
add r0.y, r0.y, l(-0.500000)
add r0.z, -r1.w, l(1.000000)
mul r2.y, r0.z, r0.z
mul r2.y, r2.y, r2.y
mul r0.z, r0.z, r2.y
mad r0.z, r0.y, r0.z, l(1.000000)
add r2.y, -|r0.w|, l(1.000000)
mul r2.z, r2.y, r2.y
mul r2.z, r2.z, r2.z
mul r2.y, r2.y, r2.z
mad r0.y, r0.y, r2.y, l(1.000000)
mul r0.y, r0.y, r0.z
mul r0.z, r4.y, r4.y
max r0.z, r0.z, l(0.002000)
add r2.z, -r0.z, l(1.000000)
mad r3.x, |r0.w|, r2.z, r0.z
mad r2.z, r1.w, r2.z, r0.z
mul r0.w, |r0.w|, r2.z
mad r0.w, r1.w, r3.x, r0.w
add r0.w, r0.w, l(0.000010)
div r0.w, l(0.500000), r0.w
mul r2.z, r0.z, r0.z
mad r3.x, r2.x, r2.z, -r2.x
mad r2.x, r3.x, r2.x, l(1.000000)
mul r2.z, r2.z, l(0.318309873)
mad r2.x, r2.x, r2.x, l(1.000000012E-007)
div r2.x, r2.z, r2.x
mul r0.w, r0.w, r2.x
mul r0.w, r0.w, l(3.14159274)
mul r0.yw, r1.wwww, r0.yyyw
max r0.w, r0.w, l(0.000000)
mad r0.z, r0.z, r0.z, l(1.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add_sat r1.w, r2.w, l(0.0400000215)
mad r2.xzw, r4.xxzw, r0.yyyy, r7.xxyz
mul r3.xyz, r4.xzwx, r0.wwww
add r0.x, -r0.x, l(1.000000)
mul r0.y, r0.x, r0.x
mul r0.y, r0.y, r0.y
mul r0.x, r0.x, r0.y
mad r0.x, r0.x, l(0.960000), l(0.040000)
mul r0.xyw, r0.xxxx, r3.xyxz
mad r0.xyw, r1.xyxz, r2.xzxw, r0.xyxw
mul r1.xyz, r9.xyzx, r0.zzzz
add r0.z, r1.w, l(-0.040000)
mad r0.z, r2.y, r0.z, l(0.040000)
mad r0.xyz, r1.xyzx, r0.zzzz, r0.xywx
div r0.w, v1.z, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mad_sat r0.w, r0.w, cb3[1].z, cb3[1].w
add r0.xyz, r0.xyzx, -cb3[0].xyzx
mad o0.xyz, r0.wwww, r0.xyzx, cb3[0].xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used