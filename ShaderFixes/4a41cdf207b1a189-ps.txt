// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4a41cdf207b1a189-ps.txt
// 3DMigoto: 4a41cdf207b1a189 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 166 2 10
//   undeciphered1a: 20
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_VOID_SPHERE" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 640
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 416 [_SunDir] 3
//   Vector 432 [_SunColor] 3
//   Vector 464 [_FogScatteringData2]
//   Vector 560 [_VolumetricFogSunWorldPos]
//   Vector 576 [_VolumetricFogSunShadowsData]
//   Float 592 [_Jitter]
//   Matrix 496 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:58:46 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[38], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 22
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r20.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4a41cdf207b1a189-ps.txt

mul r20.w, -r20.x, r20.y
mad r21.xyz, -r20.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r21.y
mov r1.xz, r21.xxzx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.y, l(0.000010)
lt r2.xy, cb0[13].yyyy, r1.ywyy
and r2.x, r2.y, r2.x
lt r2.y, r1.y, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.y
or r1.w, r1.w, r2.x
if_z r1.w
  add r0.w, r0.y, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xwzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.xyz, r1.xyzx, -cb0[19].xyzx
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r5.xyz, -r2.xyzx, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.xyz, -r2.xyzx, r4.xyzx
  mul r2.xyz, r2.xyzx, r3.xyzx
  min r4.xyz, r5.xyzx, r2.xyzx
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.xyz, r5.xyzx, r2.xyzx
  min r2.xy, r2.yzyy, r2.xxxx
  min r2.x, r2.y, r2.x
  min r2.y, r0.w, cb0[12].z
  min r2.x, r2.y, r2.x
  add r2.x, -r1.w, r2.x
  lt r2.z, l(0.000000), r2.x
  if_nz r2.z
    div r3.xyz, r1.wwww, r3.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    mul r1.xyz, r0.xyzx, r2.xxxx
    div r1.xyz, r1.xyzx, r0.wwww
    add r1.xyz, r1.xyzx, r3.xyzx
    add r1.xyz, -r1.xyzx, cb0[17].xyzx
    dp3 r1.x, r1.xyzx, r1.xyzx
    sqrt r1.x, r1.x
    mad r1.x, r1.x, cb0[18].x, l(-1.000000)
    mad_sat r1.x, cb0[18].w, r1.x, l(1.000000)
    lt r1.y, l(0.000000), r1.x
    if_nz r1.y
      mul r1.yz, v1.xxyx, cb1[6].xxyx
      dp2 r1.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r1.yzyy
      frc r1.y, r1.y
      add r1.y, r1.y, l(-0.500000)
      div r2.zw, cb0[20].xxxz, cb0[13].wwww
      log r1.z, r2.x
      mul r1.z, r1.z, l(0.693147182)
      max r1.z, r1.z, l(0.000000)
      mad r1.z, r1.z, cb0[15].x, l(0.100000)
      mul r1.z, r1.z, cb0[13].z
      mul_sat r4.x, r2.y, cb0[15].y
      mul r1.z, r1.z, r4.x
      add r2.y, -r1.w, r2.y
      max r1.z, r1.z, l(0.010000)
      mul r4.xyz, r0.xyzx, r1.zzzz
      div r4.xyz, r4.xyzx, r0.wwww
      div r1.z, r2.x, r1.z
      add r5.xyz, r3.xyzx, -cb0[21].xyzx
      add r6.xyz, r3.xyzx, -cb0[23].xyzx
      mul r7.xz, r4.xxzx, cb0[13].wwww
      mul r4.w, cb0[13].z, cb0[13].y
      div r7.y, r4.y, r4.w
      add r8.xy, r3.xzxx, cb0[14].xzxx
      mul r8.xy, r8.xyxx, cb0[13].wwww
      div r4.w, r3.y, r4.w
      add r8.zw, cb0[14].xxxz, cb0[19].xxxz
      add r9.xy, cb0[14].xzxx, r21.xzxx
      frc r5.w, r1.y
      mad r1.z, r5.w, cb0[37].x, r1.z
      add r3.w, r3.y, cb0[13].x
      mul r10.xyz, r3.wwww, cb0[32].xywx
      mad r10.xyz, cb0[31].xywx, r3.xxxx, r10.xyzx
      mad r10.xyz, cb0[33].xywx, r3.zzzz, r10.xyzx
      add r10.xyz, r10.xyzx, cb0[34].xywx
      div r9.zw, r10.xxxy, r10.zzzz
      mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r1.y, r1.y, cb0[36].y, l(1.000000)
      mul r1.y, r1.y, r2.x
      mul r10.xyz, r0.xyzx, r1.yyyy
      div r10.xyz, r10.xyzx, r0.wwww
      add r10.xyz, r3.xwzx, r10.xyzx
      mul r11.xyz, r10.yyyy, cb0[32].xywx
      mad r11.xyz, cb0[31].xywx, r10.xxxx, r11.xyzx
      mad r11.xyz, cb0[33].xywx, r10.zzzz, r11.xyzx
      add r11.xyz, r11.xyzx, cb0[34].xywx
      div r11.xy, r11.xyxx, r11.zzzz
      mad r11.xy, r11.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r1.y, -r1.w, cb0[35].w
      mul_sat r1.y, r1.y, l(0.0285714287)
      mul r1.y, r1.y, cb0[36].x
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
      ge r2.x, r2.x, r2.y
      and r2.x, r2.x, l(0x3f800000)
      add r9.zw, r9.zzzw, -r11.xxxy
      add r3.xyz, r3.xwzx, -r10.xyzx
      mov r12.xyzw, l(0,0,0,0)
      mov r13.xyz, r5.xyzx
      mov r14.xyz, r6.xyzx
      mov r16.xz, r8.xxyx
      mov r2.y, r1.z
      mov r16.y, r4.w
      mov r15.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r2.y
        breakc_nz r3.w
        mad r11.zw, r8.zzzw, cb0[13].wwww, -r16.xxxz
        mul r11.zw, r2.zzzw, |r11.zzzw|
        max r3.w, r11.w, r11.z
        sample_l r17.xyzw, r16.xzxx, t1.xyzw, s0, l(0.000000)
        mad r3.w, r3.w, cb0[20].w, |r16.y|
        add r3.w, -r3.w, r17.w
        mad r11.zw, r9.xxxy, cb0[13].wwww, -r16.xxxz
        dp2 r5.w, r11.zwzz, r11.zwzz
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r3.w, -r5.w, cb0[12].y, r3.w
        lt r5.w, l(0.000000), r3.w
        if_nz r5.w
          add r5.w, -r3.w, l(1.000000)
          mul r18.xyz, r5.wwww, cb0[11].xyzx
          mul r18.w, r3.w, l(0.400000)
          mul r3.w, r1.w, r2.y
          mad r11.zw, r3.wwww, r9.zzzw, r11.xxxy
          sample_l r19.xyzw, r11.zwzz, t2.xyzw, s2, l(0.000000)
          dp4 r5.w, r19.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mad r19.xyz, r3.wwww, r3.xyzx, r10.xyzx
          add r19.xyz, r19.xyzx, -cb0[35].xyzx
          dp3 r3.w, r19.xyzx, r19.xyzx
          sqrt r3.w, r3.w
          add_sat r3.w, -r3.w, r5.w
          mul r5.w, r1.y, r15.w
          add r3.w, r3.w, l(-1.000000)
          mad r5.w, r5.w, r3.w, l(1.000000)
          mad r3.w, cb0[36].z, r3.w, l(1.000000)
          mul r18.xyzw, r3.wwww, r18.xyzw
          dp3 r3.w, r13.xyzx, r13.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          dp3 r6.w, r14.xyzx, r14.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          mul r19.xyz, r3.wwww, cb0[22].xyzx
          mad r19.xyz, cb0[24].xyzx, r6.wwww, r19.xyzx
          mul r19.xyz, r18.wwww, r19.xyzx
          mad r17.xyz, r17.xyzx, r5.wwww, r19.xyzx
          mul r17.xyz, r18.wwww, r17.xyzx
          mul r18.xyz, r17.xyzx, r18.xyzx
          add r3.w, -r15.w, l(1.000000)
          mad r17.xyzw, r18.xyzw, r3.wwww, r15.xyzw
          lt r3.w, l(0.990000), r17.w
          if_nz r3.w
            mov r12.xyzw, r18.xyzw
            mov r15.xyzw, r17.xyzw
            break
          endif
          mov r12.xyzw, r18.xyzw
          mov r15.xyzw, r17.xyzw
        endif
        add r13.xyz, r4.xyzx, r13.xyzx
        add r14.xyz, r4.xyzx, r14.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r16.xyz, r7.xyzx, r16.xyzx
      endloop
      lt r1.y, r15.w, l(0.990000)
      and r1.y, r1.y, l(0x3f800000)
      add r1.z, -r15.w, l(1.000000)
      mul r1.w, r2.y, r2.x
      mul r1.y, r1.z, r1.y
      mul r1.y, r1.w, r1.y
      mad r2.xyzw, r12.xyzw, r1.yyyy, r15.xyzw
      div r0.xyz, r0.xyzx, r0.wwww
      dp3 r0.x, r0.xyzx, cb0[26].xyzx
      mul r0.x, r0.x, cb0[29].w
      max r0.x, r0.x, l(0.000000)
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r2.w, r0.x
      add r0.yzw, -r2.xxyz, cb0[27].xxyz
      mad r2.xyz, r0.xxxx, r0.yzwy, r2.xyzx
      mul r0.xyzw, r2.xyzw, cb0[10].wwww
      mul o0.xyzw, r1.xxxx, r0.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used