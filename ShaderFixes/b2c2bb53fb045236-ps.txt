// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b2c2bb53fb045236-ps.txt
// 3DMigoto: b2c2bb53fb045236 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 155 3 14
//   undeciphered1a: 18
//   Keywords { "FOG_OF_WAR_ON" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 544
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 288 [_FogOfWarSize] 3
//   Vector 304 [_FogOfWarCenterAdjusted] 3
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 464 [_VolumetricFogSunWorldPos]
//   Vector 480 [_VolumetricFogSunShadowsData]
//   Float 496 [_Jitter]
//   Matrix 400 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_FogOfWar] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 4 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:59:41 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 20
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r18.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b2c2bb53fb045236-ps.txt

mul r18.w, -r18.x, r18.y
mad r19.xyz, -r18.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r19.y
mov r1.xz, r19.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r3.xy, v1.xyxx, cb1[6].xyxx
dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xyxx
frc r0.w, r0.w
add r0.w, r0.w, l(-0.500000)
lt r1.w, cb0[13].y, r1.y
lt r3.x, cb0[13].y, r0.y
and r1.w, r1.w, r3.x
lt r3.x, r1.y, r0.z
lt r3.y, r0.y, r0.z
and r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
if_z r1.w
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r3.xy, r2.xzxx, cb0[18].xzxx
    add r3.xy, r3.xyxx, -cb0[19].xzxx
    sample r3.xyzw, r3.xyxx, t1.wxyz, s3
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r2.xyz, -r1.xyzx, r2.xwzx
    dp3 r0.x, r2.xyzx, r2.xyzx
    sqrt r0.x, r0.x
    dp2 r1.w, r2.xzxx, r2.xzxx
    sqrt r1.w, r1.w
    div r3.yz, r2.xxzx, r1.wwww
    div r1.w, r1.w, r2.y
    max r2.w, r0.z, r1.y
    min r4.z, r2.w, cb0[13].y
    add r2.w, r1.y, -r4.z
    mul r2.w, r1.w, r2.w
    mad r4.xy, -r3.yzyy, r2.wwww, r19.xzxx
    min r2.w, r0.x, cb0[12].z
    add r5.xyz, -r1.xyzx, r4.xzyx
    dp3 r1.x, r5.xyzx, r5.xyzx
    sqrt r1.x, r1.x
    lt r1.z, r1.x, r2.w
    if_nz r1.z
      lt r1.z, l(0.000000), r1.w
      lt r3.w, l(-0.500000), r0.y
      and r1.z, r1.z, r3.w
      lt r3.w, r1.w, l(0.000000)
      lt r0.y, r0.y, l(0.500000)
      and r0.y, r0.y, r3.w
      and r0.y, r0.z, r0.y
      movc r5.y, r1.z, cb0[13].y, r0.y
      add r0.y, -r1.y, r5.y
      mul r0.y, r0.y, r1.w
      mad r5.xz, -r3.yyzy, r0.yyyy, r19.xxzx
      add r1.yzw, r4.xxzy, -r5.xxyz
      dp3 r0.y, r1.yzwy, r1.yzwy
      sqrt r0.y, r0.y
      add r0.z, -r1.x, r2.w
      min r0.y, r0.z, r0.y
      lt r1.y, l(0.000000), r0.y
      if_nz r1.y
        log r1.y, r0.y
        mul r1.y, r1.y, l(0.693147182)
        max r1.y, r1.y, l(0.000000)
        mad r1.y, r1.y, cb0[15].x, l(0.100000)
        mul r1.y, r1.y, cb0[13].z
        mul_sat r1.z, r2.w, cb0[15].y
        mul r1.y, r1.z, r1.y
        max r1.y, r1.y, l(0.010000)
        mul r3.yzw, r1.yyyy, r2.xxyz
        div r3.yzw, r3.yyzw, r0.xxxx
        div r1.y, r0.y, r1.y
        add r5.xyz, r4.xzyx, -cb0[20].xyzx
        add r6.xyz, r4.xzyx, -cb0[22].xyzx
        mul r7.xz, r3.yywy, cb0[13].wwww
        mul r1.z, cb0[13].z, cb0[13].y
        div r7.y, r3.z, r1.z
        add r8.xy, r4.xyxx, cb0[14].xzxx
        mul r8.xy, r8.xyxx, cb0[13].wwww
        div r1.z, r4.z, r1.z
        frc r1.w, r0.w
        mad r1.y, r1.w, cb0[31].x, r1.y
        add r4.w, r4.z, cb0[13].x
        mul r9.xyz, r4.wwww, cb0[26].xywx
        mad r9.xyz, cb0[25].xywx, r4.xxxx, r9.xyzx
        mad r9.xyz, cb0[27].xywx, r4.yyyy, r9.xyzx
        add r9.xyz, r9.xyzx, cb0[28].xywx
        div r8.zw, r9.xxxy, r9.zzzz
        mad r8.zw, r8.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        mad r1.w, r0.w, cb0[30].y, l(1.000000)
        mul r1.w, r0.y, r1.w
        mul r2.xyz, r2.xyzx, r1.wwww
        div r2.xyz, r2.xyzx, r0.xxxx
        add r2.xyz, r2.xyzx, r4.xwyx
        mul r9.xyz, r2.yyyy, cb0[26].xywx
        mad r9.xyz, cb0[25].xywx, r2.xxxx, r9.xyzx
        mad r9.xyz, cb0[27].xywx, r2.zzzz, r9.xyzx
        add r9.xyz, r9.xyzx, cb0[28].xywx
        div r9.xy, r9.xyxx, r9.zzzz
        mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r0.x, -r1.x, cb0[29].w
        mul_sat r0.x, r0.x, l(0.0285714287)
        mul r0.x, r0.x, cb0[30].x
        div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
        ge r0.y, r0.y, r0.z
        add r8.zw, r8.zzzw, -r9.xxxy
        add r4.xyz, -r2.xyzx, r4.xwyx
        mov r10.xyzw, l(0,0,0,0)
        mov r11.xyz, r5.xyzx
        mov r12.xyz, r6.xyzx
        mov r14.xz, r8.xxyx
        mov r0.z, r1.y
        mov r14.y, r1.z
        mov r13.xyzw, l(0,0,0,0)
        loop
          ge r2.w, l(1.000000), r0.z
          breakc_nz r2.w
          sample_l r15.xyzw, r14.xzxx, t2.xyzw, s1, l(0.000000)
          add r2.w, -|r14.y|, r15.w
          lt r4.w, l(0.000000), r2.w
          if_nz r4.w
            add r4.w, -r2.w, l(1.000000)
            mul r16.xyz, r4.wwww, cb0[11].xyzx
            mul r16.w, r2.w, l(0.400000)
            mul r2.w, r1.w, r0.z
            mad r9.zw, r2.wwww, r8.zzzw, r9.xxxy
            sample_l r17.xyzw, r9.zwzz, t3.xyzw, s4, l(0.000000)
            dp4 r4.w, r17.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            mad r17.xyz, r2.wwww, r4.xyzx, r2.xyzx
            add r17.xyz, r17.xyzx, -cb0[29].xyzx
            dp3 r2.w, r17.xyzx, r17.xyzx
            sqrt r2.w, r2.w
            add_sat r2.w, -r2.w, r4.w
            mul r4.w, r0.x, r13.w
            add r2.w, r2.w, l(-1.000000)
            mad r4.w, r4.w, r2.w, l(1.000000)
            mad r2.w, cb0[30].z, r2.w, l(1.000000)
            mul r16.xyzw, r2.wwww, r16.xyzw
            dp3 r2.w, r11.xyzx, r11.xyzx
            div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
            dp3 r5.w, r12.xyzx, r12.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            mul r17.xyz, r2.wwww, cb0[21].xyzx
            mad r17.xyz, cb0[23].xyzx, r5.wwww, r17.xyzx
            mul r17.xyz, r16.wwww, r17.xyzx
            mad r15.xyz, r15.xyzx, r4.wwww, r17.xyzx
            mul r15.xyz, r16.wwww, r15.xyzx
            mul r16.xyz, r15.xyzx, r16.xyzx
            add r2.w, -r13.w, l(1.000000)
            mad r15.xyzw, r16.xyzw, r2.wwww, r13.xyzw
            lt r2.w, l(0.990000), r15.w
            if_nz r2.w
              mov r10.xyzw, r16.xyzw
              mov r13.xyzw, r15.xyzw
              break
            endif
            mov r10.xyzw, r16.xyzw
            mov r13.xyzw, r15.xyzw
          endif
          add r11.xyz, r3.yzwy, r11.xyzx
          add r12.xyz, r3.yzwy, r12.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r14.xyz, r7.xyzx, r14.xyzx
        endloop
        lt r0.x, r13.w, l(0.990000)
        and r0.xy, r0.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
        add r1.y, -r13.w, l(1.000000)
        mul r0.y, r0.z, r0.y
        mul r0.x, r0.x, r1.y
        mul r0.x, r0.y, r0.x
        mad r2.xyzw, r10.xyzw, r0.xxxx, r13.xyzw
        mul r2.xyzw, r2.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r1.xyzw, r0.xxxx, r2.xyzw
        mul r1.xyzw, r3.xxxx, r1.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.w, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r3.xyzx, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used