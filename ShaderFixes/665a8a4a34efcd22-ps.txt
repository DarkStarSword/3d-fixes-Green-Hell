// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 665a8a4a34efcd22-ps.txt
// 3DMigoto: 665a8a4a34efcd22 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 132 5 13
//   undeciphered1a: 16
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_BOX" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT0" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 512
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_SunPosition] 3
//   Vector 400 [_SunDir] 3
//   Vector 416 [_SunColor] 3
//   Vector 432 [_FogScatteringData]
//   Vector 448 [_FogScatteringData2]
//   Float 464 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_FogOfWar] 2D 5
//   SetTexture 3 [_NoiseTex] 2D 1
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:14:14 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 665a8a4a34efcd22-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.z, -cb0[13].x, r17.z
mov r1.xy, r17.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.z, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.z
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.z, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r1.w
or r0.y, r0.y, r0.w
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xyxx, cb0[20].xyxx
    add r0.xy, r0.xyxx, -cb0[21].xyxx
    sample r3.xyzw, r0.xyxx, t2.wxyz, s5
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.z, l(0.000010)
    add r0.xyw, -r1.xyxz, r2.xyxw
    dp3 r1.w, r0.xywx, r0.xywx
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.yzw, r1.wwww, r0.xxyw
    div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r5.xyz, -r2.xyzx, -r4.xyzx
    mul r5.xyz, r3.yzwy, r5.xyzx
    add r2.xyz, -r2.xyzx, r4.xyzx
    mul r2.xyz, r2.xyzx, r3.yzwy
    min r4.xyz, r5.xyzx, r2.xyzx
    max r4.xy, r4.yzyy, r4.xxxx
    max r2.w, r4.y, r4.x
    max r2.w, r2.w, l(0.000000)
    max r2.xyz, r5.xyzx, r2.xyzx
    min r2.xy, r2.yzyy, r2.xxxx
    min r2.x, r2.y, r2.x
    min r2.y, r1.w, cb0[12].z
    min r2.x, r2.y, r2.x
    add r2.x, -r2.w, r2.x
    lt r2.z, l(0.000000), r2.x
    if_nz r2.z
      div r3.yzw, r2.wwww, r3.yyzw
      add r1.xyz, r1.xyzx, r3.yzwy
      div r3.yz, cb0[18].xxyx, cb0[13].wwww
      log r2.z, r2.x
      mul r2.z, r2.z, l(0.693147182)
      max r2.z, r2.z, l(0.000000)
      mad r2.z, r2.z, cb0[15].x, l(0.100000)
      mul r2.z, r2.z, cb0[13].z
      mul_sat r3.w, r2.y, cb0[15].y
      mul r2.z, r2.z, r3.w
      add r2.y, -r2.w, r2.y
      max r2.z, r2.z, l(0.010000)
      mul r4.xyz, r0.xywx, r2.zzzz
      div r4.xyz, r4.xyzx, r1.wwww
      div r2.z, r2.x, r2.z
      add r5.xyz, r1.xyzx, -cb0[22].xyzx
      mul r6.xy, r4.xyxx, cb0[13].wwww
      mul r2.w, cb0[13].z, cb0[13].y
      div r6.z, r4.z, r2.w
      add r1.xy, r1.xyxx, cb0[14].xzxx
      mul r1.xy, r1.xyxx, cb0[13].wwww
      div r1.z, r1.z, r2.w
      add r7.xy, cb0[14].xyxx, cb0[17].xyxx
      frc r2.w, r0.z
      mad r2.z, r2.w, cb0[29].x, r2.z
      ge r2.x, r2.x, r2.y
      and r2.x, r2.x, l(0x3f800000)
      mov r8.xyzw, l(0,0,0,0)
      mov r9.xyz, r5.xyzx
      mov r2.y, r2.z
      mov r11.xyz, r1.xyzx
      mov r10.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r2.y
        breakc_nz r2.w
        mad r7.zw, r7.xxxy, cb0[13].wwww, -r11.xxxy
        mul r7.zw, r3.yyyz, |r7.zzzw|
        max r2.w, r7.w, r7.z
        sample_l r12.xyzw, r11.xyxx, t3.xyzw, s1, l(0.000000)
        mad r2.w, r2.w, cb0[18].w, |r11.z|
        add r2.w, -r2.w, r12.w
        lt r3.w, l(0.000000), r2.w
        if_nz r3.w
          add r3.w, -r2.w, l(1.000000)
          mul r13.xyz, r3.wwww, cb0[11].xyzx
          mul r14.w, r2.w, l(0.400000)
          dp3 r2.w, r9.xyzx, r9.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          mul r15.xyz, r2.wwww, cb0[23].xyzx
          mad r12.xyz, r15.xyzx, r14.wwww, r12.xyzx
          mul r12.xyz, r14.wwww, r12.xyzx
          mul r14.xyz, r12.xyzx, r13.xyzx
          add r2.w, -r10.w, l(1.000000)
          mad r12.xyzw, r14.xyzw, r2.wwww, r10.xyzw
          lt r2.w, l(0.990000), r12.w
          if_nz r2.w
            mov r8.xyzw, r14.xyzw
            mov r10.xyzw, r12.xyzw
            break
          endif
          mov r8.xyzw, r14.xyzw
          mov r10.xyzw, r12.xyzw
        endif
        add r9.xyz, r4.xyzx, r9.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r11.xyz, r6.xyzx, r11.xyzx
      endloop
      lt r1.x, r10.w, l(0.990000)
      and r1.x, r1.x, l(0x3f800000)
      add r1.y, -r10.w, l(1.000000)
      mul r1.z, r2.y, r2.x
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r2.xyzw, r8.xyzw, r1.xxxx, r10.xyzw
      div r0.xyw, r0.xyxw, r1.wwww
      dp3 r0.x, r0.xywx, cb0[25].xyzx
      mul r0.x, r0.x, cb0[28].w
      max r0.x, r0.x, l(0.000000)
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r2.w, r0.x
      add r1.xyz, -r2.xyzx, cb0[26].xyzx
      mad r2.xyz, r0.xxxx, r1.xyzx, r2.xyzx
      mul r1.xyzw, r2.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.z, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
sample r4.xyzw, v1.zwzz, t5.xyzw, s4
add r1.xyz, -r3.xyzx, r4.xyzx
mad r1.xyz, r2.wwww, r1.xyzx, r3.xyzx
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad r0.xyw, r1.xyxz, r0.xxxx, r2.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[24].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[24].y
add r2.x, -v1.x, cb0[24].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[28].z, l(1.000000)
mul r0.z, r0.z, cb0[27].x
mov r1.xyz, l(0,0,0,0)
mov r3.xy, v1.xyxx
mov r1.w, cb0[28].x
mov r2.z, cb0[27].y
loop
  ge r3.z, l(0.000000), r2.z
  breakc_nz r3.z
  mad r3.xy, r2.xyxx, r0.zzzz, r3.xyxx
  sample_l r4.xyzw, r3.xyxx, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[27].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[28].y
  add r2.z, r2.z, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[27].zzzz, r0.xywx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used