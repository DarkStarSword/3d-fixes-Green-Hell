// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a8ce0d511f3dd7d0-ps.txt
// 3DMigoto: a8ce0d511f3dd7d0 |    Unity headers extracted from DynamicFog_Image Effect_Orthographic Desktop Plus Orthogonal
//    Shader "DynamicFog/Image Effect/Orthographic Desktop Plus Orthogonal" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Image Effect_Orthographic Desktop Plus Orthogonal:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 218 3 10
//   undeciphered1a: 9
//   Keywords { "FOG_OF_WAR_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 336
//   Float 80 [_FogAlpha]
//   Vector 96 [_FogOfWarSize] 3
//   Vector 112 [_FogOfWarCenterAdjusted] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogHeightData]
//   Vector 224 [_FogNoiseData]
//   Float 256 [_FogSpeed]
//   Vector 272 [_FogColor]
//   Vector 288 [_FogColor2]
//   Vector 320 [_ClipDir] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CameraDepthTexture] 2D 1
//   SetTexture 2 [_FogOfWar] 2D 2
//   SetTexture 3 [_Noise2Tex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:53:48 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[21], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 11
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r9.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a8ce0d511f3dd7d0-ps.txt

mul r9.w, -r9.x, r9.y
mad r10.xyz, -r9.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s0
sample r1.xyzw, v1.zwzz, t1.xyzw, s1
add r1.x, -r1.x, l(1.000000)
add r2.y, -cb0[13].y, r10.y
mul r1.yzw, cb0[20].xxyz, cb1[5].zzzz
add r2.w, -r1.x, l(1.000000)
mad r1.yzw, -r1.yyzw, r2.wwww, v2.xxyz
mov r2.xz, r10.xxzx
add r3.xyz, r1.yzwy, r2.xyzx
add r1.y, r3.y, l(0.000010)
lt r1.z, cb0[13].z, r2.y
lt r1.w, cb0[13].z, r1.y
and r1.z, r1.w, r1.z
if_z r1.z
  add r3.w, r3.y, l(0.000010)
  add r2.xzw, -r2.xxyz, r3.xxwz
  dp2 r1.z, r2.xwxx, r2.xwxx
  sqrt r1.z, r1.z
  div r3.xy, r2.xwxx, r1.zzzz
  div r1.w, r1.z, r2.z
  min r4.y, r2.y, cb0[13].z
  add r3.z, r2.y, -r4.y
  mul r3.z, r1.w, r3.z
  mul r5.xy, r3.zzzz, r3.xyxx
  dp2 r3.w, -r5.xyxx, -r5.xyxx
  sqrt r3.w, r3.w
  lt r4.w, r3.w, r1.z
  if_nz r4.w
    mad r4.xz, -r3.xxyx, r3.zzzz, r10.xxzx
    lt r3.z, l(0.000000), r1.w
    lt r4.w, l(-0.500000), r1.y
    and r3.z, r3.z, r4.w
    lt r4.w, r1.w, l(0.000000)
    lt r5.x, r1.y, l(0.500000)
    and r4.w, r4.w, r5.x
    and r1.y, r1.y, r4.w
    movc r1.y, r3.z, cb0[13].z, r1.y
    add r1.y, -r2.y, r1.y
    mul r1.y, r1.y, r1.w
    mad r1.yw, -r3.xxxy, r1.yyyy, r10.xxxz
    add r1.yw, -r1.yyyw, r4.xxxz
    dp2 r1.y, r1.ywyy, r1.ywyy
    sqrt r1.y, r1.y
    add r1.w, r1.z, -r3.w
    min r1.y, r1.w, r1.y
    lt r1.w, l(0.000000), r1.y
    if_nz r1.w
      div r2.xyz, r2.xzwx, r1.zzzz
      mul r3.xyz, r1.yyyy, r2.xyzx
      lt r1.x, r1.x, l(0.999000)
      if_nz r1.x
        mad r1.xz, r2.xxzx, r1.yyyy, r4.xxzx
        div r1.xz, r1.xxzx, cb0[6].xxzx
        add r1.xz, r1.xxzx, -cb0[7].xxzx
        sample r2.xyzw, r1.xzxx, t2.xyzw, s2
        mul r1.x, r2.w, cb0[5].x
        ge r1.z, l(0.000000), r1.x
      else
        mov r1.x, cb0[5].x
        mov r1.z, l(0)
      endif
      if_z r1.z
        add r1.z, -r4.y, cb0[13].x
        mul r1.w, cb0[13].w, cb0[13].x
        div r1.z, r1.z, r1.w
        add r1.z, r1.z, l(-0.100000)
        add r2.x, r3.w, -cb0[12].x
        div r2.x, r2.x, cb0[12].y
        max r1.z, r1.z, r2.x
        mul r2.x, cb0[16].x, cb1[0].w
        mad r2.yzw, r4.xxyz, cb0[14].wwww, r2.xxxx
        frc r5.xyz, r2.yzwy
        add r2.yzw, r2.yyzw, -r5.xxyz
        mul r6.xyz, r5.xyzx, r5.xyzx
        mad r5.xyz, -r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
        mul r4.w, r5.z, r6.z
        mad r2.yz, r2.wwww, l(0.000000, 37.000000, 17.000000, 0.000000), r2.yyzy
        mad r2.yz, r6.xxyx, r5.xxyx, r2.yyzy
        add r2.yz, r2.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
        mul r2.yz, r2.yyzy, l(0.000000, 0.00390625000, 0.00390625000, 0.000000)
        sample_l r5.xyzw, r2.yzyy, t3.xyzw, s3, l(0.000000)
        add r2.y, -r5.y, r5.x
        mad r2.y, r4.w, r2.y, r5.y
        div_sat r2.z, r4.y, cb0[13].x
        add r5.xyzw, -cb0[17].xyzw, cb0[18].xyzw
        mad r6.xyzw, r2.zzzz, r5.xyzw, cb0[17].xyzw
        mad r2.y, -r2.y, cb0[14].x, l(1.000000)
        mul_sat r1.z, r1.z, r2.y
        mul r7.w, r1.z, r6.w
        mul r7.xyz, r6.xyzx, r7.wwww
        mad r2.yzw, r3.xxyz, l(0.000000, 0.200000, 0.200000, 0.200000), r4.xxyz
        mad r3.w, r1.y, l(0.200000), r3.w
        add r4.x, -r2.z, cb0[13].x
        div r4.x, r4.x, r1.w
        add r4.x, r4.x, l(-0.100000)
        add r4.y, r3.w, -cb0[12].x
        div r4.y, r4.y, cb0[12].y
        max r4.x, r4.y, r4.x
        mad r4.yzw, r2.yyzw, cb0[14].wwww, r2.xxxx
        frc r6.xyz, r4.yzwy
        add r4.yzw, r4.yyzw, -r6.xxyz
        mul r8.xyz, r6.xyzx, r6.xyzx
        mad r6.xyz, -r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
        mul r6.z, r6.z, r8.z
        mad r4.yz, r4.wwww, l(0.000000, 37.000000, 17.000000, 0.000000), r4.yyzy
        mad r4.yz, r8.xxyx, r6.xxyx, r4.yyzy
        add r4.yz, r4.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
        mul r4.yz, r4.yyzy, l(0.000000, 0.00390625000, 0.00390625000, 0.000000)
        sample_l r8.xyzw, r4.yzyy, t3.xyzw, s3, l(0.000000)
        add r4.y, -r8.y, r8.x
        mad r4.y, r6.z, r4.y, r8.y
        div_sat r4.z, r2.z, cb0[13].x
        mad r8.xyzw, r4.zzzz, r5.xyzw, cb0[17].xyzw
        mad r4.y, -r4.y, cb0[14].x, l(1.000000)
        mul_sat r4.x, r4.y, r4.x
        mul r4.w, r4.x, r8.w
        mul r4.xyz, r4.wwww, r8.xyzx
        mad r1.z, -r6.w, r1.z, l(1.000000)
        mad r4.xyzw, r4.xyzw, r1.zzzz, r7.xyzw
        mad r2.yzw, r3.xxyz, l(0.000000, 0.200000, 0.200000, 0.200000), r2.yyzw
        mad r1.z, r1.y, l(0.200000), r3.w
        add r3.w, -r2.z, cb0[13].x
        div r3.w, r3.w, r1.w
        add r3.w, r3.w, l(-0.100000)
        add r6.x, r1.z, -cb0[12].x
        div r6.x, r6.x, cb0[12].y
        max r3.w, r3.w, r6.x
        mad r6.xyz, r2.yzwy, cb0[14].wwww, r2.xxxx
        frc r7.xyz, r6.xyzx
        add r6.xyz, r6.xyzx, -r7.xyzx
        mul r8.xyz, r7.xyzx, r7.xyzx
        mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
        mul r6.w, r7.z, r8.z
        mad r6.xy, r6.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r6.xyxx
        mad r6.xy, r8.xyxx, r7.xyxx, r6.xyxx
        add r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
        mul r6.xy, r6.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
        sample_l r7.xyzw, r6.xyxx, t3.xyzw, s3, l(0.000000)
        add r6.x, -r7.y, r7.x
        mad r6.x, r6.w, r6.x, r7.y
        div_sat r6.y, r2.z, cb0[13].x
        mad r7.xyzw, r6.yyyy, r5.xyzw, cb0[17].xyzw
        mad r6.x, -r6.x, cb0[14].x, l(1.000000)
        mul_sat r3.w, r3.w, r6.x
        mul r6.w, r3.w, r7.w
        mul r6.xyz, r6.wwww, r7.xyzx
        add r3.w, -r4.w, l(1.000000)
        mad r4.xyzw, r6.xyzw, r3.wwww, r4.xyzw
        mad r2.yzw, r3.xxyz, l(0.000000, 0.200000, 0.200000, 0.200000), r2.yyzw
        mad r1.z, r1.y, l(0.200000), r1.z
        add r3.w, -r2.z, cb0[13].x
        div r3.w, r3.w, r1.w
        add r3.w, r3.w, l(-0.100000)
        add r6.x, r1.z, -cb0[12].x
        div r6.x, r6.x, cb0[12].y
        max r3.w, r3.w, r6.x
        mad r6.xyz, r2.yzwy, cb0[14].wwww, r2.xxxx
        frc r7.xyz, r6.xyzx
        add r6.xyz, r6.xyzx, -r7.xyzx
        mul r8.xyz, r7.xyzx, r7.xyzx
        mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
        mul r6.w, r7.z, r8.z
        mad r6.xy, r6.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r6.xyxx
        mad r6.xy, r8.xyxx, r7.xyxx, r6.xyxx
        add r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
        mul r6.xy, r6.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
        sample_l r7.xyzw, r6.xyxx, t3.xyzw, s3, l(0.000000)
        add r6.x, -r7.y, r7.x
        mad r6.x, r6.w, r6.x, r7.y
        div_sat r6.y, r2.z, cb0[13].x
        mad r7.xyzw, r6.yyyy, r5.xyzw, cb0[17].xyzw
        mad r6.x, -r6.x, cb0[14].x, l(1.000000)
        mul_sat r3.w, r3.w, r6.x
        mul r6.w, r3.w, r7.w
        mul r6.xyz, r6.wwww, r7.xyzx
        add r3.w, -r4.w, l(1.000000)
        mad r4.xyzw, r6.xyzw, r3.wwww, r4.xyzw
        mad r2.yzw, r3.xxyz, l(0.000000, 0.200000, 0.200000, 0.200000), r2.yyzw
        mad r1.z, r1.y, l(0.200000), r1.z
        add r3.w, -r2.z, cb0[13].x
        div r3.w, r3.w, r1.w
        add r3.w, r3.w, l(-0.100000)
        add r6.x, r1.z, -cb0[12].x
        div r6.x, r6.x, cb0[12].y
        max r3.w, r3.w, r6.x
        mad r6.xyz, r2.yzwy, cb0[14].wwww, r2.xxxx
        frc r7.xyz, r6.xyzx
        add r6.xyz, r6.xyzx, -r7.xyzx
        mul r8.xyz, r7.xyzx, r7.xyzx
        mad r7.xyz, -r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
        mul r6.w, r7.z, r8.z
        mad r6.xy, r6.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r6.xyxx
        mad r6.xy, r8.xyxx, r7.xyxx, r6.xyxx
        add r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
        mul r6.xy, r6.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
        sample_l r7.xyzw, r6.xyxx, t3.xyzw, s3, l(0.000000)
        add r6.x, -r7.y, r7.x
        mad r6.x, r6.w, r6.x, r7.y
        div_sat r6.y, r2.z, cb0[13].x
        mad r7.xyzw, r6.yyyy, r5.xyzw, cb0[17].xyzw
        mad r6.x, -r6.x, cb0[14].x, l(1.000000)
        mul_sat r3.w, r3.w, r6.x
        mul r6.w, r3.w, r7.w
        mul r6.xyz, r6.wwww, r7.xyzx
        add r3.w, -r4.w, l(1.000000)
        mad r4.xyzw, r6.xyzw, r3.wwww, r4.xyzw
        mad r2.yzw, r3.xxyz, l(0.000000, 0.200000, 0.200000, 0.200000), r2.yyzw
        mad r1.y, r1.y, l(0.200000), r1.z
        add r1.z, -r2.z, cb0[13].x
        div r1.z, r1.z, r1.w
        add r1.z, r1.z, l(-0.100000)
        add r1.y, r1.y, -cb0[12].x
        div r1.y, r1.y, cb0[12].y
        max r1.y, r1.y, r1.z
        mad r2.xyw, r2.yzyw, cb0[14].wwww, r2.xxxx
        frc r3.xyz, r2.xywx
        add r2.xyw, r2.xyxw, -r3.xyxz
        mul r6.xyz, r3.xyzx, r3.xyzx
        mad r3.xyz, -r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
        mul r1.z, r3.z, r6.z
        mad r2.xy, r2.wwww, l(37.000000, 17.000000, 0.000000, 0.000000), r2.xyxx
        mad r2.xy, r6.xyxx, r3.xyxx, r2.xyxx
        add r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
        mul r2.xy, r2.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
        sample_l r3.xyzw, r2.xyxx, t3.xyzw, s3, l(0.000000)
        add r1.w, -r3.y, r3.x
        mad r1.z, r1.z, r1.w, r3.y
        div_sat r1.w, r2.z, cb0[13].x
        mad r2.xyzw, r1.wwww, r5.xyzw, cb0[17].xyzw
        mad r1.z, -r1.z, cb0[14].x, l(1.000000)
        mul_sat r1.y, r1.z, r1.y
        mul r3.w, r1.y, r2.w
        mul r3.xyz, r2.xyzx, r3.wwww
        add r1.y, -r4.w, l(1.000000)
        mad r2.xyzw, r3.xyzw, r1.yyyy, r4.xyzw
        mul r3.xyzw, r1.xxxx, r2.xyzw
        mad r1.x, -r2.w, r1.x, l(1.000000)
        mad o0.xyzw, r0.xyzw, r1.xxxx, r3.xyzw
      else
        mov o0.xyzw, r0.xyzw
      endif
    else
      mov o0.xyzw, r0.xyzw
    endif
  else
    mov o0.xyzw, r0.xyzw
  endif
else
  mov o0.xyzw, r0.xyzw
endif
ret
// Approximately 0 instruction slots used