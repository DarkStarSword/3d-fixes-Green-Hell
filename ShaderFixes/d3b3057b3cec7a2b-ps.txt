// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d3b3057b3cec7a2b-ps.txt
// 3DMigoto: d3b3057b3cec7a2b |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 165 2 11
//   undeciphered1a: 17
//   Keywords { "FOG_AREA_SPHERE" "FOG_VOID_BOX" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT0" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 608
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_SunPosition] 3
//   Vector 384 [_SunDir] 3
//   Vector 400 [_SunColor] 3
//   Vector 416 [_FogScatteringData]
//   Vector 432 [_FogScatteringData2]
//   Vector 528 [_VolumetricFogSunWorldPos]
//   Vector 544 [_VolumetricFogSunShadowsData]
//   Float 560 [_Jitter]
//   Matrix 464 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 3
//   SetTexture 3 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:15:04 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 19
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r17.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d3b3057b3cec7a2b-ps.txt

mul r17.w, -r17.x, r17.y
mad r18.xyz, -r17.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r18.y
mov r1.xz, r18.xxzx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.y, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.yywy
and r2.y, r2.z, r2.y
lt r2.z, r1.y, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.y, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xwzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.xyzx, r0.wwww
  dp3 r1.w, r3.xyzx, r2.yzwy
  dp3 r2.y, r2.yzwy, r2.yzwy
  add r2.y, r2.y, -cb0[20].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.z, r2.y, l(0.000000)
  sqrt r2.w, r2.y
  movc r2.y, r2.z, r2.w, r2.y
  add r2.z, -r1.w, -r2.y
  max r2.z, r2.z, l(0.000000)
  min r2.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r2.w, r1.w
  add r1.w, -r2.z, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r4.xyz, r3.xyzx, r2.zzzz, r1.xyzx
    mul r1.xyz, r0.xyzx, r1.wwww
    div r1.xyz, r1.xyzx, r0.wwww
    add r1.xyz, r1.xyzx, r4.xyzx
    add r1.xyz, -r1.xyzx, cb0[17].xyzx
    mul r1.xyz, |r1.xyzx|, cb0[18].xyzx
    max r1.x, r1.y, r1.x
    max r1.x, r1.z, r1.x
    add r1.x, r1.x, l(-1.000000)
    mad_sat r1.x, cb0[18].w, r1.x, l(1.000000)
    lt r1.y, l(0.000000), r1.x
    if_nz r1.y
      log r1.y, r1.w
      mul r1.y, r1.y, l(0.693147182)
      max r1.y, r1.y, l(0.000000)
      mad r1.y, r1.y, cb0[15].x, l(0.100000)
      mul r1.y, r1.y, cb0[13].z
      mul_sat r1.z, r2.w, cb0[15].y
      mul r1.y, r1.z, r1.y
      add r1.z, -r2.z, r2.w
      max r1.y, r1.y, l(0.010000)
      mul r5.xyz, r0.xyzx, r1.yyyy
      div r5.xyz, r5.xyzx, r0.wwww
      div r1.y, r1.w, r1.y
      add r6.xyz, r4.xyzx, -cb0[21].xyzx
      mul r7.xz, r5.xxzx, cb0[13].wwww
      mul r2.y, cb0[13].z, cb0[13].y
      div r7.y, r5.y, r2.y
      add r8.xy, r4.xzxx, cb0[14].xzxx
      mul r8.xy, r8.xyxx, cb0[13].wwww
      div r2.y, r4.y, r2.y
      add r8.zw, cb0[14].xxxz, cb0[19].xxxz
      frc r2.w, r2.x
      mad r1.y, r2.w, cb0[35].x, r1.y
      add r4.w, r4.y, cb0[13].x
      mul r9.xyz, r4.wwww, cb0[30].xywx
      mad r9.xyz, cb0[29].xywx, r4.xxxx, r9.xyzx
      mad r9.xyz, cb0[31].xywx, r4.zzzz, r9.xyzx
      add r9.xyz, r9.xyzx, cb0[32].xywx
      div r9.xy, r9.xyxx, r9.zzzz
      mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mad r2.w, r2.x, cb0[34].y, l(1.000000)
      mul r2.w, r1.w, r2.w
      mul r0.xyz, r0.xyzx, r2.wwww
      div r0.xyz, r0.xyzx, r0.wwww
      add r0.xyz, r0.xyzx, r4.xwzx
      mul r10.xyz, r0.yyyy, cb0[30].xywx
      mad r10.xyz, cb0[29].xywx, r0.xxxx, r10.xyzx
      mad r10.xyz, cb0[31].xywx, r0.zzzz, r10.xyzx
      add r10.xyz, r10.xyzx, cb0[32].xywx
      div r9.zw, r10.xxxy, r10.zzzz
      mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r0.w, -r2.z, cb0[33].w
      mul_sat r0.w, r0.w, l(0.0285714287)
      mul r0.w, r0.w, cb0[34].x
      div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
      ge r1.z, r1.w, r1.z
      and r1.z, r1.z, l(0x3f800000)
      add r9.xy, -r9.zwzz, r9.xyxx
      add r4.xyz, -r0.xyzx, r4.xwzx
      mov r10.xyzw, l(0,0,0,0)
      mov r11.xyz, r6.xyzx
      mov r13.xz, r8.xxyx
      mov r1.w, r1.y
      mov r13.y, r2.y
      mov r12.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r1.w
        breakc_nz r2.w
        mad r14.xy, r8.zwzz, cb0[13].wwww, -r13.xzxx
        mul r14.xy, r14.xyxx, cb0[20].xxxx
        dp2 r2.w, r14.xyxx, r14.xyxx
        sample_l r14.xyzw, r13.xzxx, t1.xyzw, s1, l(0.000000)
        mad r2.w, r2.w, cb0[20].w, |r13.y|
        add r2.w, -r2.w, r14.w
        lt r3.w, l(0.000000), r2.w
        if_nz r3.w
          add r3.w, -r2.w, l(1.000000)
          mul r15.xyz, r3.wwww, cb0[11].xyzx
          mul r15.w, r2.w, l(0.400000)
          mul r2.w, r2.z, r1.w
          mad r16.xy, r2.wwww, r9.xyxx, r9.zwzz
          sample_l r16.xyzw, r16.xyxx, t2.xyzw, s3, l(0.000000)
          dp4 r3.w, r16.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          mad r16.xyz, r2.wwww, r4.xyzx, r0.xyzx
          add r16.xyz, r16.xyzx, -cb0[33].xyzx
          dp3 r2.w, r16.xyzx, r16.xyzx
          sqrt r2.w, r2.w
          add_sat r2.w, -r2.w, r3.w
          mul r3.w, r0.w, r12.w
          add r2.w, r2.w, l(-1.000000)
          mad r3.w, r3.w, r2.w, l(1.000000)
          mad r2.w, cb0[34].z, r2.w, l(1.000000)
          mul r15.xyzw, r2.wwww, r15.xyzw
          dp3 r2.w, r11.xyzx, r11.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          mul r16.xyz, r2.wwww, cb0[22].xyzx
          mul r16.xyz, r15.wwww, r16.xyzx
          mad r14.xyz, r14.xyzx, r3.wwww, r16.xyzx
          mul r14.xyz, r15.wwww, r14.xyzx
          mul r15.xyz, r14.xyzx, r15.xyzx
          add r2.w, -r12.w, l(1.000000)
          mad r14.xyzw, r15.xyzw, r2.wwww, r12.xyzw
          lt r2.w, l(0.990000), r14.w
          if_nz r2.w
            mov r10.xyzw, r15.xyzw
            mov r12.xyzw, r14.xyzw
            break
          endif
          mov r10.xyzw, r15.xyzw
          mov r12.xyzw, r14.xyzw
        endif
        add r11.xyz, r5.xyzx, r11.xyzx
        add r1.w, r1.w, l(-1.000000)
        add r13.xyz, r7.xyzx, r13.xyzx
      endloop
      lt r0.x, r12.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r12.w, l(1.000000)
      mul r0.z, r1.w, r1.z
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.z, r0.x
      mad r0.xyzw, r10.xyzw, r0.xxxx, r12.xyzw
      dp3 r1.y, r3.xyzx, cb0[24].xyzx
      mul r1.y, r1.y, cb0[27].w
      max r1.y, r1.y, l(0.000000)
      mul r1.y, r1.y, r1.y
      mul r1.y, r1.y, r1.y
      mul r1.y, r1.y, r1.y
      mul r1.y, r0.w, r1.y
      add r2.yzw, -r0.xxyz, cb0[25].xxyz
      mad r0.xyz, r1.yyyy, r2.yzwy, r0.xyzx
      mul r0.xyzw, r0.xyzw, cb0[10].wwww
      mul r0.xyzw, r1.xxxx, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.xyzw, r1.xxxx
sample r4.xyzw, v1.xyxx, t3.xyzw, s0
mad_sat r0.x, -r0.w, r1.x, l(1.000000)
mad r0.xyz, r4.xyzx, r0.xxxx, r3.xyzx
lt r0.w, cb0[2].y, l(0.000000)
add r1.x, -cb0[23].y, l(1.000000)
movc r0.w, r0.w, r1.x, cb0[23].y
add r1.x, -v1.x, cb0[23].x
add r1.y, r0.w, -v1.y
mad r0.w, r2.x, cb0[27].z, l(1.000000)
mul r0.w, r0.w, cb0[26].x
mov r2.xyz, l(0,0,0,0)
mov r1.zw, v1.xxxy
mov r2.w, cb0[27].x
mov r3.x, cb0[26].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r1.zw, r1.xxxy, r0.wwww, r1.zzzw
  sample_l r4.xyzw, r1.zwzz, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r2.wwww, r4.xyzx
  mad r2.xyz, r4.xyzx, cb0[26].wwww, r2.xyzx
  mul r2.w, r2.w, cb0[27].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r2.xyzx, cb0[26].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used