// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 57f0cb4805d722c5-ps.txt
// 3DMigoto: 57f0cb4805d722c5 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 105 4 12
//   undeciphered1a: 11
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_USE_XY_PLANE" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 480
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 368 [_SunDir] 3
//   Vector 384 [_SunColor] 3
//   Vector 416 [_FogScatteringData2]
//   Float 432 [_Jitter]
//   Float 448 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:05:38 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[29], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r11.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 57f0cb4805d722c5-ps.txt

mul r11.w, -r11.x, r11.y
mad r12.xyz, -r11.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.z, -cb0[13].x, r12.z
mov r1.xy, r12.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.z, l(0.000010)
lt r0.z, cb0[13].y, r1.z
lt r0.w, cb0[13].y, r0.y
and r0.z, r0.w, r0.z
lt r0.w, r1.z, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r0.w
or r0.y, r0.y, r0.z
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xyxx, cb0[20].xyxx
    add r0.xy, r0.xyxx, -cb0[21].xyxx
    sample r0.xyzw, r0.xyxx, t2.wxyz, s3
    ge r0.y, l(0.000000), r0.x
  else
    mov r0.xy, l(1.000000,0,0,0)
  endif
  if_z r0.y
    add r2.w, r2.z, l(0.000010)
    add r0.yzw, -r1.xxyz, r2.xxyw
    dp3 r1.w, r0.yzwy, r0.yzwy
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.xyz, r0.yzwy, r1.wwww
    dp3 r2.w, r3.xyzx, r2.xyzx
    dp3 r2.x, r2.xyzx, r2.xyzx
    add r2.x, r2.x, -cb0[18].y
    mad r2.x, r2.w, r2.w, -r2.x
    ge r2.y, r2.x, l(0.000000)
    sqrt r2.z, r2.x
    movc r2.x, r2.y, r2.z, r2.x
    add r2.y, -r2.x, -r2.w
    max r2.y, r2.y, l(0.000000)
    min r2.z, r1.w, cb0[12].z
    add r2.x, r2.x, -r2.w
    min r2.x, r2.z, r2.x
    add r2.x, -r2.y, r2.x
    ge r2.w, r2.x, l(0.000000)
    if_nz r2.w
      mad r1.xyz, r3.xyzx, r2.yyyy, r1.xyzx
      log r2.w, r2.x
      mul r2.w, r2.w, l(0.693147182)
      max r2.w, r2.w, l(0.000000)
      mad r2.w, r2.w, cb0[15].x, l(0.100000)
      mul r2.w, r2.w, cb0[13].z
      mul_sat r3.w, r2.z, cb0[15].y
      mul r2.w, r2.w, r3.w
      add r2.y, -r2.y, r2.z
      max r2.z, r2.w, l(0.010000)
      mul r0.yzw, r0.yyzw, r2.zzzz
      div r0.yzw, r0.yyzw, r1.wwww
      div r1.w, r2.x, r2.z
      mul r4.xy, r0.yzyy, cb0[13].wwww
      mul r0.y, cb0[13].z, cb0[13].y
      div r4.z, r0.w, r0.y
      add r0.zw, r1.xxxy, cb0[14].xxxz
      mul r0.zw, r0.zzzw, cb0[13].wwww
      div r0.y, r1.z, r0.y
      add r1.xy, cb0[14].xyxx, cb0[17].xyxx
      add r2.zw, cb0[14].xxxy, r12.xxxy
      frc r1.z, cb0[28].x
      mad r1.z, r1.z, cb0[27].x, r1.w
      ge r1.w, r2.x, r2.y
      and r1.w, r1.w, l(0x3f800000)
      mov r5.xyzw, l(0,0,0,0)
      mov r2.x, r1.z
      mov r7.xyz, r0.zwyz
      mov r6.xyzw, l(0,0,0,0)
      loop
        ge r2.y, l(1.000000), r2.x
        breakc_nz r2.y
        mad r8.xy, r1.xyxx, cb0[13].wwww, -r7.xyxx
        mul r8.xy, r8.xyxx, cb0[18].xxxx
        dp2 r2.y, r8.xyxx, r8.xyxx
        sample_l r8.xyzw, r7.xyxx, t3.xyzw, s0, l(0.000000)
        mad r2.y, r2.y, cb0[18].w, |r7.z|
        add r2.y, -r2.y, r8.w
        mad r9.xy, r2.zwzz, cb0[13].wwww, -r7.xyxx
        dp2 r3.w, r9.xyxx, r9.xyxx
        add r3.w, -r3.w, cb0[12].x
        max r3.w, r3.w, l(0.000000)
        mad r2.y, -r3.w, cb0[12].y, r2.y
        lt r3.w, l(0.000000), r2.y
        if_nz r3.w
          add r3.w, -r2.y, l(1.000000)
          mul r9.xyz, r3.wwww, cb0[11].xyzx
          mul r10.w, r2.y, l(0.400000)
          mul r8.xyz, r8.xyzx, r10.wwww
          mul r10.xyz, r8.xyzx, r9.xyzx
          add r2.y, -r6.w, l(1.000000)
          mad r8.xyzw, r10.xyzw, r2.yyyy, r6.xyzw
          lt r2.y, l(0.990000), r8.w
          if_nz r2.y
            mov r5.xyzw, r10.xyzw
            mov r6.xyzw, r8.xyzw
            break
          endif
          mov r5.xyzw, r10.xyzw
          mov r6.xyzw, r8.xyzw
        endif
        add r2.x, r2.x, l(-1.000000)
        add r7.xyz, r4.xyzx, r7.xyzx
      endloop
      lt r0.y, r6.w, l(0.990000)
      and r0.y, r0.y, l(0x3f800000)
      add r0.z, -r6.w, l(1.000000)
      mul r0.w, r1.w, r2.x
      mul r0.y, r0.z, r0.y
      mul r0.y, r0.w, r0.y
      mad r1.xyzw, r5.xyzw, r0.yyyy, r6.xyzw
      dp3 r0.y, r3.xyzx, cb0[23].xyzx
      mul r0.y, r0.y, cb0[26].w
      max r0.y, r0.y, l(0.000000)
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r1.w, r0.y
      add r2.xyz, -r1.xyzx, cb0[24].xyzx
      mad r1.xyz, r0.yyyy, r2.xyzx, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul o0.xyzw, r0.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used