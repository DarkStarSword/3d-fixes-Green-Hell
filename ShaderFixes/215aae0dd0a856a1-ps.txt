// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 215aae0dd0a856a1-ps.txt
// 3DMigoto: 215aae0dd0a856a1 |    Unity headers extracted from Hidden_HxVolumetricDirectionalLight
//    Shader "Hidden/HxVolumetricDirectionalLight" {
//      SubShader 1/1 {
//        Pass 3/3 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Hidden_HxVolumetricDirectionalLight:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 259 0 21
//   undeciphered1a: 15
//   Keywords { "VTRANSPARENCY_ON" "NOISE_ON" }
//   undeciphered2: 1 4 4 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 6048
//   Float 208 [hxNoiseContrast]
//   Vector 224 [Phase]
//   Vector 240 [Phase2]
//   Vector 256 [NoiseOffset] 3
//   Vector 272 [NoiseScale] 3
//   Vector 288 [Density]
//   Vector 960 [hxVolumeSettingsOld0] 2
//   Vector 968 [hxVolumeSettingsOld1] 2
//   Vector 976 [hxVolumeSettingsOld2] 2
//   Vector 984 [hxVolumeSettingsOld3] 2
//   Vector 992 [hxVolumeSettingsOld4] 2
//   Vector 1000 [hxVolumeSettingsOld5] 2
//   Vector 1008 [hxVolumeSettingsOld6] 2
//   Vector 1016 [hxVolumeSettingsOld7] 2
//   Vector 1024 [hxVolumeSettingsOld8] 2
//   Vector 1032 [hxVolumeSettingsOld9] 2
//   Vector 5120 [TransparencySliceSettings]
//   Float 5200 [hxRayOffset]
//   Float 5204 [HxTileSize]
//   Float 5696 [FirstLight]
//   Vector 5792 [ShadowBias] 3
//   Vector 5888 [_SpotLightParams]
//   Vector 5904 [CameraFoward] 3
//   Float 5916 [VolumeScale]
//   Float 5920 [ExtinctionEffect]
//   Vector 5924 [LightColour] 3
//   Vector 5936 [LightColour2] 3
//   Float 5968 [TintPercent]
//   Vector 5972 [MaxRayDistance] 2
//   Vector 6032 [SunSize] 2
//   Matrix 320 [hxVolumeMatrixOld0]
//   Matrix 384 [hxVolumeMatrixOld1]
//   Matrix 448 [hxVolumeMatrixOld2]
//   Matrix 512 [hxVolumeMatrixOld3]
//   Matrix 576 [hxVolumeMatrixOld4]
//   Matrix 640 [hxVolumeMatrixOld5]
//   Matrix 704 [hxVolumeMatrixOld6]
//   Matrix 768 [hxVolumeMatrixOld7]
//   Matrix 832 [hxVolumeMatrixOld8]
//   Matrix 896 [hxVolumeMatrixOld9]
//   Matrix 5216 [InverseProjectionMatrix]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerCameraRare" 352
//   Matrix 288 [unity_CameraToWorld]
//   ConstBuffer "UnityShadows" 416
//   Vector 96 [_LightSplitsNear]
//   Vector 112 [_LightSplitsFar]
//   Matrix 128 [unity_WorldToShadow0]
//   Matrix 192 [unity_WorldToShadow1]
//   Matrix 256 [unity_WorldToShadow2]
//   Matrix 320 [unity_WorldToShadow3]
//   SetTexture 0 [VolumetricDepth] 2D 1
//   SetTexture 1 [Tile5x5] 2D 3
//   SetTexture 2 [NoiseTexture3D] 3D 0
//   SetTexture 3 [_ShadowMapTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerCameraRare" 2
//   BindCB "UnityShadows" 3
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:39:08 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[378], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb3[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_comparison
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 17
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 215aae0dd0a856a1-ps.txt

mul r15.w, -r15.x, r15.y
mad r16.xyz, -r15.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s1, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
mad r1.xy, r1.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, r1.yyyy, cb0[327].xyzw
mad r1.xyzw, cb0[326].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[328].xyzw
add r1.xyzw, r1.xyzw, cb0[329].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb2[19].xyzx
mad r1.xyw, cb2[18].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb2[20].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb2[21].xyzx
add r2.xyz, -r1.xyzx, r16.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, cb0[369].xyzx, -r2.xyzx
div r1.w, cb1[5].y, r0.w
mad r2.xyz, -r2.xyzx, r1.wwww, r16.xyzx
mad r1.xyz, cb0[368].xyzx, cb0[362].xxxx, r1.xyzx
add r1.xyz, -r1.xyzx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r1.w, r1.w
div r1.xyz, r1.xyzx, r1.wwww
min r1.w, r1.w, cb0[373].z
min r2.w, r1.w, cb0[373].y
add r1.w, r1.w, -r2.w
min r3.x, cb0[18].y, l(128.000000)
ftoi r3.y, r3.x
round_z r3.x, r3.x
div r3.z, r2.w, r3.x
mul r4.xy, cb0[369].wwww, cb1[6].xyxx
mul r0.xy, r0.xyxx, r4.xyxx
div r0.xy, r0.xyxx, cb0[325].yyyy
ge r4.xy, r0.xyxx, -r0.xyxx
frc r0.xy, |r0.xyxx|
movc r0.xy, r4.xyxx, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[325].yyyy
div r0.xy, r0.xyxx, cb0[325].yyyy
sample_l r4.xyzw, r0.xyxx, t1.xyzw, s3, l(0.000000)
add r0.x, r4.x, cb0[325].x
frc r0.x, r0.x
mul r0.y, r0.x, r3.z
mad r2.xyz, -r0.yyyy, r1.xyzx, r2.xyzx
dp3 r0.y, cb0[368].xyzx, r1.xyzx
lt r0.z, l(0.990000), r0.z
and r0.z, r0.z, l(0x3f800000)
mad r3.w, -cb0[15].w, r0.y, cb0[15].z
log r3.w, r3.w
mul r3.w, r3.w, l(1.500000)
exp r3.w, r3.w
max r3.w, r3.w, l(0.000100)
div r3.w, cb0[15].y, r3.w
mul r3.w, r3.w, cb0[15].x
mul r3.w, r3.w, cb0[377].x
max r0.z, r0.z, cb0[377].y
mul r0.z, r0.z, r3.w
min r0.z, r0.z, l(100.000000)
mad r3.w, -cb0[14].w, r0.y, cb0[14].z
log r3.w, r3.w
mul r3.w, r3.w, l(1.500000)
exp r3.w, r3.w
div r3.w, cb0[14].y, r3.w
mul r3.w, r3.w, cb0[14].x
max r0.z, r0.z, r3.w
add r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, cb0[373].x
mul_sat r0.y, r0.y, l(0.500000)
add r4.xyz, cb0[370].yzwy, -cb0[371].xyzx
mad r4.xyz, r0.yyyy, r4.xyzx, cb0[371].xyzx
add r5.xyz, r2.xyzx, -r16.xyzx
dp3 r0.y, r5.xyzx, r5.xyzx
sqrt r0.y, r0.y
mul r3.w, r0.w, r0.y
div r0.w, r3.z, r0.w
max r4.w, cb0[13].x, l(0.000000)
ftoi r5.x, cb0[320].z
iadd r5.x, r5.x, l(-1)
itof r5.x, r5.x
mov r6.z, l(0)
mov r7.xyzw, l(0,0,0,0)
mov r8.xyzw, l(0,0,0,0)
mov r9.xyz, r2.xyzx
mov r5.yz, l(0,0,0,0)
mov r5.w, r0.y
mov r6.w, r3.w
mov r9.w, l(0)
loop
  ige r10.x, r9.w, r3.y
  breakc_nz r10.x
  ge r10.xyzw, r5.wwww, cb3[6].xyzw
  and r10.xyzw, r10.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  lt r11.xyzw, r5.wwww, cb3[7].xyzw
  and r11.xyzw, r11.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  mul r12.xyzw, r10.xyzw, r11.xyzw
  add r10.x, r12.y, r12.x
  mad r10.x, r10.z, r11.z, r10.x
  mad r10.x, r10.w, r11.w, r10.x
  lt r10.x, l(0.000000), r10.x
  mul r10.yzw, r9.yyyy, cb3[9].xxyz
  mad r10.yzw, cb3[8].xxyz, r9.xxxx, r10.yyzw
  mad r10.yzw, cb3[10].xxyz, r9.zzzz, r10.yyzw
  add r10.yzw, r10.yyzw, cb3[11].xxyz
  mul r11.xyz, r9.yyyy, cb3[13].xyzx
  mad r11.xyz, cb3[12].xyzx, r9.xxxx, r11.xyzx
  mad r11.xyz, cb3[14].xyzx, r9.zzzz, r11.xyzx
  add r11.xyz, r11.xyzx, cb3[15].xyzx
  mul r13.xyz, r9.yyyy, cb3[17].xyzx
  mad r13.xyz, cb3[16].xyzx, r9.xxxx, r13.xyzx
  mad r13.xyz, cb3[18].xyzx, r9.zzzz, r13.xyzx
  add r13.xyz, r13.xyzx, cb3[19].xyzx
  mul r14.xyz, r9.yyyy, cb3[21].xyzx
  mad r14.xyz, cb3[20].xyzx, r9.xxxx, r14.xyzx
  mad r14.xyz, cb3[22].xyzx, r9.zzzz, r14.xyzx
  add r14.xyz, r14.xyzx, cb3[23].xyzx
  mul r11.xyz, r12.yyyy, r11.xyzx
  mad r10.yzw, r10.yyzw, r12.xxxx, r11.xxyz
  mad r10.yzw, r13.xxyz, r12.zzzz, r10.yyzw
  mad r10.yzw, r14.xxyz, r12.wwww, r10.yyzw
  sample_c_lz r10.y, r10.yzyy, t3.xxxx, s2, r10.w
  movc r10.x, r10.x, r10.y, l(1.000000)
  add r10.yzw, r9.xxyz, cb0[16].xxyz
  mul r10.yzw, r10.yyzw, cb0[17].xxyz
  sample_l r11.xyzw, r10.yzwy, t2.xyzw, s0, l(1.000000)
  add r10.y, r11.w, l(-0.500000)
  mad r10.y, r10.y, r4.w, l(0.500000)
  dp2 r10.y, r10.yyyy, cb0[18].xxxx
  mov r11.x, r10.y
  mov r11.yz, l(0,0,0,0)
  mov r10.z, l(0)
  loop
    ige r10.w, r11.z, l(10)
    mov r10.z, l(0)
    breakc_nz r10.w
    eq r10.w, l(-1.000000), cb0[r11.z + 60].y
    if_nz r10.w
      mov r11.xy, r11.xxxx
      mov r10.z, l(-1)
      break
    endif
    ishl r11.w, r11.z, l(2)
    mul r12.xyz, r9.yyyy, cb0[r11.w + 21].xyzx
    mad r12.xyz, cb0[r11.w + 20].xyzx, r9.xxxx, r12.xyzx
    mad r12.xyz, cb0[r11.w + 22].xyzx, r9.zzzz, r12.xyzx
    add r12.xyz, r12.xyzx, cb0[r11.w + 23].xyzx
    lt r13.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r12.xyzx
    lt r14.xyz, r12.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r11.w, r13.x, r14.x
    and r11.w, r13.y, r11.w
    and r11.w, r14.y, r11.w
    and r11.w, r13.z, r11.w
    and r11.w, r14.z, r11.w
    if_nz r11.w
      ge r11.w, l(3.000000), cb0[r11.z + 60].y
      if_nz r11.w
        max r11.w, r11.x, cb0[r11.z + 60].x
        add r12.w, r11.x, cb0[r11.z + 60].x
        min r13.x, r11.x, cb0[r11.z + 60].x
        eq r14.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r11.z + 60].yyyy
        add r13.y, r11.x, -cb0[r11.z + 60].x
        movc r13.y, r14.w, r13.y, r11.x
        movc r13.x, r14.z, r13.x, r13.y
        movc r12.w, r14.y, r12.w, r13.x
        movc r6.x, r14.x, r11.w, r12.w
      else
        ge r11.w, l(7.000000), cb0[r11.z + 60].y
        dp3 r12.y, r12.xyzx, r12.xyzx
        sqrt r12.y, r12.y
        lt r12.y, r12.y, l(0.500000)
        and r11.w, r11.w, r12.y
        if_nz r11.w
          max r11.w, r11.x, cb0[r11.z + 60].x
          add r12.y, r11.x, cb0[r11.z + 60].x
          min r12.w, r11.x, cb0[r11.z + 60].x
          eq r13.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r11.z + 60].yyyy
          add r14.x, r11.x, -cb0[r11.z + 60].x
          movc r13.w, r13.w, r14.x, r11.x
          movc r12.w, r13.z, r12.w, r13.w
          movc r12.y, r13.y, r12.y, r12.w
          movc r6.x, r13.x, r11.w, r12.y
        else
          ge r11.w, l(11.000000), cb0[r11.z + 60].y
          dp2 r12.x, r12.xzxx, r12.xzxx
          sqrt r12.x, r12.x
          lt r12.x, r12.x, l(0.500000)
          and r11.w, r11.w, r12.x
          max r12.x, r11.x, cb0[r11.z + 60].x
          add r12.y, r11.x, cb0[r11.z + 60].x
          min r12.z, r11.x, cb0[r11.z + 60].x
          eq r13.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r11.z + 60].yyyy
          add r12.w, r11.x, -cb0[r11.z + 60].x
          movc r12.w, r13.w, r12.w, r11.x
          movc r12.z, r13.z, r12.z, r12.w
          movc r12.y, r13.y, r12.y, r12.z
          movc r12.x, r13.x, r12.x, r12.y
          movc r6.x, r11.w, r12.x, r11.x
        endif
      endif
    else
      mov r6.x, r11.x
    endif
    iadd r6.y, r11.z, l(1)
    mov r11.xyz, r6.xzyx
    mov r10.z, r10.w
  endloop
  movc r6.x, r10.z, r11.y, r11.x
  mul r6.y, r6.x, cb0[18].w
  mad r5.z, r6.y, r3.z, r5.z
  mul r6.y, r5.z, l(-1.442695)
  exp r6.y, r6.y
  mul r6.x, r3.z, r6.x
  mul r6.x, r6.y, r6.x
  add r6.y, -r10.x, l(1.000000)
  mul r6.y, r6.y, cb0[362].z
  mad r6.y, r10.x, r0.z, r6.y
  mul r6.x, r6.x, r6.y
  max r6.x, r6.x, l(0.000000)
  add r5.y, r5.y, r6.x
  mul r10.xyw, r4.xyxz, r6.xxxx
  dp3 r6.x, r10.xywx, l(0.0396819152, 0.458021790, 0.00609653955, 0.000000)
  div r6.y, r6.w, cb0[320].x
  log r6.y, r6.y
  mul r6.y, r6.y, cb0[320].y
  exp r6.y, r6.y
  mul r10.x, r5.x, r6.y
  mov_sat r10.x, r10.x
  add r10.x, -r10.x, l(1.000000)
  mul_sat r12.x, r6.x, r10.x
  mad_sat r13.xyzw, r6.yyyy, r5.xxxx, l(-1.000000, -2.000000, -3.000000, -4.000000)
  add r13.xyzw, -r13.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul_sat r13.xyzw, r6.xxxx, r13.wxyz
  mov r12.yzw, r13.yyzw
  add r7.xyzw, r7.xyzw, r12.xyzw
  mad_sat r10.xyw, r6.yyyy, r5.xxxx, l(-5.000000, -6.000000, 0.000000, -7.000000)
  add r10.xyw, -r10.xyxw, l(1.000000, 1.000000, 0.000000, 1.000000)
  mul_sat r13.yzw, r6.xxxx, r10.xxyw
  add r8.xyzw, r8.xyzw, r13.xyzw
  mad r9.xyz, -r1.xyzx, r3.zzzz, r9.xyzx
  add r5.w, r3.z, r5.w
  add r6.w, r0.w, r6.w
  iadd r9.w, r9.w, l(1)
endloop
mov o1.xyzw, r7.xyzw
mov o2.xyzw, r8.xyzw
lt r0.y, l(0.000000), r1.w
if_nz r0.y
  add r0.y, r2.w, r3.z
  mad r2.xyz, -r1.xyzx, r0.yyyy, r16.xyzx
  div r0.y, r1.w, r3.x
  mul r0.x, r0.x, r0.y
  mad r2.xyz, -r0.xxxx, r1.xyzx, r2.xyzx
  mov r6.z, l(0)
  mov r7.xyz, r2.xyzx
  mov r0.xw, r5.yyyz
  mov r1.w, l(0)
  loop
    ige r2.w, r1.w, r3.y
    breakc_nz r2.w
    add r3.xzw, r7.xxyz, cb0[16].xxyz
    mul r3.xzw, r3.xxzw, cb0[17].xxyz
    sample_l r8.xyzw, r3.xzwx, t2.xyzw, s0, l(1.000000)
    add r2.w, r8.w, l(-0.500000)
    mad r2.w, r2.w, r4.w, l(0.500000)
    dp2 r2.w, r2.wwww, cb0[18].xxxx
    mov r8.x, r2.w
    mov r8.yz, l(0,0,0,0)
    mov r3.x, l(0)
    loop
      ige r3.z, r8.z, l(10)
      mov r3.x, l(0)
      breakc_nz r3.z
      eq r3.z, l(-1.000000), cb0[r8.z + 60].y
      if_nz r3.z
        mov r8.xy, r8.xxxx
        mov r3.x, l(-1)
        break
      endif
      ishl r3.w, r8.z, l(2)
      mul r9.xyz, r7.yyyy, cb0[r3.w + 21].xyzx
      mad r9.xyz, cb0[r3.w + 20].xyzx, r7.xxxx, r9.xyzx
      mad r9.xyz, cb0[r3.w + 22].xyzx, r7.zzzz, r9.xyzx
      add r9.xyz, r9.xyzx, cb0[r3.w + 23].xyzx
      lt r10.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r9.xyzx
      lt r11.xyz, r9.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      and r3.w, r10.x, r11.x
      and r3.w, r10.y, r3.w
      and r3.w, r11.y, r3.w
      and r3.w, r10.z, r3.w
      and r3.w, r11.z, r3.w
      if_nz r3.w
        ge r3.w, l(3.000000), cb0[r8.z + 60].y
        if_nz r3.w
          max r3.w, r8.x, cb0[r8.z + 60].x
          add r5.x, r8.x, cb0[r8.z + 60].x
          min r5.w, r8.x, cb0[r8.z + 60].x
          eq r10.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r8.z + 60].yyyy
          add r6.w, r8.x, -cb0[r8.z + 60].x
          movc r6.w, r10.w, r6.w, r8.x
          movc r5.w, r10.z, r5.w, r6.w
          movc r5.x, r10.y, r5.x, r5.w
          movc r6.x, r10.x, r3.w, r5.x
        else
          ge r3.w, l(7.000000), cb0[r8.z + 60].y
          dp3 r5.x, r9.xyzx, r9.xyzx
          sqrt r5.x, r5.x
          lt r5.x, r5.x, l(0.500000)
          and r3.w, r3.w, r5.x
          if_nz r3.w
            max r3.w, r8.x, cb0[r8.z + 60].x
            add r5.x, r8.x, cb0[r8.z + 60].x
            min r5.w, r8.x, cb0[r8.z + 60].x
            eq r10.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r8.z + 60].yyyy
            add r6.w, r8.x, -cb0[r8.z + 60].x
            movc r6.w, r10.w, r6.w, r8.x
            movc r5.w, r10.z, r5.w, r6.w
            movc r5.x, r10.y, r5.x, r5.w
            movc r6.x, r10.x, r3.w, r5.x
          else
            ge r3.w, l(11.000000), cb0[r8.z + 60].y
            dp2 r5.x, r9.xzxx, r9.xzxx
            sqrt r5.x, r5.x
            lt r5.x, r5.x, l(0.500000)
            and r3.w, r3.w, r5.x
            max r5.x, r8.x, cb0[r8.z + 60].x
            add r5.w, r8.x, cb0[r8.z + 60].x
            min r6.w, r8.x, cb0[r8.z + 60].x
            eq r9.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r8.z + 60].yyyy
            add r7.w, r8.x, -cb0[r8.z + 60].x
            movc r7.w, r9.w, r7.w, r8.x
            movc r6.w, r9.z, r6.w, r7.w
            movc r5.w, r9.y, r5.w, r6.w
            movc r5.x, r9.x, r5.x, r5.w
            movc r6.x, r3.w, r5.x, r8.x
          endif
        endif
      else
        mov r6.x, r8.x
      endif
      iadd r6.y, r8.z, l(1)
      mov r8.xyz, r6.xzyx
      mov r3.x, r3.z
    endloop
    movc r2.w, r3.x, r8.y, r8.x
    mul r3.z, r2.w, cb0[18].w
    mad r0.w, r3.z, r0.y, r0.w
    mul r3.z, r0.w, l(-1.442695)
    exp r3.z, r3.z
    mul r2.w, r0.y, r2.w
    mul r2.w, r3.z, r2.w
    mul r2.w, r0.z, r2.w
    max r2.w, r2.w, l(0.000000)
    add r0.x, r0.x, r2.w
    mad r7.xyz, -r1.xyzx, r0.yyyy, r7.xyzx
    iadd r1.w, r1.w, l(1)
  endloop
  mov r5.yz, r0.xxwx
endif
mul r0.x, r5.z, l(-1.442695)
exp r0.x, r0.x
min r0.x, r0.x, l(1.000000)
mul o0.xyz, r4.xyzx, r5.yyyy
add r0.y, -cb0[370].x, l(1.000000)
add r0.z, -r0.x, l(1.000000)
mad r0.x, r0.y, r0.z, r0.x
add r0.x, -r0.x, l(1.000000)
mul o0.w, r0.x, cb0[356].x
ret
// Approximately 0 instruction slots used