// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 132a7a9436dc290e-ps.txt
// 3DMigoto: 132a7a9436dc290e |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 113 3 12
//   undeciphered1a: 17
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_BOX" "FOG_POINT_LIGHT1" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 544
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 432 [_SunDir] 3
//   Vector 448 [_SunColor] 3
//   Vector 480 [_FogScatteringData2]
//   Float 496 [_Jitter]
//   Float 512 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_FogOfWar] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:32:31 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[33], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 19
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r17.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 132a7a9436dc290e-ps.txt

mul r17.w, -r17.x, r17.y
mad r18.xyz, -r17.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r18.y
mov r1.xz, r18.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
lt r0.z, cb0[13].y, r1.y
lt r0.w, cb0[13].y, r0.y
and r0.z, r0.w, r0.z
lt r0.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r0.w
or r0.y, r0.y, r0.z
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r0.xyzw, r0.xyxx, t1.wxyz, s2
    ge r0.y, l(0.000000), r0.x
  else
    mov r0.xy, l(1.000000,0,0,0)
  endif
  if_z r0.y
    add r2.w, r2.y, l(0.000010)
    add r0.yzw, -r1.xxyz, r2.xxwz
    dp3 r1.w, r0.yzwy, r0.yzwy
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.xyz, r1.wwww, r0.yzwy
    div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r5.xyz, -r2.xyzx, -r4.xyzx
    mul r5.xyz, r3.xyzx, r5.xyzx
    add r2.xyz, -r2.xyzx, r4.xyzx
    mul r2.xyz, r2.xyzx, r3.xyzx
    min r4.xyz, r5.xyzx, r2.xyzx
    max r4.xy, r4.yzyy, r4.xxxx
    max r2.w, r4.y, r4.x
    max r2.w, r2.w, l(0.000000)
    max r2.xyz, r5.xyzx, r2.xyzx
    min r2.xy, r2.yzyy, r2.xxxx
    min r2.x, r2.y, r2.x
    min r2.y, r1.w, cb0[12].z
    min r2.x, r2.y, r2.x
    add r2.x, -r2.w, r2.x
    lt r2.z, l(0.000000), r2.x
    if_nz r2.z
      div r3.xyz, r2.wwww, r3.xyzx
      add r1.xyz, r1.xyzx, r3.xyzx
      div r3.xy, cb0[18].xzxx, cb0[13].wwww
      log r2.z, r2.x
      mul r2.z, r2.z, l(0.693147182)
      max r2.z, r2.z, l(0.000000)
      mad r2.z, r2.z, cb0[15].x, l(0.100000)
      mul r2.z, r2.z, cb0[13].z
      mul_sat r3.z, r2.y, cb0[15].y
      mul r2.z, r2.z, r3.z
      add r2.y, -r2.w, r2.y
      max r2.z, r2.z, l(0.010000)
      mul r4.xyz, r0.yzwy, r2.zzzz
      div r4.xyz, r4.xyzx, r1.wwww
      div r2.z, r2.x, r2.z
      add r5.xyz, r1.xyzx, -cb0[22].xyzx
      add r6.xyz, r1.xyzx, -cb0[24].xyzx
      mul r7.xz, r4.xxzx, cb0[13].wwww
      mul r2.w, cb0[13].z, cb0[13].y
      div r7.y, r4.y, r2.w
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r2.w
      add r3.zw, cb0[14].xxxz, cb0[17].xxxz
      frc r2.w, cb0[32].x
      mad r2.z, r2.w, cb0[31].x, r2.z
      ge r2.x, r2.x, r2.y
      and r2.x, r2.x, l(0x3f800000)
      mov r8.xyzw, l(0,0,0,0)
      mov r9.xyz, r5.xyzx
      mov r10.xyz, r6.xyzx
      mov r2.y, r2.z
      mov r12.xyz, r1.xyzx
      mov r11.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r2.y
        breakc_nz r2.w
        mad r13.xy, r3.zwzz, cb0[13].wwww, -r12.xzxx
        mul r13.xy, r3.xyxx, |r13.xyxx|
        max r2.w, r13.y, r13.x
        sample_l r13.xyzw, r12.xzxx, t2.xyzw, s0, l(0.000000)
        mad r2.w, r2.w, cb0[18].w, |r12.y|
        add r2.w, -r2.w, r13.w
        lt r4.w, l(0.000000), r2.w
        if_nz r4.w
          add r4.w, -r2.w, l(1.000000)
          mul r14.xyz, r4.wwww, cb0[11].xyzx
          mul r15.w, r2.w, l(0.400000)
          dp3 r2.w, r9.xyzx, r9.xyzx
          div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
          dp3 r4.w, r10.xyzx, r10.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mul r16.xyz, r2.wwww, cb0[23].xyzx
          mad r16.xyz, cb0[25].xyzx, r4.wwww, r16.xyzx
          mad r13.xyz, r16.xyzx, r15.wwww, r13.xyzx
          mul r13.xyz, r15.wwww, r13.xyzx
          mul r15.xyz, r13.xyzx, r14.xyzx
          add r2.w, -r11.w, l(1.000000)
          mad r13.xyzw, r15.xyzw, r2.wwww, r11.xyzw
          lt r2.w, l(0.990000), r13.w
          if_nz r2.w
            mov r8.xyzw, r15.xyzw
            mov r11.xyzw, r13.xyzw
            break
          endif
          mov r8.xyzw, r15.xyzw
          mov r11.xyzw, r13.xyzw
        endif
        add r9.xyz, r4.xyzx, r9.xyzx
        add r10.xyz, r4.xyzx, r10.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r12.xyz, r7.xyzx, r12.xyzx
      endloop
      lt r1.x, r11.w, l(0.990000)
      and r1.x, r1.x, l(0x3f800000)
      add r1.y, -r11.w, l(1.000000)
      mul r1.z, r2.y, r2.x
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r2.xyzw, r8.xyzw, r1.xxxx, r11.xyzw
      div r0.yzw, r0.yyzw, r1.wwww
      dp3 r0.y, r0.yzwy, cb0[27].xyzx
      mul r0.y, r0.y, cb0[30].w
      max r0.y, r0.y, l(0.000000)
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r2.w, r0.y
      add r1.xyz, -r2.xyzx, cb0[28].xyzx
      mad r2.xyz, r0.yyyy, r1.xyzx, r2.xyzx
      mul r1.xyzw, r2.xyzw, cb0[10].wwww
      mul o0.xyzw, r0.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used