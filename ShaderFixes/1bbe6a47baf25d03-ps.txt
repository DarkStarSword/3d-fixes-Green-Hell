// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 1bbe6a47baf25d03-ps.txt
// 3DMigoto: 1bbe6a47baf25d03 |    Unity headers extracted from DynamicFog_Image Effect_Basic
//    Shader "DynamicFog/Image Effect/Basic" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Image Effect_Basic:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 66 3 5
//   undeciphered1a: 7
//   Keywords { "FOG_OF_WAR_ON" "DITHER_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 256
//   Vector 32 [_MainTex_TexelSize]
//   Float 48 [_FogDither]
//   Float 80 [_FogAlpha]
//   Vector 96 [_FogOfWarSize] 3
//   Vector 112 [_FogOfWarCenterAdjusted] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogHeightData]
//   Vector 224 [_FogColor]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CameraDepthTexture] 2D 1
//   SetTexture 2 [_FogOfWar] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:36:27 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 9
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r7.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 1bbe6a47baf25d03-ps.txt

mul r7.w, -r7.x, r7.y
mad r8.xyz, -r7.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s0
sample r1.xyzw, v1.zwzz, t1.xyzw, s1
mad r1.x, cb1[7].x, r1.x, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.y, -cb0[13].y, r8.y
mov r2.xz, r8.xxzx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.y, r3.y, l(0.000010)
lt r1.z, cb0[13].x, r2.y
lt r1.w, cb0[13].x, r1.y
and r1.z, r1.w, r1.z
if_z r1.z
  add r3.w, r3.y, l(0.000010)
  add r3.xyz, -r2.xyzx, r3.xwzx
  dp2 r1.z, r3.xzxx, r3.xzxx
  sqrt r1.z, r1.z
  div r4.xy, r3.xzxx, r1.zzzz
  div r1.z, r1.z, r3.y
  min r5.y, r2.y, cb0[13].x
  add r1.w, r2.y, -r5.y
  mul r1.w, r1.w, r1.z
  mad r5.xz, -r4.xxyx, r1.wwww, r8.xxzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r1.w, r1.w
  add r2.xzw, -r2.xxyz, r5.xxyz
  dp3 r2.x, r2.xzwx, r2.xzwx
  sqrt r2.x, r2.x
  lt r2.z, r2.x, r1.w
  if_nz r2.z
    lt r2.z, l(0.000000), r1.z
    lt r2.w, l(-0.500000), r1.y
    and r2.z, r2.w, r2.z
    lt r2.w, r1.z, l(0.000000)
    lt r3.w, r1.y, l(0.500000)
    and r2.w, r2.w, r3.w
    and r1.y, r1.y, r2.w
    movc r6.y, r2.z, cb0[13].x, r1.y
    add r1.y, -r2.y, r6.y
    mul r1.y, r1.y, r1.z
    mad r6.xz, -r4.xxyx, r1.yyyy, r8.xxzx
    add r2.yzw, r5.xxyz, -r6.xxyz
    dp3 r1.y, r2.yzwy, r2.yzwy
    sqrt r1.y, r1.y
    add r1.z, r1.w, -r2.x
    min r1.y, r1.z, r1.y
    lt r1.z, l(0.000000), r1.y
    if_nz r1.z
      div r2.yzw, r3.xxyz, r1.wwww
      mad r2.yzw, r2.yyzw, r1.yyyy, r5.xxyz
      lt r1.x, r1.x, l(0.999000)
      if_nz r1.x
        div r1.xz, r2.yywy, cb0[6].xxzx
        add r1.xz, r1.xxzx, -cb0[7].xxzx
        sample r3.xyzw, r1.xzxx, t2.xyzw, s2
        mul r1.x, r3.w, cb0[5].x
        ge r1.z, l(0.000000), r1.x
      else
        mov r1.x, cb0[5].x
        mov r1.z, l(0)
      endif
      add r1.y, r1.y, r2.x
      add r1.w, -r2.z, cb0[13].x
      mul r2.x, cb0[13].w, cb0[13].x
      div r1.w, r1.w, r2.x
      add r1.w, r1.w, l(-0.100000)
      add r1.y, r1.y, -cb0[12].x
      div r1.y, r1.y, cb0[12].y
      min_sat r1.y, r1.y, r1.w
      mul r2.w, r1.y, cb0[14].w
      mul r2.xyz, r2.wwww, cb0[14].xyzx
      mul r3.xyzw, r1.xxxx, r2.xyzw
      mad r1.x, -r2.w, r1.x, l(1.000000)
      mad r2.xyzw, r0.xyzw, r1.xxxx, r3.xyzw
      movc r0.xyzw, r1.zzzz, r0.xyzw, r2.xyzw
    endif
  endif
endif
mul r1.xy, v1.xyxx, cb0[2].zwzz
dp2 r1.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r1.xyxx
frc r1.x, r1.x
add r1.x, r1.x, l(-0.400000)
mad r1.x, r1.x, cb0[3].x, l(1.000000)
mul o0.xyzw, r0.xyzw, r1.xxxx
ret
// Approximately 0 instruction slots used