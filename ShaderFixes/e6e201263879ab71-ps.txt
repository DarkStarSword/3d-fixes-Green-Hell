// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e6e201263879ab71-ps.txt
// 3DMigoto: e6e201263879ab71 |    Unity headers extracted from DynamicFog_Image Effect_Orthographic Orthogonal
//    Shader "DynamicFog/Image Effect/Orthographic Orthogonal" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Image Effect_Orthographic Orthogonal:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 75 2 4
//   undeciphered1a: 5
//   undeciphered2: 1 2 2 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 240
//   Float 80 [_FogAlpha]
//   Vector 96 [_FogDistance]
//   Vector 112 [_FogHeightData]
//   Vector 128 [_FogColor]
//   Vector 208 [_ClipDir] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CameraDepthTexture] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:24:11 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[14], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 7
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r5.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e6e201263879ab71-ps.txt

mul r5.w, -r5.x, r5.y
mad r6.xyz, -r5.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s0
sample r1.xyzw, v1.zwzz, t1.xyzw, s1
add r1.x, -r1.x, l(1.000000)
add r1.y, -cb0[7].y, r6.y
mul r2.xyz, cb0[13].xyzx, cb1[5].zzzz
add r1.x, -r1.x, l(1.000000)
mad r1.xzw, -r2.xxyz, r1.xxxx, v2.xxyz
add r2.x, r1.y, r1.z
lt r2.y, cb0[7].z, r1.y
lt r2.z, cb0[7].z, r2.x
and r2.y, r2.z, r2.y
if_z r2.y
  dp2 r2.y, r1.xwxx, r1.xwxx
  sqrt r2.y, r2.y
  div r1.xw, r1.xxxw, r2.yyyy
  div r2.z, r2.y, r1.z
  min r2.w, r1.y, cb0[7].z
  add r3.x, r1.y, -r2.w
  mul r3.x, r2.z, r3.x
  mul r3.yz, r1.xxwx, r3.xxxx
  dp2 r3.y, -r3.yzyy, -r3.yzyy
  sqrt r3.y, r3.y
  lt r3.z, r3.y, r2.y
  if_nz r3.z
    mad r3.xz, -r1.xxwx, r3.xxxx, r6.xxzx
    lt r3.w, l(0.000000), r2.z
    lt r4.x, l(-0.500000), r2.x
    and r3.w, r3.w, r4.x
    lt r4.x, r2.z, l(0.000000)
    lt r4.y, r2.x, l(0.500000)
    and r4.x, r4.y, r4.x
    and r2.x, r2.x, r4.x
    movc r2.x, r3.w, cb0[7].z, r2.x
    add r1.y, -r1.y, r2.x
    mul r1.y, r1.y, r2.z
    mad r1.xy, -r1.xwxx, r1.yyyy, r6.xzxx
    add r1.xy, -r1.xyxx, r3.xzxx
    dp2 r1.x, r1.xyxx, r1.xyxx
    sqrt r1.x, r1.x
    add r1.y, r2.y, -r3.y
    min r1.x, r1.y, r1.x
    lt r1.y, l(0.000000), r1.x
    div r1.z, r1.z, r2.y
    mul r1.z, r1.x, r1.z
    add r1.w, -r2.w, cb0[7].x
    mul r2.x, cb0[7].w, cb0[7].x
    div r1.w, r1.w, r2.x
    add r1.w, r1.w, l(-0.100000)
    add r2.y, r3.y, -cb0[6].x
    div r2.y, r2.y, cb0[6].y
    max_sat r1.w, r1.w, r2.y
    mul r4.w, r1.w, cb0[8].w
    mul r4.xyz, r4.wwww, cb0[8].xyzx
    mad r2.y, r1.z, l(0.500000), r2.w
    mad r2.z, r1.x, l(0.500000), r3.y
    add r2.w, -r2.y, cb0[7].x
    div r2.w, r2.w, r2.x
    add r2.w, r2.w, l(-0.100000)
    add r3.x, r2.z, -cb0[6].x
    div r3.x, r3.x, cb0[6].y
    max_sat r2.w, r2.w, r3.x
    mul r3.w, r2.w, cb0[8].w
    mul r3.xyz, r3.wwww, cb0[8].xyzx
    mad r1.w, -cb0[8].w, r1.w, l(1.000000)
    mad r3.xyzw, r3.xyzw, r1.wwww, r4.xyzw
    mad r1.z, r1.z, l(0.500000), r2.y
    mad r1.x, r1.x, l(0.500000), r2.z
    add r1.z, -r1.z, cb0[7].x
    div r1.z, r1.z, r2.x
    add r1.z, r1.z, l(-0.100000)
    add r1.x, r1.x, -cb0[6].x
    div r1.x, r1.x, cb0[6].y
    max_sat r1.x, r1.x, r1.z
    mul r2.w, r1.x, cb0[8].w
    mul r2.xyz, r2.wwww, cb0[8].xyzx
    add r1.x, -r3.w, l(1.000000)
    mad r2.xyzw, r2.xyzw, r1.xxxx, r3.xyzw
    mul r3.xyzw, r2.xyzw, cb0[5].xxxx
    mad r1.x, -r2.w, cb0[5].x, l(1.000000)
    mad r2.xyzw, r0.xyzw, r1.xxxx, r3.xyzw
    movc o0.xyzw, r1.yyyy, r2.xyzw, r0.xyzw
  else
    mov o0.xyzw, r0.xyzw
  endif
else
  mov o0.xyzw, r0.xyzw
endif
ret
// Approximately 0 instruction slots used