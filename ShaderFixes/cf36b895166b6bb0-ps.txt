// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed cf36b895166b6bb0-ps.txt
// 3DMigoto: cf36b895166b6bb0 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 144 3 10
//   undeciphered1a: 14
//   Keywords { "FOG_AREA_BOX" "FOG_VOID_BOX" "FOG_USE_XY_PLANE" "FOG_BLUR_ON" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 496
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 416 [_VolumetricFogSunWorldPos]
//   Vector 432 [_VolumetricFogSunShadowsData]
//   Float 448 [_Jitter]
//   Matrix 352 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:12:54 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[29], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed cf36b895166b6bb0-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.z, -cb0[13].x, r15.z
mov r1.xy, r15.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.zzwz
and r2.y, r2.z, r2.y
lt r2.z, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r5.xyz, -r2.yzwy, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.yzw, -r2.yyzw, r4.xxyz
  mul r2.yzw, r2.yyzw, r3.xxyz
  min r4.xyz, r5.xyzx, r2.yzwy
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.yzw, r5.xxyz, r2.yyzw
  min r2.yz, r2.zzwz, r2.yyyy
  min r2.y, r2.z, r2.y
  min r2.z, r0.w, cb0[12].z
  min r2.y, r2.z, r2.y
  add r2.y, -r1.w, r2.y
  lt r2.w, l(0.000000), r2.y
  if_nz r2.w
    div r3.xyz, r1.wwww, r3.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    mul r1.xyz, r0.xyzx, r2.yyyy
    div r1.xyz, r1.xyzx, r0.wwww
    add r1.xyz, r1.xyzx, r3.xyzx
    add r1.xyz, -r1.xyzx, cb0[17].xyzx
    mul r1.xyz, |r1.xyzx|, cb0[18].xyzx
    max r1.x, r1.y, r1.x
    max r1.x, r1.z, r1.x
    add r1.x, r1.x, l(-1.000000)
    mad_sat r1.x, cb0[18].w, r1.x, l(1.000000)
    lt r1.y, l(0.000000), r1.x
    if_nz r1.y
      div r1.yz, cb0[20].xxyx, cb0[13].wwww
      log r2.w, r2.y
      mul r2.w, r2.w, l(0.693147182)
      max r2.w, r2.w, l(0.000000)
      mad r2.w, r2.w, cb0[15].x, l(0.100000)
      mul r2.w, r2.w, cb0[13].z
      mul_sat r4.x, r2.z, cb0[15].y
      mul r2.w, r2.w, r4.x
      add r2.z, -r1.w, r2.z
      max r2.w, r2.w, l(0.010000)
      mul r4.xyz, r0.xyzx, r2.wwww
      div r4.xyz, r4.xyzx, r0.wwww
      div r2.w, r2.y, r2.w
      mul r5.xy, r4.xyxx, cb0[13].wwww
      mul r4.x, cb0[13].z, cb0[13].y
      div r5.z, r4.z, r4.x
      add r4.yz, r3.xxyx, cb0[14].xxzx
      mul r4.yz, r4.yyzy, cb0[13].wwww
      div r4.x, r3.z, r4.x
      add r6.xy, cb0[14].xyxx, cb0[19].xyxx
      frc r4.w, r2.x
      mad r2.w, r4.w, cb0[28].x, r2.w
      add r3.w, r3.z, cb0[13].x
      mul r7.xyz, r3.yyyy, cb0[23].xywx
      mad r7.xyz, cb0[22].xywx, r3.xxxx, r7.xyzx
      mad r7.xyz, cb0[24].xywx, r3.wwww, r7.xyzx
      add r7.xyz, r7.xyzx, cb0[25].xywx
      div r6.zw, r7.xxxy, r7.zzzz
      mad r6.zw, r6.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r3.z, r2.x, cb0[27].y, l(1.000000)
      mul r3.z, r2.y, r3.z
      mul r0.xyz, r0.xyzx, r3.zzzz
      div r0.xyz, r0.xyzx, r0.wwww
      add r0.xyz, r0.xyzx, r3.xywx
      mul r7.xyz, r0.yyyy, cb0[23].xywx
      mad r7.xyz, cb0[22].xywx, r0.xxxx, r7.xyzx
      mad r7.xyz, cb0[24].xywx, r0.zzzz, r7.xyzx
      add r7.xyz, r7.xyzx, cb0[25].xywx
      div r7.xy, r7.xyxx, r7.zzzz
      mad r7.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r0.w, -r1.w, cb0[26].w
      mul_sat r0.w, r0.w, l(0.0285714287)
      mul r0.w, r0.w, cb0[27].x
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
      ge r2.y, r2.y, r2.z
      and r2.y, r2.y, l(0x3f800000)
      add r6.zw, r6.zzzw, -r7.xxxy
      add r3.xyz, -r0.xyzx, r3.xywx
      mov r8.xyzw, l(0,0,0,0)
      mov r2.z, r2.w
      mov r10.xyz, r4.yzxy
      mov r9.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r2.z
        breakc_nz r3.w
        mad r7.zw, r6.xxxy, cb0[13].wwww, -r10.xxxy
        mul r7.zw, r1.yyyz, |r7.zzzw|
        max r3.w, r7.w, r7.z
        sample_l r11.xyzw, r10.xyxx, t1.xyzw, s1, l(0.000000)
        mad r3.w, r3.w, cb0[20].w, |r10.z|
        add r3.w, -r3.w, r11.w
        lt r4.w, l(0.000000), r3.w
        if_nz r4.w
          add r4.w, -r3.w, l(1.000000)
          mul r12.xyz, r4.wwww, cb0[11].xyzx
          mul r12.w, r3.w, l(0.400000)
          mul r3.w, r1.w, r2.z
          mad r7.zw, r3.wwww, r6.zzzw, r7.xxxy
          sample_l r13.xyzw, r7.zwzz, t2.xyzw, s4, l(0.000000)
          dp4 r4.w, r13.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mad r13.xyz, r3.wwww, r3.xyzx, r0.xyzx
          add r13.xyz, r13.xyzx, -cb0[26].xyzx
          dp3 r3.w, r13.xyzx, r13.xyzx
          sqrt r3.w, r3.w
          add_sat r3.w, -r3.w, r4.w
          mul r4.w, r0.w, r9.w
          add r3.w, r3.w, l(-1.000000)
          mad r4.w, r4.w, r3.w, l(1.000000)
          mul r11.xyz, r4.wwww, r11.xyzx
          mad r3.w, cb0[27].z, r3.w, l(1.000000)
          mul r12.xyzw, r3.wwww, r12.xyzw
          mul r11.xyz, r11.xyzx, r12.wwww
          mul r12.xyz, r11.xyzx, r12.xyzx
          add r3.w, -r9.w, l(1.000000)
          mad r11.xyzw, r12.xyzw, r3.wwww, r9.xyzw
          lt r3.w, l(0.990000), r11.w
          if_nz r3.w
            mov r8.xyzw, r12.xyzw
            mov r9.xyzw, r11.xyzw
            break
          endif
          mov r8.xyzw, r12.xyzw
          mov r9.xyzw, r11.xyzw
        endif
        add r2.z, r2.z, l(-1.000000)
        add r10.xyz, r5.xyzx, r10.xyzx
      endloop
      lt r0.x, r9.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r9.w, l(1.000000)
      mul r0.z, r2.z, r2.y
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.z, r0.x
      mad r0.xyzw, r8.xyzw, r0.xxxx, r9.xyzw
      mul r0.xyzw, r0.xyzw, cb0[10].wwww
      mul r0.xyzw, r1.xxxx, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xyzw, r1.xxxx
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
sample r4.xyzw, v1.zwzz, t4.xyzw, s3
add r0.xyz, -r3.xyzx, r4.xyzx
mad r0.xyz, r2.wwww, r0.xyzx, r3.xyzx
mad_sat r0.w, -r0.w, r1.x, l(1.000000)
mad o0.xyz, r0.xyzx, r0.wwww, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used