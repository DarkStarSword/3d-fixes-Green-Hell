// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 324d1a8fa1490d6a-ps.txt
// 3DMigoto: 324d1a8fa1490d6a |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 149 2 8
//   undeciphered1a: 22
//   Keywords { "FOG_AREA_SPHERE" "FOG_POINT_LIGHT2" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 640
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 368 [_FogPointLightPosition2] 3
//   Vector 384 [_FogPointLightColor2] 3
//   Vector 416 [_SunDir] 3
//   Vector 432 [_SunColor] 3
//   Vector 464 [_FogScatteringData2]
//   Vector 560 [_VolumetricFogSunWorldPos]
//   Vector 576 [_VolumetricFogSunShadowsData]
//   Float 592 [_Jitter]
//   Matrix 496 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:46:58 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[38], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 24
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r22.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 324d1a8fa1490d6a-ps.txt

mul r22.w, -r22.x, r22.y
mad r23.xyz, -r22.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.y, -cb0[13].x, r23.y
mov r2.xz, r23.xxzx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.y, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.ywyy
and r3.x, r3.y, r3.x
lt r3.y, r2.y, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.y, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xwzx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[17].xyzx
  div r4.xyz, r1.xyzx, r1.wwww
  dp3 r2.w, r4.xyzx, r3.xyzx
  dp3 r3.x, r3.xyzx, r3.xyzx
  add r3.x, r3.x, -cb0[18].y
  mad r3.x, r2.w, r2.w, -r3.x
  ge r3.y, r3.x, l(0.000000)
  sqrt r3.z, r3.x
  movc r3.x, r3.y, r3.z, r3.x
  add r3.y, -r2.w, -r3.x
  max r3.y, r3.y, l(0.000000)
  min r3.z, r1.w, cb0[12].z
  add r2.w, -r2.w, r3.x
  min r2.w, r3.z, r2.w
  add r2.w, -r3.y, r2.w
  ge r3.x, r2.w, l(0.000000)
  if_nz r3.x
    mul r3.xw, v1.xxxy, cb1[6].xxxy
    dp2 r3.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xwxx
    frc r3.x, r3.x
    add r3.x, r3.x, l(-0.500000)
    mad r5.xyz, r4.xyzx, r3.yyyy, r2.xyzx
    log r2.x, r2.w
    mul r2.x, r2.x, l(0.693147182)
    max r2.x, r2.x, l(0.000000)
    mad r2.x, r2.x, cb0[15].x, l(0.100000)
    mul r2.x, r2.x, cb0[13].z
    mul_sat r2.y, r3.z, cb0[15].y
    mul r2.x, r2.y, r2.x
    add r2.y, -r3.y, r3.z
    max r2.x, r2.x, l(0.010000)
    mul r6.xyz, r1.xyzx, r2.xxxx
    div r6.xyz, r6.xyzx, r1.wwww
    div r2.x, r2.w, r2.x
    add r7.xyz, r5.xyzx, -cb0[19].xyzx
    add r8.xyz, r5.xyzx, -cb0[21].xyzx
    add r9.xyz, r5.xyzx, -cb0[23].xyzx
    mul r10.xz, r6.xxzx, cb0[13].wwww
    mul r2.z, cb0[13].z, cb0[13].y
    div r10.y, r6.y, r2.z
    add r3.zw, r5.xxxz, cb0[14].xxxz
    mul r3.zw, r3.zzzw, cb0[13].wwww
    div r2.z, r5.y, r2.z
    add r11.xy, cb0[14].xzxx, cb0[17].xzxx
    frc r4.w, r3.x
    mad r2.x, r4.w, cb0[37].x, r2.x
    add r5.w, r5.y, cb0[13].x
    mul r12.xyz, r5.wwww, cb0[32].xywx
    mad r12.xyz, cb0[31].xywx, r5.xxxx, r12.xyzx
    mad r12.xyz, cb0[33].xywx, r5.zzzz, r12.xyzx
    add r12.xyz, r12.xyzx, cb0[34].xywx
    div r11.zw, r12.xxxy, r12.zzzz
    mad r11.zw, r11.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    mad r3.x, r3.x, cb0[36].y, l(1.000000)
    mul r3.x, r2.w, r3.x
    mul r1.xyz, r1.xyzx, r3.xxxx
    div r1.xyz, r1.xyzx, r1.wwww
    add r1.xyz, r1.xyzx, r5.xwzx
    mul r12.xyz, r1.yyyy, cb0[32].xywx
    mad r12.xyz, cb0[31].xywx, r1.xxxx, r12.xyzx
    mad r12.xyz, cb0[33].xywx, r1.zzzz, r12.xyzx
    add r12.xyz, r12.xyzx, cb0[34].xywx
    div r12.xy, r12.xyxx, r12.zzzz
    mad r12.xy, r12.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r1.w, -r3.y, cb0[35].w
    mul_sat r1.w, r1.w, l(0.0285714287)
    mul r1.w, r1.w, cb0[36].x
    div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
    ge r2.y, r2.w, r2.y
    and r2.y, r2.y, l(0x3f800000)
    add r11.zw, r11.zzzw, -r12.xxxy
    add r5.xyz, -r1.xyzx, r5.xwzx
    mov r13.xyzw, l(0,0,0,0)
    mov r14.xyz, r7.xyzx
    mov r15.xyz, r8.xyzx
    mov r16.xyz, r9.xyzx
    mov r18.xz, r3.zzwz
    mov r2.w, r2.x
    mov r18.y, r2.z
    mov r17.xyzw, l(0,0,0,0)
    loop
      ge r3.y, l(1.000000), r2.w
      breakc_nz r3.y
      mad r12.zw, r11.xxxy, cb0[13].wwww, -r18.xxxz
      mul r12.zw, r12.zzzw, cb0[18].xxxx
      dp2 r3.y, r12.zwzz, r12.zwzz
      sample_l r19.xyzw, r18.xzxx, t1.xyzw, s0, l(0.000000)
      mad r3.y, r3.y, cb0[18].w, |r18.y|
      add r3.y, -r3.y, r19.w
      lt r4.w, l(0.000000), r3.y
      if_nz r4.w
        add r4.w, -r3.y, l(1.000000)
        mul r20.xyz, r4.wwww, cb0[11].xyzx
        mul r20.w, r3.y, l(0.400000)
        mul r3.y, r3.x, r2.w
        mad r12.zw, r3.yyyy, r11.zzzw, r12.xxxy
        sample_l r21.xyzw, r12.zwzz, t2.xyzw, s2, l(0.000000)
        dp4 r4.w, r21.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        mad r21.xyz, r3.yyyy, r5.xyzx, r1.xyzx
        add r21.xyz, r21.xyzx, -cb0[35].xyzx
        dp3 r3.y, r21.xyzx, r21.xyzx
        sqrt r3.y, r3.y
        add_sat r3.y, -r3.y, r4.w
        mul r4.w, r1.w, r17.w
        add r3.y, r3.y, l(-1.000000)
        mad r4.w, r4.w, r3.y, l(1.000000)
        mad r3.y, cb0[36].z, r3.y, l(1.000000)
        mul r20.xyzw, r3.yyyy, r20.xyzw
        dp3 r3.y, r14.xyzx, r14.xyzx
        div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
        dp3 r5.w, r15.xyzx, r15.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        dp3 r6.w, r16.xyzx, r16.xyzx
        div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
        mul r21.xyz, r5.wwww, cb0[22].xyzx
        mad r21.xyz, cb0[24].xyzx, r6.wwww, r21.xyzx
        mad r21.xyz, cb0[20].xyzx, r3.yyyy, r21.xyzx
        mul r21.xyz, r20.wwww, r21.xyzx
        mad r19.xyz, r19.xyzx, r4.wwww, r21.xyzx
        mul r19.xyz, r20.wwww, r19.xyzx
        mul r20.xyz, r19.xyzx, r20.xyzx
        add r3.y, -r17.w, l(1.000000)
        mad r19.xyzw, r20.xyzw, r3.yyyy, r17.xyzw
        lt r3.y, l(0.990000), r19.w
        if_nz r3.y
          mov r13.xyzw, r20.xyzw
          mov r17.xyzw, r19.xyzw
          break
        endif
        mov r13.xyzw, r20.xyzw
        mov r17.xyzw, r19.xyzw
      endif
      add r14.xyz, r6.xyzx, r14.xyzx
      add r15.xyz, r6.xyzx, r15.xyzx
      add r16.xyz, r6.xyzx, r16.xyzx
      add r2.w, r2.w, l(-1.000000)
      add r18.xyz, r10.xyzx, r18.xyzx
    endloop
    lt r1.x, r17.w, l(0.990000)
    and r1.x, r1.x, l(0x3f800000)
    add r1.y, -r17.w, l(1.000000)
    mul r1.z, r2.w, r2.y
    mul r1.x, r1.y, r1.x
    mul r1.x, r1.z, r1.x
    mad r1.xyzw, r13.xyzw, r1.xxxx, r17.xyzw
    dp3 r2.x, r4.xyzx, cb0[26].xyzx
    mul r2.x, r2.x, cb0[29].w
    max r2.x, r2.x, l(0.000000)
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.x, r2.x
    mul r2.x, r1.w, r2.x
    add r2.yzw, -r1.xxyz, cb0[27].xxyz
    mad r1.xyz, r2.xxxx, r2.yzwy, r1.xyzx
    mul o0.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used