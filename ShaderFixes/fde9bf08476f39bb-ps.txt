// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed fde9bf08476f39bb-ps.txt
// 3DMigoto: fde9bf08476f39bb |    Unity headers extracted from Hidden_HxVolumetricDirectionalLight
//    Shader "Hidden/HxVolumetricDirectionalLight" {
//      SubShader 1/1 {
//        Pass 2/3 {
//          Tags { "IGNOREPROJECTOR"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Hidden_HxVolumetricDirectionalLight:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 239 0 21
//   undeciphered1a: 13
//   Keywords { "SHADOWS_OFF" "NOISE_ON" "HEIGHTFOG_ON" }
//   undeciphered2: 1 3 3 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 6032
//   Float 208 [hxNoiseContrast]
//   Vector 224 [Phase]
//   Vector 240 [Phase2]
//   Vector 256 [NoiseOffset] 3
//   Vector 272 [NoiseScale] 3
//   Vector 288 [Density]
//   Vector 304 [FogHeights] 3
//   Vector 960 [hxVolumeSettingsOld0] 2
//   Vector 968 [hxVolumeSettingsOld1] 2
//   Vector 976 [hxVolumeSettingsOld2] 2
//   Vector 984 [hxVolumeSettingsOld3] 2
//   Vector 992 [hxVolumeSettingsOld4] 2
//   Vector 1000 [hxVolumeSettingsOld5] 2
//   Vector 1008 [hxVolumeSettingsOld6] 2
//   Vector 1016 [hxVolumeSettingsOld7] 2
//   Vector 1024 [hxVolumeSettingsOld8] 2
//   Vector 1032 [hxVolumeSettingsOld9] 2
//   Float 5184 [hxRayOffset]
//   Float 5188 [HxTileSize]
//   Float 5680 [FirstLight]
//   Vector 5776 [ShadowBias] 3
//   Vector 5872 [_SpotLightParams]
//   Vector 5888 [CameraFoward] 3
//   Float 5900 [VolumeScale]
//   Float 5904 [ExtinctionEffect]
//   Vector 5908 [LightColour] 3
//   Vector 5920 [LightColour2] 3
//   Float 5952 [TintPercent]
//   Vector 5956 [MaxRayDistance] 2
//   Float 5964 [AmbientStrength]
//   Vector 5968 [AmbientSkyColor] 3
//   Vector 5984 [AmbientEquatorColor] 3
//   Vector 6000 [AmbientGroundColor] 3
//   Vector 6016 [SunSize] 2
//   Matrix 320 [hxVolumeMatrixOld0]
//   Matrix 384 [hxVolumeMatrixOld1]
//   Matrix 448 [hxVolumeMatrixOld2]
//   Matrix 512 [hxVolumeMatrixOld3]
//   Matrix 576 [hxVolumeMatrixOld4]
//   Matrix 640 [hxVolumeMatrixOld5]
//   Matrix 704 [hxVolumeMatrixOld6]
//   Matrix 768 [hxVolumeMatrixOld7]
//   Matrix 832 [hxVolumeMatrixOld8]
//   Matrix 896 [hxVolumeMatrixOld9]
//   Matrix 5200 [InverseProjectionMatrix]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerCameraRare" 352
//   Matrix 288 [unity_CameraToWorld]
//   SetTexture 0 [VolumetricDepth] 2D 1
//   SetTexture 1 [Tile5x5] 2D 2
//   SetTexture 2 [NoiseTexture3D] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerCameraRare" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:34:52 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[377], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_temps 15
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r13.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed fde9bf08476f39bb-ps.txt

mul r13.w, -r13.x, r13.y
mad r14.xyz, -r13.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s1, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
mad r1.xy, r1.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, r1.yyyy, cb0[326].xyzw
mad r1.xyzw, cb0[325].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[327].xyzw
add r1.xyzw, r1.xyzw, cb0[328].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb2[19].xyzx
mad r1.xyw, cb2[18].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb2[20].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb2[21].xyzx
add r2.xyz, -r1.xyzx, r14.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, cb0[368].xyzx, -r2.xyzx
dp2 r1.w, r2.xzxx, r2.xzxx
rsq r1.w, r1.w
mul r3.xy, r1.wwww, r2.xzxx
dp2 r1.w, r3.xyxx, r2.xzxx
add r1.w, r1.w, l(-0.700000)
mul r1.w, r1.w, l(3.333300)
max r2.w, -r2.y, l(0.000000)
max r3.x, r2.y, l(0.000000)
mul r3.xyz, r3.xxxx, cb0[375].xyzx
mad r3.xyz, r2.wwww, cb0[373].xyzx, r3.xyzx
mul r2.w, r1.w, r1.w
mul r2.w, r2.w, r2.w
mul r1.w, r1.w, r2.w
max r1.w, r1.w, l(0.000000)
mad r3.xyz, r1.wwww, cb0[374].xyzx, r3.xyzx
mul r3.xyz, r3.xyzx, cb0[372].wwww
div r0.w, cb1[5].y, r0.w
mad r2.xyz, -r2.xyzx, r0.wwww, r14.xyzx
mad r1.xyz, cb0[367].xyzx, cb0[361].xxxx, r1.xyzx
add r1.xyz, -r1.xyzx, r2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
div r1.xyz, r1.xyzx, r0.wwww
min r0.w, r0.w, cb0[372].z
min r1.w, r0.w, cb0[372].y
add r0.w, r0.w, -r1.w
min r2.w, cb0[18].y, l(128.000000)
ftoi r3.w, r2.w
round_z r2.w, r2.w
div r4.x, r1.w, r2.w
mul r4.yz, cb0[368].wwww, cb1[6].xxyx
mul r0.xy, r0.xyxx, r4.yzyy
div r0.xy, r0.xyxx, cb0[324].yyyy
ge r4.yz, r0.xxyx, -r0.xxyx
frc r0.xy, |r0.xyxx|
movc r0.xy, r4.yzyy, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[324].yyyy
div r0.xy, r0.xyxx, cb0[324].yyyy
sample_l r5.xyzw, r0.xyxx, t1.xyzw, s2, l(0.000000)
add r0.x, r5.x, cb0[324].x
frc r0.x, r0.x
mul r0.y, r0.x, r4.x
mad r2.xyz, -r0.yyyy, r1.xyzx, r2.xyzx
dp3 r0.y, cb0[367].xyzx, r1.xyzx
lt r0.z, l(0.990000), r0.z
and r0.z, r0.z, l(0x3f800000)
mad r4.y, -cb0[15].w, r0.y, cb0[15].z
log r4.y, r4.y
mul r4.y, r4.y, l(1.500000)
exp r4.y, r4.y
max r4.y, r4.y, l(0.000100)
div r4.y, cb0[15].y, r4.y
mul r4.y, r4.y, cb0[15].x
mul r4.y, r4.y, cb0[376].x
max r0.z, r0.z, cb0[376].y
mul r0.z, r0.z, r4.y
min r0.z, r0.z, l(100.000000)
mad r4.y, -cb0[14].w, r0.y, cb0[14].z
log r4.y, r4.y
mul r4.y, r4.y, l(1.500000)
exp r4.y, r4.y
div r4.y, cb0[14].y, r4.y
mul r4.y, r4.y, cb0[14].x
max r0.z, r0.z, r4.y
add r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, cb0[372].x
mul_sat r0.y, r0.y, l(0.500000)
add r4.yzw, cb0[369].yyzw, -cb0[370].xxyz
mad r4.yzw, r0.yyyy, r4.yyzw, cb0[370].xxyz
add r0.y, -cb0[19].y, cb0[19].x
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r5.x, -cb0[19].z, l(1.000000)
max r5.y, cb0[13].x, l(0.000000)
mov r6.z, l(0)
mov r7.xyz, r2.xyzx
mov r5.zw, l(0,0,0,0)
mov r6.w, l(0)
mov r7.w, l(0)
loop
  ige r8.x, r7.w, r3.w
  breakc_nz r8.x
  add r8.x, r7.y, -cb0[19].y
  mul_sat r8.x, r0.y, r8.x
  mad r8.y, r8.x, l(-2.000000), l(3.000000)
  mul r8.x, r8.x, r8.x
  mul r8.x, r8.x, r8.y
  mad r8.x, r8.x, r5.x, cb0[19].z
  add r8.yzw, r7.xxyz, cb0[16].xxyz
  mul r8.yzw, r8.yyzw, cb0[17].xxyz
  sample_l r9.xyzw, r8.yzwy, t2.xyzw, s0, l(1.000000)
  add r8.y, r9.w, l(-0.500000)
  mad r8.y, r8.y, r5.y, l(0.500000)
  mul r8.x, r8.x, r8.y
  dp2 r8.x, r8.xxxx, cb0[18].xxxx
  mov r9.x, r8.x
  mov r9.yz, l(0,0,0,0)
  mov r8.y, l(0)
  loop
    ige r8.z, r9.z, l(10)
    mov r8.y, l(0)
    breakc_nz r8.z
    eq r8.z, l(-1.000000), cb0[r9.z + 60].y
    if_nz r8.z
      mov r9.xy, r9.xxxx
      mov r8.y, l(-1)
      break
    endif
    ishl r8.w, r9.z, l(2)
    mul r10.xyz, r7.yyyy, cb0[r8.w + 21].xyzx
    mad r10.xyz, cb0[r8.w + 20].xyzx, r7.xxxx, r10.xyzx
    mad r10.xyz, cb0[r8.w + 22].xyzx, r7.zzzz, r10.xyzx
    add r10.xyz, r10.xyzx, cb0[r8.w + 23].xyzx
    lt r11.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r10.xyzx
    lt r12.xyz, r10.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r8.w, r11.x, r12.x
    and r8.w, r11.y, r8.w
    and r8.w, r12.y, r8.w
    and r8.w, r11.z, r8.w
    and r8.w, r12.z, r8.w
    if_nz r8.w
      ge r8.w, l(3.000000), cb0[r9.z + 60].y
      if_nz r8.w
        max r8.w, r9.x, cb0[r9.z + 60].x
        add r9.w, r9.x, cb0[r9.z + 60].x
        min r10.w, r9.x, cb0[r9.z + 60].x
        eq r11.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r9.z + 60].yyyy
        add r12.x, r9.x, -cb0[r9.z + 60].x
        movc r11.w, r11.w, r12.x, r9.x
        movc r10.w, r11.z, r10.w, r11.w
        movc r9.w, r11.y, r9.w, r10.w
        movc r6.x, r11.x, r8.w, r9.w
      else
        ge r8.w, l(7.000000), cb0[r9.z + 60].y
        dp3 r9.w, r10.xyzx, r10.xyzx
        sqrt r9.w, r9.w
        lt r9.w, r9.w, l(0.500000)
        and r8.w, r8.w, r9.w
        if_nz r8.w
          max r8.w, r9.x, cb0[r9.z + 60].x
          add r9.w, r9.x, cb0[r9.z + 60].x
          min r10.y, r9.x, cb0[r9.z + 60].x
          eq r11.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r9.z + 60].yyyy
          add r10.w, r9.x, -cb0[r9.z + 60].x
          movc r10.w, r11.w, r10.w, r9.x
          movc r10.y, r11.z, r10.y, r10.w
          movc r9.w, r11.y, r9.w, r10.y
          movc r6.x, r11.x, r8.w, r9.w
        else
          ge r8.w, l(11.000000), cb0[r9.z + 60].y
          dp2 r9.w, r10.xzxx, r10.xzxx
          sqrt r9.w, r9.w
          lt r9.w, r9.w, l(0.500000)
          and r8.w, r8.w, r9.w
          max r9.w, r9.x, cb0[r9.z + 60].x
          add r10.x, r9.x, cb0[r9.z + 60].x
          min r10.y, r9.x, cb0[r9.z + 60].x
          eq r11.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r9.z + 60].yyyy
          add r10.z, r9.x, -cb0[r9.z + 60].x
          movc r10.z, r11.w, r10.z, r9.x
          movc r10.y, r11.z, r10.y, r10.z
          movc r10.x, r11.y, r10.x, r10.y
          movc r9.w, r11.x, r9.w, r10.x
          movc r6.x, r8.w, r9.w, r9.x
        endif
      endif
    else
      mov r6.x, r9.x
    endif
    iadd r6.y, r9.z, l(1)
    mov r9.xyz, r6.xzyx
    mov r8.y, r8.z
  endloop
  movc r6.x, r8.y, r9.y, r9.x
  mul r6.y, r6.x, cb0[18].w
  mad r6.w, r6.y, r4.x, r6.w
  mul r6.y, r6.w, l(-1.442695)
  exp r6.y, r6.y
  mul r6.x, r4.x, r6.x
  mul r6.x, r6.y, r6.x
  mul r6.y, r0.z, r6.x
  max r6.y, r6.y, l(0.000000)
  add r5.z, r5.z, r6.y
  mad r5.w, r6.x, l(0.079580), r5.w
  mad r7.xyz, -r1.xyzx, r4.xxxx, r7.xyzx
  iadd r7.w, r7.w, l(1)
endloop
lt r2.x, l(0.000000), r0.w
if_nz r2.x
  add r1.w, r1.w, r4.x
  mad r2.xyz, -r1.xyzx, r1.wwww, r14.xyzx
  div r0.w, r0.w, r2.w
  mul r0.x, r0.x, r0.w
  mad r2.xyz, -r0.xxxx, r1.xyzx, r2.xyzx
  mov r6.z, l(0)
  mov r7.xyz, r2.xyzx
  mov r0.x, r5.z
  mov r1.w, r5.w
  mov r2.w, r6.w
  mov r4.x, l(0)
  loop
    ige r7.w, r4.x, r3.w
    breakc_nz r7.w
    add r7.w, r7.y, -cb0[19].y
    mul_sat r7.w, r0.y, r7.w
    mad r8.x, r7.w, l(-2.000000), l(3.000000)
    mul r7.w, r7.w, r7.w
    mul r7.w, r7.w, r8.x
    mad r7.w, r7.w, r5.x, cb0[19].z
    add r8.xyz, r7.xyzx, cb0[16].xyzx
    mul r8.xyz, r8.xyzx, cb0[17].xyzx
    sample_l r8.xyzw, r8.xyzx, t2.xyzw, s0, l(1.000000)
    add r8.x, r8.w, l(-0.500000)
    mad r8.x, r8.x, r5.y, l(0.500000)
    mul r7.w, r7.w, r8.x
    dp2 r7.w, r7.wwww, cb0[18].xxxx
    mov r8.x, r7.w
    mov r8.yzw, l(0,0,0,0)
    loop
      ige r9.x, r8.z, l(10)
      mov r8.w, l(0)
      breakc_nz r9.x
      eq r9.x, l(-1.000000), cb0[r8.z + 60].y
      if_nz r9.x
        mov r8.xy, r8.xxxx
        mov r8.w, l(-1)
        break
      endif
      ishl r9.y, r8.z, l(2)
      mul r10.xyz, r7.yyyy, cb0[r9.y + 21].xyzx
      mad r10.xyz, cb0[r9.y + 20].xyzx, r7.xxxx, r10.xyzx
      mad r10.xyz, cb0[r9.y + 22].xyzx, r7.zzzz, r10.xyzx
      add r9.yzw, r10.xxyz, cb0[r9.y + 23].xxyz
      lt r10.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r9.yzwy
      lt r11.xyz, r9.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
      and r10.x, r10.x, r11.x
      and r10.x, r10.y, r10.x
      and r10.x, r11.y, r10.x
      and r10.x, r10.z, r10.x
      and r10.x, r11.z, r10.x
      if_nz r10.x
        ge r10.x, l(3.000000), cb0[r8.z + 60].y
        if_nz r10.x
          max r10.x, r8.x, cb0[r8.z + 60].x
          add r10.y, r8.x, cb0[r8.z + 60].x
          min r10.z, r8.x, cb0[r8.z + 60].x
          eq r11.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r8.z + 60].yyyy
          add r10.w, r8.x, -cb0[r8.z + 60].x
          movc r10.w, r11.w, r10.w, r8.x
          movc r10.z, r11.z, r10.z, r10.w
          movc r10.y, r11.y, r10.y, r10.z
          movc r6.x, r11.x, r10.x, r10.y
        else
          ge r10.x, l(7.000000), cb0[r8.z + 60].y
          dp3 r9.z, r9.yzwy, r9.yzwy
          sqrt r9.z, r9.z
          lt r9.z, r9.z, l(0.500000)
          and r9.z, r9.z, r10.x
          if_nz r9.z
            max r9.z, r8.x, cb0[r8.z + 60].x
            add r10.x, r8.x, cb0[r8.z + 60].x
            min r10.y, r8.x, cb0[r8.z + 60].x
            eq r11.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r8.z + 60].yyyy
            add r10.z, r8.x, -cb0[r8.z + 60].x
            movc r10.z, r11.w, r10.z, r8.x
            movc r10.y, r11.z, r10.y, r10.z
            movc r10.x, r11.y, r10.x, r10.y
            movc r6.x, r11.x, r9.z, r10.x
          else
            ge r9.z, l(11.000000), cb0[r8.z + 60].y
            dp2 r9.y, r9.ywyy, r9.ywyy
            sqrt r9.y, r9.y
            lt r9.y, r9.y, l(0.500000)
            and r9.y, r9.y, r9.z
            max r9.z, r8.x, cb0[r8.z + 60].x
            add r9.w, r8.x, cb0[r8.z + 60].x
            min r10.x, r8.x, cb0[r8.z + 60].x
            eq r11.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r8.z + 60].yyyy
            add r10.y, r8.x, -cb0[r8.z + 60].x
            movc r10.y, r11.w, r10.y, r8.x
            movc r10.x, r11.z, r10.x, r10.y
            movc r9.w, r11.y, r9.w, r10.x
            movc r9.z, r11.x, r9.z, r9.w
            movc r6.x, r9.y, r9.z, r8.x
          endif
        endif
      else
        mov r6.x, r8.x
      endif
      iadd r6.y, r8.z, l(1)
      mov r8.xyz, r6.xzyx
      mov r8.w, r9.x
    endloop
    movc r6.x, r8.w, r8.y, r8.x
    mul r6.y, r6.x, cb0[18].w
    mad r2.w, r6.y, r0.w, r2.w
    mul r6.y, r2.w, l(-1.442695)
    exp r6.y, r6.y
    mul r6.x, r0.w, r6.x
    mul r6.x, r6.y, r6.x
    mul r6.y, r0.z, r6.x
    max r6.y, r6.y, l(0.000000)
    add r0.x, r0.x, r6.y
    mad r7.xyz, -r1.xyzx, r0.wwww, r7.xyzx
    mad r1.w, r6.x, l(0.079580), r1.w
    iadd r4.x, r4.x, l(1)
  endloop
  mov r5.z, r0.x
  mov r5.w, r1.w
  mov r6.w, r2.w
endif
mul r0.x, r6.w, l(-1.442695)
exp r0.x, r0.x
min r0.x, r0.x, l(1.000000)
mul r0.yzw, r3.xxyz, r5.wwww
mul r0.yzw, r0.yyzw, cb0[355].xxxx
mad o0.xyz, r4.yzwy, r5.zzzz, r0.yzwy
add r0.y, -cb0[369].x, l(1.000000)
add r0.z, -r0.x, l(1.000000)
mad r0.x, r0.y, r0.z, r0.x
add r0.x, -r0.x, l(1.000000)
mul o0.w, r0.x, cb0[355].x
ret
// Approximately 0 instruction slots used