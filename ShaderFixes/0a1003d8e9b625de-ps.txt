// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 0a1003d8e9b625de-ps.txt
// 3DMigoto: 0a1003d8e9b625de |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 147 3 10
//   undeciphered1a: 13
//   Keywords { "FOG_DISTANCE_ON" "FOG_USE_XY_PLANE" "FOG_BLUR_ON" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 432
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 352 [_VolumetricFogSunWorldPos]
//   Vector 368 [_VolumetricFogSunShadowsData]
//   Float 384 [_Jitter]
//   Matrix 288 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:28:14 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 15
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r13.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 0a1003d8e9b625de-ps.txt

mul r13.w, -r13.x, r13.y
mad r14.xyz, -r13.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.z, r0.y, r14.z
mov r1.xy, r14.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.z, l(0.000010)
mul r0.yw, v1.xxxy, cb1[6].xxxy
dp2 r0.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.ywyy
frc r0.y, r0.y
add r0.y, r0.y, l(-0.500000)
lt r0.w, cb0[13].y, r1.z
lt r1.w, cb0[13].y, r0.x
and r0.w, r0.w, r1.w
lt r1.w, r1.z, r0.z
lt r3.x, r0.x, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.z, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xywx
  dp3 r0.w, r2.xyzx, r2.xyzx
  sqrt r0.w, r0.w
  dp2 r1.w, r2.xyxx, r2.xyxx
  sqrt r1.w, r1.w
  div r3.xy, r2.xyxx, r1.wwww
  div r1.w, r1.w, r2.z
  max r2.w, r0.z, r1.z
  min r4.z, r2.w, cb0[13].y
  add r2.w, r1.z, -r4.z
  mul r2.w, r1.w, r2.w
  mad r4.xy, -r3.xyxx, r2.wwww, r14.xyxx
  min r2.w, r0.w, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xyzx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.y, r1.x, r2.w
  if_nz r1.y
    lt r1.y, l(0.000000), r1.w
    lt r3.z, l(-0.500000), r0.x
    and r1.y, r1.y, r3.z
    lt r3.z, r1.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r3.z
    and r0.x, r0.z, r0.x
    movc r5.z, r1.y, cb0[13].y, r0.x
    add r0.x, -r1.z, r5.z
    mul r0.x, r0.x, r1.w
    mad r5.xy, -r3.xyxx, r0.xxxx, r14.xyxx
    add r1.yzw, r4.xxyz, -r5.xxyz
    dp3 r0.x, r1.yzwy, r1.yzwy
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r2.w
    min r0.x, r0.z, r0.x
    lt r1.y, l(0.000000), r0.x
    if_nz r1.y
      log r1.y, r0.x
      mul r1.y, r1.y, l(0.693147182)
      max r1.y, r1.y, l(0.000000)
      mad r1.y, r1.y, cb0[15].x, l(0.100000)
      mul r1.y, r1.y, cb0[13].z
      mul_sat r1.z, r2.w, cb0[15].y
      mul r1.y, r1.z, r1.y
      max r1.y, r1.y, l(0.010000)
      mul r3.xyz, r1.yyyy, r2.xyzx
      div r3.xyz, r3.xyzx, r0.wwww
      div r1.y, r0.x, r1.y
      mul r5.xy, r3.xyxx, cb0[13].wwww
      mul r1.z, cb0[13].z, cb0[13].y
      div r5.z, r3.z, r1.z
      add r3.xy, r4.xyxx, cb0[14].xzxx
      mul r3.xy, r3.xyxx, cb0[13].wwww
      div r1.z, r4.z, r1.z
      add r3.zw, cb0[14].xxxy, r14.xxxy
      frc r1.w, r0.y
      mad r1.y, r1.w, cb0[24].x, r1.y
      add r4.w, r4.z, cb0[13].x
      mul r6.xyz, r4.yyyy, cb0[19].xywx
      mad r6.xyz, cb0[18].xywx, r4.xxxx, r6.xyzx
      mad r6.xyz, cb0[20].xywx, r4.wwww, r6.xyzx
      add r6.xyz, r6.xyzx, cb0[21].xywx
      div r6.xy, r6.xyxx, r6.zzzz
      mad r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mad r1.w, r0.y, cb0[23].y, l(1.000000)
      mul r1.w, r0.x, r1.w
      mul r2.xyz, r2.xyzx, r1.wwww
      div r2.xyz, r2.xyzx, r0.wwww
      add r2.xyz, r2.xyzx, r4.xywx
      mul r7.xyz, r2.yyyy, cb0[19].xywx
      mad r7.xyz, cb0[18].xywx, r2.xxxx, r7.xyzx
      mad r7.xyz, cb0[20].xywx, r2.zzzz, r7.xyzx
      add r7.xyz, r7.xyzx, cb0[21].xywx
      div r6.zw, r7.xxxy, r7.zzzz
      mad r6.zw, r6.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r0.w, -r1.x, cb0[22].w
      mul_sat r0.w, r0.w, l(0.0285714287)
      mul r0.w, r0.w, cb0[23].x
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
      ge r0.x, r0.x, r0.z
      add r6.xy, -r6.zwzz, r6.xyxx
      add r4.xyz, -r2.xyzx, r4.xywx
      mov r7.xyzw, l(0,0,0,0)
      mov r9.xy, r3.xyxx
      mov r0.z, r1.y
      mov r9.z, r1.z
      mov r8.xyzw, l(0,0,0,0)
      loop
        ge r2.w, l(1.000000), r0.z
        breakc_nz r2.w
        sample_l r10.xyzw, r9.xyxx, t1.xyzw, s1, l(0.000000)
        add r2.w, -|r9.z|, r10.w
        mad r11.xy, r3.zwzz, cb0[13].wwww, -r9.xyxx
        dp2 r4.w, r11.xyxx, r11.xyxx
        add r4.w, -r4.w, cb0[12].x
        max r4.w, r4.w, l(0.000000)
        mad r2.w, -r4.w, cb0[12].y, r2.w
        lt r4.w, l(0.000000), r2.w
        if_nz r4.w
          add r4.w, -r2.w, l(1.000000)
          mul r11.xyz, r4.wwww, cb0[11].xyzx
          mul r11.w, r2.w, l(0.400000)
          mul r2.w, r1.w, r0.z
          mad r12.xy, r2.wwww, r6.xyxx, r6.zwzz
          sample_l r12.xyzw, r12.xyxx, t2.xyzw, s4, l(0.000000)
          dp4 r4.w, r12.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mad r12.xyz, r2.wwww, r4.xyzx, r2.xyzx
          add r12.xyz, r12.xyzx, -cb0[22].xyzx
          dp3 r2.w, r12.xyzx, r12.xyzx
          sqrt r2.w, r2.w
          add_sat r2.w, -r2.w, r4.w
          mul r4.w, r0.w, r8.w
          add r2.w, r2.w, l(-1.000000)
          mad r4.w, r4.w, r2.w, l(1.000000)
          mul r10.xyz, r4.wwww, r10.xyzx
          mad r2.w, cb0[23].z, r2.w, l(1.000000)
          mul r11.xyzw, r2.wwww, r11.xyzw
          mul r10.xyz, r10.xyzx, r11.wwww
          mul r11.xyz, r10.xyzx, r11.xyzx
          add r2.w, -r8.w, l(1.000000)
          mad r10.xyzw, r11.xyzw, r2.wwww, r8.xyzw
          lt r2.w, l(0.990000), r10.w
          if_nz r2.w
            mov r7.xyzw, r11.xyzw
            mov r8.xyzw, r10.xyzw
            break
          endif
          mov r7.xyzw, r11.xyzw
          mov r8.xyzw, r10.xyzw
        endif
        add r0.z, r0.z, l(-1.000000)
        add r9.xyz, r5.xyzx, r9.xyzx
      endloop
      lt r0.w, r8.w, l(0.990000)
      and r0.xw, r0.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
      add r1.y, -r8.w, l(1.000000)
      mul r0.x, r0.z, r0.x
      mul r0.z, r0.w, r1.y
      mul r0.x, r0.x, r0.z
      mad r2.xyzw, r7.xyzw, r0.xxxx, r8.xyzw
      mul r2.xyzw, r2.xyzw, cb0[10].wwww
      add r0.x, -r1.x, cb0[12].z
      div_sat r0.x, r0.x, cb0[12].w
      mul r0.x, r0.x, r0.x
      mul r1.xyzw, r0.xxxx, r2.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.y, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
sample r4.xyzw, v1.zwzz, t4.xyzw, s3
add r0.yzw, -r3.xxyz, r4.xxyz
mad r0.yzw, r2.wwww, r0.yyzw, r3.xxyz
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r0.yzwy, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used