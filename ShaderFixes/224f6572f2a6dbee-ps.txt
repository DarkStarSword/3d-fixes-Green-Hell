// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 224f6572f2a6dbee-ps.txt
// 3DMigoto: 224f6572f2a6dbee |    Unity headers extracted from Amplify_mia_disappear_hair
//    Shader "Amplify/mia_disappear_hair" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="Transparent" }
//        Pass 2/5 {
//          Name "FORWARD"
//          Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "LIGHTMODE"="FORWARDADD" "QUEUE"="Geometry+0" "RenderType"="Transparent" "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_mia_disappear_hair:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 224 7 4
//   undeciphered1a: 14
//   Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "_USE_ALBO_HAIR_ANISTROPY_ON" "_USE_ANISTROPY_HAIR_OPACITY_MASK_ON" "_USE_SPECULAR_HAIR_ANISTROPY_ON" }
//   undeciphered2: 1 8 8 8 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 288
//   Vector 96 [_ShadowMapTexture_TexelSize]
//   Vector 176 [_LightColor0]
//   Vector 208 [_Normal_ST]
//   Vector 240 [_Albedo_ST]
//   Float 260 [_Cutoff]
//   Matrix 112 [unity_WorldToLight]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   Matrix 128 [unity_WorldToShadow0]
//   Matrix 192 [unity_WorldToShadow1]
//   Matrix 256 [unity_WorldToShadow2]
//   Matrix 320 [unity_WorldToShadow3]
//   ConstBuffer "UnityPerDraw" 176
//   Matrix 0 [unity_ObjectToWorld]
//   Matrix 64 [unity_WorldToObject]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "Amplifymia_disappear_hair" 128
//   Vector 16 [_AlbedoTint]
//   Vector 32 [_AdditionalTint]
//   Vector 64 [_SpecularTint]
//   Float 80 [_main_normal_scale]
//   Float 84 [_detail_normal_scale]
//   Float 88 [_detail_tiling]
//   Float 92 [_anistropyX]
//   Float 96 [_anistropyy]
//   Float 100 [_specularintensity]
//   Float 104 [_smooothnes]
//   Float 108 [_disappear_mask_multiply]
//   Float 112 [_disolve_texture_tile]
//   Float 116 [_disappear_mask_size]
//   SetTexture 0 [_Normal] 2D 4
//   SetTexture 1 [_Normal_detail] 2D 5
//   SetTexture 2 [_Albedo] 2D 6
//   SetTexture 3 [_dissolveguide] 2D 7
//   SetTexture 4 [_LightTexture0] 2D 2
//   SetTexture 5 [_LightTextureB0] 2D 3
//   SetTexture 6 [unity_ProbeVolumeSH] 3D 0
//   SetTexture 7 [_ShadowMapTexture] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerDraw" 4
//   BindCB "UnityPerFrame" 5
//   BindCB "UnityProbeVolume" 6
//   BindCB "Amplifymia_disappear_hair" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:39:33 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyz         3     NONE   float   xyz
// TEXCOORD                 3   xyz         4     NONE   float   xyz
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// COLOR                    0   xyzw        6     NONE   float   x
// TEXCOORD                 5   xyzw        7     NONE   float   xy w
// TEXCOORD                 6   xyzw        8     NONE   float
// TEXCOORD                 7   xyzw        9     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 9.000000, 0, 0, 0},
                              { 3.000000, 0, 0, 0},
                              { 11.000000, 0, 0, 0},
                              { 13.000000, 0, 0, 0},
                              { 5.000000, 0, 0, 0},
                              { 15.000000, 0, 0, 0},
                              { 7.000000, 0, 0, 0},
                              { 4.000000, 0, 0, 0},
                              { 12.000000, 0, 0, 0},
                              { 2.000000, 0, 0, 0},
                              { 10.000000, 0, 0, 0},
                              { 16.000000, 0, 0, 0},
                              { 8.000000, 0, 0, 0},
                              { 14.000000, 0, 0, 0},
                              { 6.000000, 0, 0, 0} }
dcl_constantbuffer cb0[17], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb5[12], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_constantbuffer cb7[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture3d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.x
dcl_input_ps linear v7.xyw
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 224f6572f2a6dbee-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

add r0.xyz, -v5.xyzx, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
mul r1.yzw, r0.xxyz, r1.xxxx
add r2.xyz, -v5.xyzx, r15.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r2.xyzx
mad r4.xy, v1.xyxx, cb0[13].xyxx, cb0[13].zwzz
mul r4.zw, v1.xxxy, cb7[5].zzzz
sample r5.xyzw, r4.xyxx, t0.xyzw, s4
mul r5.x, r5.w, r5.x
mad r4.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r5.xy, r4.xyxx, cb7[5].xxxx
dp2 r2.w, r5.xyxx, r5.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r2.w, r2.w
sample r5.xyzw, r4.zwzz, t1.xyzw, s5
mul r5.x, r5.w, r5.x
mad r4.zw, r5.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r4.zw, r4.zzzw, cb7[5].yyyy
dp2 r3.w, r4.zwzz, r4.zwzz
min r3.w, r3.w, l(1.000000)
add r3.w, -r3.w, l(1.000000)
sqrt r3.w, r3.w
mad r4.xy, r4.xyxx, cb7[5].xxxx, r4.zwzz
mul r4.z, r2.w, r3.w
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, r4.xyzx
mad r5.xy, v1.xyxx, cb0[15].xyxx, cb0[15].zwzz
sample r5.xyzw, r5.xyxx, t2.xyzw, s6
mul r6.xyz, r5.xxxx, cb7[1].xyzx
mad r7.xyz, r5.xxxx, cb7[2].xyzx, -r6.xyzx
mad r6.xyz, r5.yyyy, r7.xyzx, r6.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r7.xyz, r0.wwww, r0.xyzx
mad r8.xyz, r0.xyzx, r0.wwww, r3.xyzx
dp3 r0.w, r8.xyzx, r8.xyzx
rsq r0.w, r0.w
mul r8.xyz, r0.wwww, r8.xyzx
dp3 r9.x, v2.xyzx, r4.xyzx
dp3 r9.y, v3.xyzx, r4.xyzx
dp3 r9.z, v4.xyzx, r4.xyzx
dp3 r0.w, r9.xyzx, r9.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r9.xyzx
mov r9.y, v4.x
mov r9.z, v2.x
mov r9.x, v3.x
mul r10.xyz, r4.zxyz, r9.xyzx
mad r9.xyz, r4.yzxy, r9.yzxy, -r10.xyzx
dp3 r0.w, r9.xyzx, r9.xyzx
rsq r0.w, r0.w
mul r9.xyz, r0.wwww, r9.xyzx
dp3 r0.w, r8.xyzx, r9.xyzx
div r2.w, r0.w, cb7[5].w
div r0.w, r0.w, cb7[6].x
dp3 r3.w, r4.xyzx, r8.xyzx
dp3 r4.w, r4.xyzx, r7.xyzx
mul r5.xyz, r5.zzzz, cb7[4].xyzx
mul r0.w, r0.w, r0.w
mad r0.w, r2.w, r2.w, r0.w
add r2.w, r3.w, l(1.000000)
div r0.w, r0.w, r2.w
mul r0.w, r0.w, l(-2.885390)
exp r0.w, r0.w
max r2.w, r4.w, l(0.000000)
mul r0.w, r0.w, r2.w
mul r5.xyz, r0.wwww, r5.xyzx
mul r5.xyz, r5.xyzx, v6.xxxx
mul r7.xyz, r5.xyzx, cb7[6].yyyy
mul r8.xyz, v5.yyyy, cb4[5].xyzx
mad r8.xyz, cb4[4].xyzx, v5.xxxx, r8.xyzx
mad r8.xyz, cb4[6].xyzx, v5.zzzz, r8.xyzx
add r8.xyz, r8.xyzx, cb4[7].xyzx
mul r0.w, r8.y, cb4[1].y
mad r0.w, cb4[0].y, r8.x, r0.w
mad r0.w, cb4[2].y, r8.z, r0.w
mul r8.xy, v1.xyxx, cb7[7].xxxx
sample r8.xyzw, r8.xyxx, t3.xyzw, s7
mad r0.w, r8.x, cb7[7].y, r0.w
ge r0.w, r0.w, cb7[6].w
movc r0.w, r0.w, l(0), l(1.000000)
div r8.xy, v7.xyxx, v7.wwww
mul r8.xy, r8.xyxx, cb1[6].xyxx
mul r8.xy, r8.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
ge r8.zw, r8.xxxy, -r8.xxxy
frc r8.xy, |r8.xyxx|
movc r8.xy, r8.zwzz, r8.xyxx, -r8.xyxx
mul r8.xy, r8.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
ftoi r8.xy, r8.xyxx
ishl r2.w, r8.y, l(2)
iadd r2.w, r8.x, r2.w
mul r2.w, l(0.062500), icb[r2.w + 0].x
mul r0.w, r0.w, r5.w
ge r2.w, r0.w, r2.w
and r3.w, r2.w, l(0x3f800000)
movc r2.w, r2.w, l(0), l(1.000000)
mad r0.w, r0.w, r2.w, r3.w
add r0.w, r0.w, -cb0[16].y
lt r0.w, r0.w, l(0.000000)
discard_nz r0.w
mul r8.xyzw, v5.yyyy, cb0[8].xyzw
mad r8.xyzw, cb0[7].xyzw, v5.xxxx, r8.xyzw
mad r8.xyzw, cb0[9].xyzw, v5.zzzz, r8.xyzw
add r8.xyzw, r8.xyzw, cb0[10].xyzw
mov r9.x, cb5[9].z
mov r9.y, cb5[10].z
mov r9.z, cb5[11].z
dp3 r0.w, r2.xyzx, r9.xyzx
add r2.xyz, v5.xyzx, -cb3[25].xyzx
dp3 r2.x, r2.xyzx, r2.xyzx
sqrt r2.x, r2.x
add r2.x, -r0.w, r2.x
mad r0.w, cb3[25].w, r2.x, r0.w
mad_sat r0.w, r0.w, cb3[24].z, cb3[24].w
eq r2.x, cb6[0].x, l(1.000000)
if_nz r2.x
  eq r2.x, cb6[0].y, l(1.000000)
  mul r2.yzw, v5.yyyy, cb6[2].xxyz
  mad r2.yzw, cb6[1].xxyz, v5.xxxx, r2.yyzw
  mad r2.yzw, cb6[3].xxyz, v5.zzzz, r2.yyzw
  add r2.yzw, r2.yyzw, cb6[4].xxyz
  movc r2.xyz, r2.xxxx, r2.yzwy, v5.xyzx
  add r2.xyz, r2.xyzx, -cb6[6].xyzx
  mul r2.yzw, r2.xxyz, cb6[5].xxyz
  mad r2.y, r2.y, l(0.250000), l(0.750000)
  mad r3.w, cb6[0].z, l(0.500000), l(0.750000)
  max r2.x, r2.y, r3.w
  sample r2.xyzw, r2.xzwx, t6.xyzw, s0
else
  mov r2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r2.x, r2.xyzw, cb2[46].xyzw
lt r2.y, r0.w, l(0.990000)
if_nz r2.y
  mul r9.xyzw, v5.yyyy, cb3[9].xyzw
  mad r9.xyzw, cb3[8].xyzw, v5.xxxx, r9.xyzw
  mad r9.xyzw, cb3[10].xyzw, v5.zzzz, r9.xyzw
  add r9.xyzw, r9.xyzw, cb3[11].xyzw
  div r2.yzw, r9.xxyz, r9.wwww
  mad r9.xy, r2.yzyy, cb0[6].zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
  round_ni r9.xy, r9.xyxx
  mad r2.yz, r2.yyzy, cb0[6].zzwz, -r9.xxyx
  add r10.xyzw, r2.yyzz, l(0.500000, 1.000000, 0.500000, 1.000000)
  mul r11.xw, r10.xxxz, r10.xxxz
  mad r9.zw, r11.xxxw, l(0.000000, 0.000000, 0.500000, 0.500000), -r2.yyyz
  add r10.xz, -r2.yyzy, l(1.000000, 0.000000, 1.000000, 0.000000)
  min r12.xy, r2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r10.xz, -r12.xxyx, r12.xxyx, r10.xxzx
  max r2.yz, r2.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r2.yz, -r2.yyzy, r2.yyzy, r10.yywy
  mov r12.x, r9.z
  mov r12.y, r10.x
  mov r12.z, r2.y
  mov r12.w, r11.x
  mul r12.xyzw, r12.xyzw, l(0.444440, 0.444440, 0.444440, 0.222220)
  mov r11.x, r9.w
  mov r11.y, r10.z
  mov r11.z, r2.z
  mul r10.xyzw, r11.xyzw, l(0.444440, 0.444440, 0.444440, 0.222220)
  add r11.xyzw, r12.ywyw, r12.xzxz
  add r13.xyzw, r10.yyww, r10.xxzz
  div r2.yz, r12.yywy, r11.zzwz
  add r2.yz, r2.yyzy, l(0.000000, -1.500000, 0.500000, 0.000000)
  div r9.zw, r10.yyyw, r13.yyyw
  add r9.zw, r9.zzzw, l(0.000000, 0.000000, -1.500000, 0.500000)
  mul r10.xy, r2.yzyy, cb0[6].xxxx
  mul r10.zw, r9.zzzw, cb0[6].yyyy
  mul r11.xyzw, r11.xyzw, r13.xyzw
  mad r12.xyzw, r9.xyxy, cb0[6].xyxy, r10.xzyz
  sample_c_lz r2.y, r12.xyxx, t7.xxxx, s1, r2.w
  sample_c_lz r2.z, r12.zwzz, t7.xxxx, s1, r2.w
  mul r2.z, r2.z, r11.y
  mad r2.y, r11.x, r2.y, r2.z
  mad r9.xyzw, r9.xyxy, cb0[6].xyxy, r10.xwyw
  sample_c_lz r2.z, r9.xyxx, t7.xxxx, s1, r2.w
  mad r2.y, r11.z, r2.z, r2.y
  sample_c_lz r2.z, r9.zwzz, t7.xxxx, s1, r2.w
  mad r2.y, r11.w, r2.z, r2.y
  add r2.z, -cb3[24].x, l(1.000000)
  mad r2.y, r2.y, r2.z, cb3[24].x
else
  mov r2.y, l(1.000000)
endif
add r2.x, -r2.y, r2.x
mad r0.w, r0.w, r2.x, r2.y
lt r2.x, l(0.000000), r8.z
and r2.x, r2.x, l(0x3f800000)
div r2.yz, r8.xxyx, r8.wwww
add r2.yz, r2.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
sample r9.xyzw, r2.yzyy, t4.xyzw, s2
mul r2.x, r2.x, r9.w
dp3 r2.y, r8.xyzx, r8.xyzx
sample r8.xyzw, r2.yyyy, t5.xyzw, s3
mul r2.x, r2.x, r8.x
mul r0.w, r0.w, r2.x
mul r2.xyz, r0.wwww, cb0[11].xyzx
max r0.w, r7.y, r7.x
max r0.w, r7.z, r0.w
add r0.w, -r0.w, l(1.000000)
mul r6.xyz, r0.wwww, r6.xyzx
add r0.w, -cb7[6].z, l(1.000000)
mad r0.xyz, r0.xyzx, r1.xxxx, r3.xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
max r1.x, r1.x, l(0.001000)
rsq r1.x, r1.x
mul r0.xyz, r0.xyzx, r1.xxxx
dp3 r1.x, r4.xyzx, r3.xyzx
dp3_sat r2.w, r4.xyzx, r1.yzwy
dp3_sat r3.x, r4.xyzx, r0.xyzx
dp3_sat r0.x, r1.yzwy, r0.xyzx
mul r0.y, r0.x, r0.x
dp2 r0.y, r0.yyyy, r0.wwww
add r0.y, r0.y, l(-0.500000)
add r0.z, -r2.w, l(1.000000)
mul r1.y, r0.z, r0.z
mul r1.y, r1.y, r1.y
mul r0.z, r0.z, r1.y
mad r0.z, r0.y, r0.z, l(1.000000)
add r1.y, -|r1.x|, l(1.000000)
mul r1.z, r1.y, r1.y
mul r1.z, r1.z, r1.z
mul r1.y, r1.y, r1.z
mad r0.y, r0.y, r1.y, l(1.000000)
mul r0.y, r0.y, r0.z
mul r0.z, r0.w, r0.w
max r0.z, r0.z, l(0.002000)
add r0.w, -r0.z, l(1.000000)
mad r1.y, |r1.x|, r0.w, r0.z
mad r0.w, r2.w, r0.w, r0.z
mul r0.w, r0.w, |r1.x|
mad r0.w, r2.w, r1.y, r0.w
add r0.w, r0.w, l(0.000010)
div r0.w, l(0.500000), r0.w
mul r0.z, r0.z, r0.z
mad r1.x, r3.x, r0.z, -r3.x
mad r1.x, r1.x, r3.x, l(1.000000)
mul r0.z, r0.z, l(0.318309873)
mad r1.x, r1.x, r1.x, l(1.000000012E-007)
div r0.z, r0.z, r1.x
mul r0.z, r0.z, r0.w
mul r0.z, r0.z, l(3.14159274)
mul r0.yz, r2.wwww, r0.yyzy
max r0.z, r0.z, l(0.000000)
dp3 r0.w, r7.xyzx, r7.xyzx
ne r0.w, r0.w, l(0.000000)
and r0.w, r0.w, l(0x3f800000)
mul r0.z, r0.w, r0.z
mul r1.xyz, r0.yyyy, r2.xyzx
mul r0.yzw, r2.xxyz, r0.zzzz
add r0.x, -r0.x, l(1.000000)
mul r1.w, r0.x, r0.x
mul r1.w, r1.w, r1.w
mul r0.x, r0.x, r1.w
mad r2.xyz, -r5.xyzx, cb7[6].yyyy, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, r2.xyzx, r0.xxxx, r7.xyzx
mul r0.xyz, r0.yzwy, r2.xyzx
mad o0.xyz, r6.xyzx, r1.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used