// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 80bf0b208a56135c-ps.txt
// 3DMigoto: 80bf0b208a56135c |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 181 5 13
//   undeciphered1a: 21
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_BOX" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT2" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 7 2 7 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 688
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 352 [_FogPointLightPosition0] 3
//   Vector 368 [_FogPointLightColor0] 3
//   Vector 384 [_FogPointLightPosition1] 3
//   Vector 400 [_FogPointLightColor1] 3
//   Vector 416 [_FogPointLightPosition2] 3
//   Vector 432 [_FogPointLightColor2] 3
//   Vector 448 [_SunPosition] 3
//   Vector 464 [_SunDir] 3
//   Vector 480 [_SunColor] 3
//   Vector 496 [_FogScatteringData]
//   Vector 512 [_FogScatteringData2]
//   Vector 608 [_VolumetricFogSunWorldPos]
//   Vector 624 [_VolumetricFogSunShadowsData]
//   Float 640 [_Jitter]
//   Matrix 544 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_FogOfWar] 2D 5
//   SetTexture 3 [_NoiseTex] 2D 1
//   SetTexture 4 [_VolumetricFogSunDepthTexture] 2D 6
//   SetTexture 5 [_MainTex] 2D 0
//   SetTexture 6 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:30:01 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[41], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 23
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r21.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 80bf0b208a56135c-ps.txt

mul r21.w, -r21.x, r21.y
mad r22.xyz, -r21.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r22.y
mov r1.xz, r22.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r1.w
or r0.y, r0.y, r0.w
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r3.xyzw, r0.xyxx, t2.wxyz, s5
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r0.xyw, -r1.xyxz, r2.xwxz
    dp3 r1.w, r0.xywx, r0.xywx
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.yzw, r1.wwww, r0.xxyw
    div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r5.xyz, -r2.xyzx, -r4.xyzx
    mul r5.xyz, r3.yzwy, r5.xyzx
    add r2.xyz, -r2.xyzx, r4.xyzx
    mul r2.xyz, r2.xyzx, r3.yzwy
    min r4.xyz, r5.xyzx, r2.xyzx
    max r4.xy, r4.yzyy, r4.xxxx
    max r2.w, r4.y, r4.x
    max r2.w, r2.w, l(0.000000)
    max r2.xyz, r5.xyzx, r2.xyzx
    min r2.xy, r2.yzyy, r2.xxxx
    min r2.x, r2.y, r2.x
    min r2.y, r1.w, cb0[12].z
    min r2.x, r2.y, r2.x
    add r2.x, -r2.w, r2.x
    lt r2.z, l(0.000000), r2.x
    if_nz r2.z
      div r3.yzw, r2.wwww, r3.yyzw
      add r4.xyz, r1.xyzx, r3.yzwy
      div r1.xy, cb0[18].xzxx, cb0[13].wwww
      log r1.z, r2.x
      mul r1.z, r1.z, l(0.693147182)
      max r1.z, r1.z, l(0.000000)
      mad r1.z, r1.z, cb0[15].x, l(0.100000)
      mul r1.z, r1.z, cb0[13].z
      mul_sat r2.z, r2.y, cb0[15].y
      mul r1.z, r1.z, r2.z
      add r2.y, -r2.w, r2.y
      max r1.z, r1.z, l(0.010000)
      mul r3.yzw, r0.xxyw, r1.zzzz
      div r3.yzw, r3.yyzw, r1.wwww
      div r1.z, r2.x, r1.z
      add r5.xyz, r4.xyzx, -cb0[22].xyzx
      add r6.xyz, r4.xyzx, -cb0[24].xyzx
      add r7.xyz, r4.xyzx, -cb0[26].xyzx
      mul r8.xz, r3.yywy, cb0[13].wwww
      mul r2.z, cb0[13].z, cb0[13].y
      div r8.y, r3.z, r2.z
      add r9.xy, r4.xzxx, cb0[14].xzxx
      mul r9.xy, r9.xyxx, cb0[13].wwww
      div r2.z, r4.y, r2.z
      add r9.zw, cb0[14].xxxz, cb0[17].xxxz
      frc r5.w, r0.z
      mad r1.z, r5.w, cb0[40].x, r1.z
      add r4.w, r4.y, cb0[13].x
      mul r10.xyz, r4.wwww, cb0[35].xywx
      mad r10.xyz, cb0[34].xywx, r4.xxxx, r10.xyzx
      mad r10.xyz, cb0[36].xywx, r4.zzzz, r10.xyzx
      add r10.xyz, r10.xyzx, cb0[37].xywx
      div r10.xy, r10.xyxx, r10.zzzz
      mad r10.xy, r10.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mad r4.y, r0.z, cb0[39].y, l(1.000000)
      mul r4.y, r2.x, r4.y
      mul r11.xyz, r0.xywx, r4.yyyy
      div r11.xyz, r11.xyzx, r1.wwww
      add r11.xyz, r4.xwzx, r11.xyzx
      mul r12.xyz, r11.yyyy, cb0[35].xywx
      mad r12.xyz, cb0[34].xywx, r11.xxxx, r12.xyzx
      mad r12.xyz, cb0[36].xywx, r11.zzzz, r12.xyzx
      add r12.xyz, r12.xyzx, cb0[37].xywx
      div r10.zw, r12.xxxy, r12.zzzz
      mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r2.w, -r2.w, cb0[38].w
      mul_sat r2.w, r2.w, l(0.0285714287)
      mul r2.w, r2.w, cb0[39].x
      div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
      ge r2.x, r2.x, r2.y
      and r2.x, r2.x, l(0x3f800000)
      add r10.xy, -r10.zwzz, r10.xyxx
      add r4.xzw, r4.xxwz, -r11.xxyz
      mov r12.xyzw, l(0,0,0,0)
      mov r13.xyz, r5.xyzx
      mov r14.xyz, r6.xyzx
      mov r15.xyz, r7.xyzx
      mov r17.xz, r9.xxyx
      mov r2.y, r1.z
      mov r17.y, r2.z
      mov r16.xyzw, l(0,0,0,0)
      loop
        ge r5.w, l(1.000000), r2.y
        breakc_nz r5.w
        mad r18.xy, r9.zwzz, cb0[13].wwww, -r17.xzxx
        mul r18.xy, r1.xyxx, |r18.xyxx|
        max r5.w, r18.y, r18.x
        sample_l r18.xyzw, r17.xzxx, t3.xyzw, s1, l(0.000000)
        mad r5.w, r5.w, cb0[18].w, |r17.y|
        add r5.w, -r5.w, r18.w
        lt r6.w, l(0.000000), r5.w
        if_nz r6.w
          add r6.w, -r5.w, l(1.000000)
          mul r19.xyz, r6.wwww, cb0[11].xyzx
          mul r19.w, r5.w, l(0.400000)
          mul r5.w, r4.y, r2.y
          mad r20.xy, r5.wwww, r10.xyxx, r10.zwzz
          sample_l r20.xyzw, r20.xyxx, t4.xyzw, s6, l(0.000000)
          dp4 r6.w, r20.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          mad r20.xyz, r5.wwww, r4.xzwx, r11.xyzx
          add r20.xyz, r20.xyzx, -cb0[38].xyzx
          dp3 r5.w, r20.xyzx, r20.xyzx
          sqrt r5.w, r5.w
          add_sat r5.w, -r5.w, r6.w
          mul r6.w, r2.w, r16.w
          add r5.w, r5.w, l(-1.000000)
          mad r6.w, r6.w, r5.w, l(1.000000)
          mad r5.w, cb0[39].z, r5.w, l(1.000000)
          mul r19.xyzw, r5.wwww, r19.xyzw
          dp3 r5.w, r13.xyzx, r13.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r7.w, r14.xyzx, r14.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          dp3 r8.w, r15.xyzx, r15.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          mul r20.xyz, r7.wwww, cb0[25].xyzx
          mad r20.xyz, cb0[27].xyzx, r8.wwww, r20.xyzx
          mad r20.xyz, cb0[23].xyzx, r5.wwww, r20.xyzx
          mul r20.xyz, r19.wwww, r20.xyzx
          mad r18.xyz, r18.xyzx, r6.wwww, r20.xyzx
          mul r18.xyz, r19.wwww, r18.xyzx
          mul r19.xyz, r18.xyzx, r19.xyzx
          add r5.w, -r16.w, l(1.000000)
          mad r18.xyzw, r19.xyzw, r5.wwww, r16.xyzw
          lt r5.w, l(0.990000), r18.w
          if_nz r5.w
            mov r12.xyzw, r19.xyzw
            mov r16.xyzw, r18.xyzw
            break
          endif
          mov r12.xyzw, r19.xyzw
          mov r16.xyzw, r18.xyzw
        endif
        add r13.xyz, r3.yzwy, r13.xyzx
        add r14.xyz, r3.yzwy, r14.xyzx
        add r15.xyz, r3.yzwy, r15.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r17.xyz, r8.xyzx, r17.xyzx
      endloop
      lt r1.x, r16.w, l(0.990000)
      and r1.x, r1.x, l(0x3f800000)
      add r1.y, -r16.w, l(1.000000)
      mul r1.z, r2.y, r2.x
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r2.xyzw, r12.xyzw, r1.xxxx, r16.xyzw
      div r0.xyw, r0.xyxw, r1.wwww
      dp3 r0.x, r0.xywx, cb0[29].xyzx
      mul r0.x, r0.x, cb0[32].w
      max r0.x, r0.x, l(0.000000)
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r2.w, r0.x
      add r1.xyz, -r2.xyzx, cb0[30].xyzx
      mad r2.xyz, r0.xxxx, r1.xyzx, r2.xyzx
      mul r1.xyzw, r2.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.z, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t5.xyzw, s0
sample r4.xyzw, v1.zwzz, t6.xyzw, s4
add r1.xyz, -r3.xyzx, r4.xyzx
mad r1.xyz, r2.wwww, r1.xyzx, r3.xyzx
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad r0.xyw, r1.xyxz, r0.xxxx, r2.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[28].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[28].y
add r2.x, -v1.x, cb0[28].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[32].z, l(1.000000)
mul r0.z, r0.z, cb0[31].x
mov r1.xyz, l(0,0,0,0)
mov r3.xy, v1.xyxx
mov r1.w, cb0[32].x
mov r2.z, cb0[31].y
loop
  ge r3.z, l(0.000000), r2.z
  breakc_nz r3.z
  mad r3.xy, r2.xyxx, r0.zzzz, r3.xyxx
  sample_l r4.xyzw, r3.xyxx, t5.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[31].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[32].y
  add r2.z, r2.z, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[31].zzzz, r0.xywx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used