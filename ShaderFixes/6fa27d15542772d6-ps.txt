// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 6fa27d15542772d6-ps.txt
// 3DMigoto: 6fa27d15542772d6 |    Unity headers extracted from Amplify_mia_disappear_hair
//    Shader "Amplify/mia_disappear_hair" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="Transparent" }
//        Pass 2/5 {
//          Name "FORWARD"
//          Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "LIGHTMODE"="FORWARDADD" "QUEUE"="Geometry+0" "RenderType"="Transparent" "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_mia_disappear_hair:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 126 7 2
//   undeciphered1a: 8
//   Keywords { "SPOT" "SHADOWS_DEPTH" "FOG_LINEAR" }
//   undeciphered2: 1 8 9 8 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 208
//   Vector 96 [_LightColor0]
//   Vector 128 [_Normal_ST]
//   Float 144 [_useRtomultiply]
//   Vector 160 [_Albedo_ST]
//   Float 176 [_use_albedo_alpha]
//   Float 180 [_Cutoff]
//   Matrix 32 [unity_WorldToLight]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   Matrix 128 [unity_WorldToShadow0]
//   Matrix 192 [unity_WorldToShadow1]
//   Matrix 256 [unity_WorldToShadow2]
//   Matrix 320 [unity_WorldToShadow3]
//   ConstBuffer "UnityPerDraw" 176
//   Matrix 0 [unity_ObjectToWorld]
//   Matrix 64 [unity_WorldToObject]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "Amplifymia_disappear_hair" 128
//   Vector 0 [_Albedo_color_multiply]
//   Float 80 [_main_normal_scale]
//   Float 84 [_detail_normal_scale]
//   Float 88 [_detail_tiling]
//   Float 104 [_smooothnes]
//   Float 108 [_disappear_mask_multiply]
//   Float 112 [_disolve_texture_tile]
//   Float 116 [_disappear_mask_size]
//   SetTexture 0 [_Normal] 2D 4
//   SetTexture 1 [_Normal_detail] 2D 5
//   SetTexture 2 [_Albedo] 2D 6
//   SetTexture 3 [_dissolveguide] 2D 7
//   SetTexture 4 [_LightTexture0] 2D 2
//   SetTexture 5 [_LightTextureB0] 2D 3
//   SetTexture 6 [unity_ProbeVolumeSH] 3D 0
//   SetTexture 7 [_ShadowMapTexture] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerDraw" 4
//   BindCB "UnityPerFrame" 5
//   BindCB "UnityFog" 6
//   BindCB "UnityProbeVolume" 7
//   BindCB "Amplifymia_disappear_hair" 8
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:20:04 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 8     z         1     NONE   float     z
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyz         3     NONE   float   xyz
// TEXCOORD                 3   xyz         4     NONE   float   xyz
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 5   xyzw        6     NONE   float
// TEXCOORD                 6   xyzw        7     NONE   float
// TEXCOORD                 7   xyzw        8     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[12], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb5[12], immediateIndexed
dcl_constantbuffer cb6[2], immediateIndexed
dcl_constantbuffer cb7[7], immediateIndexed
dcl_constantbuffer cb8[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture3d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 10
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r8.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 6fa27d15542772d6-ps.txt

mul r8.w, -r8.x, r8.y
mad r9.xyz, -r8.wwww, cb10[0].xyzw, cb1[4].xyzw

add r0.xyz, -v5.xyzx, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r0.xyzx
add r2.xyz, -v5.xyzx, r9.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r2.xyzx
mad r4.xy, v1.xyxx, cb0[8].xyxx, cb0[8].zwzz
mul r4.zw, v1.xxxy, cb8[5].zzzz
sample r5.xyzw, r4.xyxx, t0.xyzw, s4
mul r5.x, r5.w, r5.x
mad r4.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r5.xy, r4.xyxx, cb8[5].xxxx
dp2 r1.w, r5.xyxx, r5.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r1.w, r1.w
sample r5.xyzw, r4.zwzz, t1.xyzw, s5
mul r5.x, r5.w, r5.x
mad r4.zw, r5.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r4.zw, r4.zzzw, cb8[5].yyyy
dp2 r2.w, r4.zwzz, r4.zwzz
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r2.w, r2.w
mad r4.xy, r4.xyxx, cb8[5].xxxx, r4.zwzz
mul r4.z, r1.w, r2.w
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
mad r5.xy, v1.xyxx, cb0[10].xyxx, cb0[10].zwzz
sample r5.xyzw, r5.xyxx, t2.xyzw, s6
add r6.xyz, -r5.xyzx, r5.xxxx
mad r5.xyz, cb0[9].xxxx, r6.xyzx, r5.xyzx
mul r5.xyz, r5.xyzx, cb8[0].xyzx
mul r6.xyz, v5.yyyy, cb4[5].xyzx
mad r6.xyz, cb4[4].xyzx, v5.xxxx, r6.xyzx
mad r6.xyz, cb4[6].xyzx, v5.zzzz, r6.xyzx
add r6.xyz, r6.xyzx, cb4[7].xyzx
mul r1.w, r6.y, cb4[1].y
mad r1.w, cb4[0].y, r6.x, r1.w
mad r1.w, cb4[2].y, r6.z, r1.w
mul r6.xy, v1.xyxx, cb8[7].xxxx
sample r6.xyzw, r6.xyxx, t3.xyzw, s7
mad r1.w, r6.x, cb8[7].y, r1.w
ge r1.w, r1.w, cb8[6].w
movc r6.xy, r1.wwww, l(0,-0.000000,0,0), l(1.000000,-1.000000,0,0)
mad r1.w, r5.w, r6.x, r6.y
mad r1.w, cb0[11].x, r1.w, r6.x
add r1.w, r1.w, -cb0[11].y
lt r1.w, r1.w, l(0.000000)
discard_nz r1.w
mul r6.xyzw, v5.yyyy, cb0[3].xyzw
mad r6.xyzw, cb0[2].xyzw, v5.xxxx, r6.xyzw
mad r6.xyzw, cb0[4].xyzw, v5.zzzz, r6.xyzw
add r6.xyzw, r6.xyzw, cb0[5].xyzw
mov r7.x, cb5[9].z
mov r7.y, cb5[10].z
mov r7.z, cb5[11].z
dp3 r1.w, r2.xyzx, r7.xyzx
add r2.xyz, v5.xyzx, -cb3[25].xyzx
dp3 r2.x, r2.xyzx, r2.xyzx
sqrt r2.x, r2.x
add r2.x, -r1.w, r2.x
mad r1.w, cb3[25].w, r2.x, r1.w
mad_sat r1.w, r1.w, cb3[24].z, cb3[24].w
eq r2.x, cb7[0].x, l(1.000000)
if_nz r2.x
  eq r2.x, cb7[0].y, l(1.000000)
  mul r2.yzw, v5.yyyy, cb7[2].xxyz
  mad r2.yzw, cb7[1].xxyz, v5.xxxx, r2.yyzw
  mad r2.yzw, cb7[3].xxyz, v5.zzzz, r2.yyzw
  add r2.yzw, r2.yyzw, cb7[4].xxyz
  movc r2.xyz, r2.xxxx, r2.yzwy, v5.xyzx
  add r2.xyz, r2.xyzx, -cb7[6].xyzx
  mul r2.yzw, r2.xxyz, cb7[5].xxyz
  mad r2.y, r2.y, l(0.250000), l(0.750000)
  mad r3.w, cb7[0].z, l(0.500000), l(0.750000)
  max r2.x, r2.y, r3.w
  sample r2.xyzw, r2.xzwx, t6.xyzw, s0
else
  mov r2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r2.x, r2.xyzw, cb2[46].xyzw
mul r7.xyzw, v5.yyyy, cb3[9].xyzw
mad r7.xyzw, cb3[8].xyzw, v5.xxxx, r7.xyzw
mad r7.xyzw, cb3[10].xyzw, v5.zzzz, r7.xyzw
add r7.xyzw, r7.xyzw, cb3[11].xyzw
div r2.yzw, r7.xxyz, r7.wwww
sample_c_lz r2.y, r2.yzyy, t7.xxxx, s1, r2.w
add r2.z, -cb3[24].x, l(1.000000)
mad r2.y, r2.y, r2.z, cb3[24].x
add r2.x, -r2.y, r2.x
mad r1.w, r1.w, r2.x, r2.y
lt r2.x, l(0.000000), r6.z
and r2.x, r2.x, l(0x3f800000)
div r2.yz, r6.xxyx, r6.wwww
add r2.yz, r2.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
sample r7.xyzw, r2.yzyy, t4.xyzw, s2
mul r2.x, r2.x, r7.w
dp3 r2.y, r6.xyzx, r6.xyzx
sample r6.xyzw, r2.yyyy, t5.xyzw, s3
mul r2.x, r2.x, r6.x
mul r1.w, r1.w, r2.x
dp3 r2.x, v2.xyzx, r4.xyzx
dp3 r2.y, v3.xyzx, r4.xyzx
dp3 r2.z, v4.xyzx, r4.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx
mul r4.xyz, r1.wwww, cb0[6].xyzx
add r1.w, -cb8[6].z, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r2.xyzx, r3.xyzx
dp3_sat r2.x, r2.xyzx, r1.xyzx
dp3_sat r0.x, r1.xyzx, r0.xyzx
mul r0.x, r0.x, r0.x
dp2 r0.x, r0.xxxx, r1.wwww
add r0.x, r0.x, l(-0.500000)
add r0.y, -r2.x, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.y, r0.z
mad r0.y, r0.x, r0.y, l(1.000000)
add r0.z, -|r0.w|, l(1.000000)
mul r0.w, r0.z, r0.z
mul r0.w, r0.w, r0.w
mul r0.z, r0.z, r0.w
mad r0.x, r0.x, r0.z, l(1.000000)
mul r0.x, r0.x, r0.y
mul r0.x, r2.x, r0.x
mul r0.xyz, r0.xxxx, r4.xyzx
mul r0.xyz, r0.xyzx, r5.xyzx
div r0.w, v1.z, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mad_sat r0.w, r0.w, cb6[1].z, cb6[1].w
mul o0.xyz, r0.xyzx, r0.wwww
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used