// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 137f52f4849f5c2a-ps.txt
// 3DMigoto: 137f52f4849f5c2a |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 139 2 8
//   undeciphered1a: 14
//   Keywords { "FOG_AREA_BOX" "FOG_USE_XY_PLANE" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 544
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_SunDir] 3
//   Vector 336 [_SunColor] 3
//   Vector 368 [_FogScatteringData2]
//   Vector 464 [_VolumetricFogSunWorldPos]
//   Vector 480 [_VolumetricFogSunShadowsData]
//   Float 496 [_Jitter]
//   Matrix 400 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:32:41 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 137f52f4849f5c2a-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.z, -cb0[13].x, r15.z
mov r1.xy, r15.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
lt r2.xy, cb0[13].yyyy, r1.zwzz
and r2.x, r2.y, r2.x
lt r2.y, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.y
or r1.w, r1.w, r2.x
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.xyz, r1.xyzx, -cb0[17].xyzx
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r5.xyz, -r2.xyzx, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.xyz, -r2.xyzx, r4.xyzx
  mul r2.xyz, r2.xyzx, r3.xyzx
  min r4.xyz, r5.xyzx, r2.xyzx
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.xyz, r5.xyzx, r2.xyzx
  min r2.xy, r2.yzyy, r2.xxxx
  min r2.x, r2.y, r2.x
  min r2.y, r0.w, cb0[12].z
  min r2.x, r2.y, r2.x
  add r2.x, -r1.w, r2.x
  lt r2.z, l(0.000000), r2.x
  if_nz r2.z
    mul r2.zw, v1.xxxy, cb1[6].xxxy
    dp2 r2.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.zwzz
    frc r2.z, r2.z
    add r2.z, r2.z, l(-0.500000)
    div r3.xyz, r1.wwww, r3.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    div r1.xy, cb0[18].xyxx, cb0[13].wwww
    log r1.z, r2.x
    mul r1.z, r1.z, l(0.693147182)
    max r1.z, r1.z, l(0.000000)
    mad r1.z, r1.z, cb0[15].x, l(0.100000)
    mul r1.z, r1.z, cb0[13].z
    mul_sat r2.w, r2.y, cb0[15].y
    mul r1.z, r1.z, r2.w
    add r2.y, -r1.w, r2.y
    max r1.z, r1.z, l(0.010000)
    mul r4.xyz, r0.xyzx, r1.zzzz
    div r4.xyz, r4.xyzx, r0.wwww
    div r1.z, r2.x, r1.z
    mul r5.xy, r4.xyxx, cb0[13].wwww
    mul r2.w, cb0[13].z, cb0[13].y
    div r5.z, r4.z, r2.w
    add r4.xy, r3.xyxx, cb0[14].xzxx
    mul r4.xy, r4.xyxx, cb0[13].wwww
    div r2.w, r3.z, r2.w
    add r4.zw, cb0[14].xxxy, cb0[17].xxxy
    frc r5.w, r2.z
    mad r1.z, r5.w, cb0[31].x, r1.z
    add r3.w, r3.z, cb0[13].x
    mul r6.xyz, r3.yyyy, cb0[26].xywx
    mad r6.xyz, cb0[25].xywx, r3.xxxx, r6.xyzx
    mad r6.xyz, cb0[27].xywx, r3.wwww, r6.xyzx
    add r6.xyz, r6.xyzx, cb0[28].xywx
    div r6.xy, r6.xyxx, r6.zzzz
    mad r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r2.z, r2.z, cb0[30].y, l(1.000000)
    mul r2.z, r2.z, r2.x
    mul r7.xyz, r0.xyzx, r2.zzzz
    div r7.xyz, r7.xyzx, r0.wwww
    add r7.xyz, r3.xywx, r7.xyzx
    mul r8.xyz, r7.yyyy, cb0[26].xywx
    mad r8.xyz, cb0[25].xywx, r7.xxxx, r8.xyzx
    mad r8.xyz, cb0[27].xywx, r7.zzzz, r8.xyzx
    add r8.xyz, r8.xyzx, cb0[28].xywx
    div r6.zw, r8.xxxy, r8.zzzz
    mad r6.zw, r6.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    add r1.w, -r1.w, cb0[29].w
    mul_sat r1.w, r1.w, l(0.0285714287)
    mul r1.w, r1.w, cb0[30].x
    div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
    ge r2.x, r2.x, r2.y
    and r2.x, r2.x, l(0x3f800000)
    add r6.xy, -r6.zwzz, r6.xyxx
    add r3.xyz, r3.xywx, -r7.xyzx
    mov r8.xyzw, l(0,0,0,0)
    mov r10.xy, r4.xyxx
    mov r2.y, r1.z
    mov r10.z, r2.w
    mov r9.xyzw, l(0,0,0,0)
    loop
      ge r3.w, l(1.000000), r2.y
      breakc_nz r3.w
      mad r11.xy, r4.zwzz, cb0[13].wwww, -r10.xyxx
      mul r11.xy, r1.xyxx, |r11.xyxx|
      max r3.w, r11.y, r11.x
      sample_l r11.xyzw, r10.xyxx, t1.xyzw, s0, l(0.000000)
      mad r3.w, r3.w, cb0[18].w, |r10.z|
      add r3.w, -r3.w, r11.w
      lt r5.w, l(0.000000), r3.w
      if_nz r5.w
        add r5.w, -r3.w, l(1.000000)
        mul r12.xyz, r5.wwww, cb0[11].xyzx
        mul r12.w, r3.w, l(0.400000)
        mul r3.w, r2.z, r2.y
        mad r13.xy, r3.wwww, r6.xyxx, r6.zwzz
        sample_l r13.xyzw, r13.xyxx, t2.xyzw, s2, l(0.000000)
        dp4 r5.w, r13.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        mad r13.xyz, r3.wwww, r3.xyzx, r7.xyzx
        add r13.xyz, r13.xyzx, -cb0[29].xyzx
        dp3 r3.w, r13.xyzx, r13.xyzx
        sqrt r3.w, r3.w
        add_sat r3.w, -r3.w, r5.w
        mul r5.w, r1.w, r9.w
        add r3.w, r3.w, l(-1.000000)
        mad r5.w, r5.w, r3.w, l(1.000000)
        mul r11.xyz, r5.wwww, r11.xyzx
        mad r3.w, cb0[30].z, r3.w, l(1.000000)
        mul r12.xyzw, r3.wwww, r12.xyzw
        mul r11.xyz, r11.xyzx, r12.wwww
        mul r12.xyz, r11.xyzx, r12.xyzx
        add r3.w, -r9.w, l(1.000000)
        mad r11.xyzw, r12.xyzw, r3.wwww, r9.xyzw
        lt r3.w, l(0.990000), r11.w
        if_nz r3.w
          mov r8.xyzw, r12.xyzw
          mov r9.xyzw, r11.xyzw
          break
        endif
        mov r8.xyzw, r12.xyzw
        mov r9.xyzw, r11.xyzw
      endif
      add r2.y, r2.y, l(-1.000000)
      add r10.xyz, r5.xyzx, r10.xyzx
    endloop
    lt r1.x, r9.w, l(0.990000)
    and r1.x, r1.x, l(0x3f800000)
    add r1.y, -r9.w, l(1.000000)
    mul r1.z, r2.y, r2.x
    mul r1.x, r1.y, r1.x
    mul r1.x, r1.z, r1.x
    mad r1.xyzw, r8.xyzw, r1.xxxx, r9.xyzw
    div r0.xyz, r0.xyzx, r0.wwww
    dp3 r0.x, r0.xyzx, cb0[20].xyzx
    mul r0.x, r0.x, cb0[23].w
    max r0.x, r0.x, l(0.000000)
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, r0.x
    mul r0.x, r1.w, r0.x
    add r0.yzw, -r1.xxyz, cb0[21].xxyz
    mad r1.xyz, r0.xxxx, r0.yzwy, r1.xyzx
    mul o0.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used