// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 0923d60184fc25bc-ps.txt
// 3DMigoto: 0923d60184fc25bc |    Unity headers extracted from Hidden_HxVolumetricPointLight
//    Shader "Hidden/HxVolumetricPointLight" {
//      SubShader 1/1 {
// 1:     Pass 1/2 {
// 2:     Pass 2/2 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Hidden_HxVolumetricPointLight:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 178 0 10
//   undeciphered1a: 18
//   Keywords { "POINT_COOKIE" "VTRANSPARENCY_ON" "NOISE_ON" }
//   undeciphered2: 1 6 5 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 5904
//   Float 208 [hxNoiseContrast]
//   Vector 224 [Phase]
//   Vector 256 [NoiseOffset] 3
//   Vector 272 [NoiseScale] 3
//   Vector 288 [Density]
//   Vector 960 [hxVolumeSettingsOld0] 2
//   Vector 968 [hxVolumeSettingsOld1] 2
//   Vector 976 [hxVolumeSettingsOld2] 2
//   Vector 984 [hxVolumeSettingsOld3] 2
//   Vector 992 [hxVolumeSettingsOld4] 2
//   Vector 1000 [hxVolumeSettingsOld5] 2
//   Vector 1008 [hxVolumeSettingsOld6] 2
//   Vector 1016 [hxVolumeSettingsOld7] 2
//   Vector 1024 [hxVolumeSettingsOld8] 2
//   Vector 1032 [hxVolumeSettingsOld9] 2
//   Vector 5120 [TransparencySliceSettings]
//   Float 5200 [hxRayOffset]
//   Vector 5344 [LightColour] 3
//   Vector 5360 [LightColour2] 3
//   Vector 5376 [CameraFoward] 3
//   Vector 5392 [_LightParams]
//   Vector 5408 [_CustomLightPosition]
//   Float 5424 [HxTileSize]
//   Float 5776 [TintPercent]
//   Float 5856 [VolumeScale]
//   Vector 5888 [ShadowBias] 3
//   Matrix 320 [hxVolumeMatrixOld0]
//   Matrix 384 [hxVolumeMatrixOld1]
//   Matrix 448 [hxVolumeMatrixOld2]
//   Matrix 512 [hxVolumeMatrixOld3]
//   Matrix 576 [hxVolumeMatrixOld4]
//   Matrix 640 [hxVolumeMatrixOld5]
//   Matrix 704 [hxVolumeMatrixOld6]
//   Matrix 768 [hxVolumeMatrixOld7]
//   Matrix 832 [hxVolumeMatrixOld8]
//   Matrix 896 [hxVolumeMatrixOld9]
//   Matrix 5280 [InverseProjectionMatrix]
//   Matrix 5456 [hxCameraToWorld]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 32 [_LightProjectionParams]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   ConstBuffer "UnityPerDraw" 176
//   Matrix 64 [unity_WorldToObject]
//   SetTexture 0 [VolumetricDepth] 2D 4
//   SetTexture 1 [Tile5x5] 2D 3
//   SetTexture 2 [NoiseTexture3D] 3D 1
//   SetTexture 3 [_FalloffTex] 2D 2
//   SetTexture 4 [PointCookieTexture] CUBE 5
//   SetTexture 5 [_ShadowMapTexture] CUBE 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerDraw" 4
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:27:40 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[369], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_constantbuffer cb3[25], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s0, mode_comparison
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 20
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r18.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 0923d60184fc25bc-ps.txt

mul r18.w, -r18.x, r18.y
mad r19.xyz, -r18.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s4, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
add r1.xy, -r1.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, r1.yyyy, cb0[331].xyzw
mad r1.xyzw, cb0[330].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[332].xyzw
add r1.xyzw, r1.xyzw, cb0[333].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, -r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb0[342].xyzx
mad r1.xyw, cb0[341].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb0[343].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb0[344].xyzx
mul r0.zw, cb0[366].xxxx, cb1[6].xxxy
mul r0.xy, r0.xyxx, r0.zwzz
div r0.xy, r0.xyxx, cb0[339].xxxx
ge r0.zw, r0.xxxy, -r0.xxxy
frc r0.xy, |r0.xyxx|
movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[339].xxxx
div r0.xy, r0.xyxx, cb0[339].xxxx
sample_l r0.xyzw, r0.xyxx, t1.xyzw, s3, l(0.000000)
add r0.x, r0.x, cb0[325].x
frc r0.x, r0.x
add r0.yzw, r1.xxyz, -r19.xxyz
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.y, r1.x
mul r0.yzw, r0.yyzw, r1.yyyy
sqrt r1.x, r1.x
min r1.y, cb0[18].y, l(128.000000)
ftoi r1.z, r1.y
add r2.xyz, -cb0[338].xyzx, r19.xyzx
dp3 r1.w, r0.yzwy, r2.xyzx
add r2.w, r1.w, r1.w
dp3 r2.x, r2.xyzx, r2.xyzx
mul r2.y, cb0[337].z, cb0[337].z
mad r2.x, -cb0[337].z, cb0[337].z, r2.x
mul r2.x, r2.x, l(4.000000)
mad r2.x, r2.w, r2.w, -r2.x
lt r2.z, r2.x, l(0.000000)
discard_nz r2.z
sqrt r2.x, r2.x
mad r2.z, -r1.w, l(2.000000), -r2.x
mul r2.z, r2.z, l(0.500000)
mad r1.w, -r1.w, l(2.000000), r2.x
mul r1.w, r1.w, l(0.500000)
max r2.x, r2.z, r1.w
min r1.x, r1.x, r2.x
min r1.w, r2.z, r1.w
max r1.w, r1.w, l(0.000000)
add r1.x, -r1.w, r1.x
add r2.x, r1.x, l(-0.000100)
lt r2.x, r2.x, l(0.000000)
discard_nz r2.x
mad r2.xzw, r0.yyzw, r1.wwww, r19.xxyz
round_z r1.y, r1.y
div r1.x, r1.x, r1.y
mul r3.xyz, r0.yzwy, r1.xxxx
mad r2.xzw, r3.xxyz, r0.xxxx, r2.xxzw
mul r0.x, r1.w, cb0[18].x
mul r0.x, r0.x, cb0[18].w
mul r1.y, r1.x, cb0[18].w
dp3 r1.w, cb0[336].xyzx, r0.yzwy
add r3.xyz, r2.xzwx, -r19.xyzx
dp3 r3.x, r3.xyzx, r3.xyzx
sqrt r3.x, r3.x
mul r1.w, r1.w, r3.x
add r3.x, -cb3[24].x, l(1.000000)
max r3.y, cb0[13].x, l(0.000000)
div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
add r4.xyz, cb0[334].xyzx, -cb0[335].xyzx
ftoi r3.z, cb0[320].z
div r1.w, r1.w, cb0[320].x
log r1.w, r1.w
mul r1.w, r1.w, cb0[320].y
exp r1.w, r1.w
iadd r3.z, r3.z, l(-1)
itof r3.z, r3.z
mul r3.w, r1.w, r3.z
mov_sat r3.w, r3.w
add r3.w, -r3.w, l(1.000000)
mad_sat r5.xyzw, r1.wwww, r3.zzzz, l(-1.000000, -2.000000, -3.000000, -4.000000)
add r5.xyzw, -r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mad_sat r6.xyz, r1.wwww, r3.zzzz, l(-5.000000, -6.000000, -7.000000, 0.000000)
add r6.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov r7.y, l(0)
mov r8.z, l(0)
mov r9.xyzw, l(0,0,0,0)
mov r10.xyzw, l(0,0,0,0)
mov r11.xyz, l(0,0,0,0)
mov r12.xyz, r2.xzwx
mov r1.w, r0.x
mov r3.z, l(0)
loop
  ige r4.w, r3.z, r1.z
  breakc_nz r4.w
  add r13.xyz, r12.xyzx, -cb0[338].xyzx
  max r4.w, |r13.y|, |r13.x|
  max r4.w, |r13.z|, r4.w
  add r4.w, r4.w, -cb2[2].z
  max r4.w, r4.w, l(0.000010)
  mul r4.w, r4.w, cb2[2].w
  div r4.w, cb2[2].y, r4.w
  add r4.w, r4.w, -cb2[2].x
  add r4.w, -r4.w, l(1.000000)
  sample_c_lz r4.w, r13.xyzx, t5.xxxx, s0, r4.w
  mad r4.w, r4.w, r3.x, cb3[24].x
  dp3 r6.w, r13.xyzx, r13.xyzx
  rsq r7.z, r6.w
  mul r13.xyz, r7.zzzz, r13.xyzx
  add r14.xyz, r12.xyzx, cb0[16].xyzx
  mul r14.xyz, r14.xyzx, cb0[17].xyzx
  sample_l r14.xyzw, r14.xyzx, t2.xyzw, s1, l(1.000000)
  add r7.z, r14.w, l(-0.500000)
  mad r7.z, r7.z, r3.y, l(0.500000)
  dp2 r7.z, r7.zzzz, cb0[18].xxxx
  mov r14.x, r7.z
  mov r14.yz, l(0,0,0,0)
  mov r7.w, l(0)
  loop
    ige r8.w, r14.z, l(10)
    mov r7.w, l(0)
    breakc_nz r8.w
    eq r8.w, l(-1.000000), cb0[r14.z + 60].y
    if_nz r8.w
      mov r14.xy, r14.xxxx
      mov r7.w, l(-1)
      break
    endif
    ishl r11.w, r14.z, l(2)
    mul r15.xyz, r12.yyyy, cb0[r11.w + 21].xyzx
    mad r15.xyz, cb0[r11.w + 20].xyzx, r12.xxxx, r15.xyzx
    mad r15.xyz, cb0[r11.w + 22].xyzx, r12.zzzz, r15.xyzx
    add r15.xyz, r15.xyzx, cb0[r11.w + 23].xyzx
    lt r16.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r15.xyzx
    lt r17.xyz, r15.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r11.w, r16.x, r17.x
    and r11.w, r16.y, r11.w
    and r11.w, r17.y, r11.w
    and r11.w, r16.z, r11.w
    and r11.w, r17.z, r11.w
    if_nz r11.w
      ge r11.w, l(3.000000), cb0[r14.z + 60].y
      if_nz r11.w
        max r11.w, r14.x, cb0[r14.z + 60].x
        add r12.w, r14.x, cb0[r14.z + 60].x
        min r13.w, r14.x, cb0[r14.z + 60].x
        eq r16.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r14.z + 60].yyyy
        add r14.w, r14.x, -cb0[r14.z + 60].x
        movc r14.w, r16.w, r14.w, r14.x
        movc r13.w, r16.z, r13.w, r14.w
        movc r12.w, r16.y, r12.w, r13.w
        movc r8.x, r16.x, r11.w, r12.w
      else
        ge r11.w, l(7.000000), cb0[r14.z + 60].y
        dp3 r12.w, r15.xyzx, r15.xyzx
        sqrt r12.w, r12.w
        lt r12.w, r12.w, l(0.500000)
        and r11.w, r11.w, r12.w
        if_nz r11.w
          max r11.w, r14.x, cb0[r14.z + 60].x
          add r12.w, r14.x, cb0[r14.z + 60].x
          min r13.w, r14.x, cb0[r14.z + 60].x
          eq r16.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r14.z + 60].yyyy
          add r14.w, r14.x, -cb0[r14.z + 60].x
          movc r14.w, r16.w, r14.w, r14.x
          movc r13.w, r16.z, r13.w, r14.w
          movc r12.w, r16.y, r12.w, r13.w
          movc r8.x, r16.x, r11.w, r12.w
        else
          ge r11.w, l(11.000000), cb0[r14.z + 60].y
          dp2 r12.w, r15.xzxx, r15.xzxx
          sqrt r12.w, r12.w
          lt r12.w, r12.w, l(0.500000)
          and r11.w, r11.w, r12.w
          max r12.w, r14.x, cb0[r14.z + 60].x
          add r13.w, r14.x, cb0[r14.z + 60].x
          min r14.w, r14.x, cb0[r14.z + 60].x
          eq r15.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r14.z + 60].yyyy
          add r16.x, r14.x, -cb0[r14.z + 60].x
          movc r15.w, r15.w, r16.x, r14.x
          movc r14.w, r15.z, r14.w, r15.w
          movc r13.w, r15.y, r13.w, r14.w
          movc r12.w, r15.x, r12.w, r13.w
          movc r8.x, r11.w, r12.w, r14.x
        endif
      endif
    else
      mov r8.x, r14.x
    endif
    iadd r8.y, r14.z, l(1)
    mov r14.xyz, r8.xzyx
    mov r7.w, r8.w
  endloop
  movc r7.z, r7.w, r14.y, r14.x
  dp3 r8.x, r13.xyzx, -r0.yzwy
  mad r8.x, -cb0[14].w, r8.x, cb0[14].z
  log r8.x, r8.x
  mul r8.x, r8.x, l(1.500000)
  exp r8.x, r8.x
  div r8.x, cb0[14].y, r8.x
  mul r8.x, r8.x, cb0[14].x
  mul r7.x, r2.y, r6.w
  sample_l r13.xyzw, r7.xyxx, t3.xyzw, s2, l(0.000000)
  mul r13.xyz, r12.yyyy, cb4[5].xyzx
  mad r13.xyz, cb4[4].xyzx, r12.xxxx, r13.xyzx
  mad r13.xyz, cb4[6].xyzx, r12.zzzz, r13.xyzx
  add r13.xyz, r13.xyzx, cb4[7].xyzx
  sample_l r15.xyzw, r13.xyzx, t4.xyzw, s5, l(0.000000)
  mul r7.x, r13.w, r15.w
  mad r6.w, -r6.w, r2.y, l(1.000000)
  mul r6.w, r6.w, cb0[361].x
  mul_sat r6.w, r6.w, l(0.500000)
  mad r13.xyz, r6.wwww, r4.xyzx, cb0[335].xyzx
  add r6.w, -r4.w, l(1.000000)
  mul r6.w, r6.w, cb0[368].z
  mad r4.w, r8.x, r4.w, r6.w
  mul r4.w, r7.x, r4.w
  mul r6.w, r1.w, l(-1.442695)
  exp r6.w, r6.w
  mul r4.w, r4.w, r6.w
  mul r4.w, r7.z, r4.w
  mul r4.w, r1.x, r4.w
  max r4.w, r4.w, l(0.000000)
  mul r8.xyw, r4.wwww, r13.xyxz
  mad r11.xyz, r13.xyzx, r4.wwww, r11.xyzx
  dp3 r4.w, r8.xywx, l(0.0396819152, 0.458021790, 0.00609653955, 0.000000)
  mul_sat r13.x, r3.w, r4.w
  mul_sat r15.xyzw, r5.wxyz, r4.wwww
  mov r13.yzw, r15.yyzw
  add r9.xyzw, r9.xyzw, r13.xyzw
  mul_sat r15.yzw, r6.xxyz, r4.wwww
  add r10.xyzw, r10.xyzw, r15.xyzw
  mad r12.xyz, r0.yzwy, r1.xxxx, r12.xyzx
  mad r1.w, r1.y, r7.z, r1.w
  iadd r3.z, r3.z, l(1)
endloop
mov o1.xyzw, r9.xyzw
mov o2.xyzw, r10.xyzw
mov o0.xyz, r11.xyzx
mov o0.w, l(0)
ret
// Approximately 0 instruction slots used