// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d41578c724791e79-ps.txt
// 3DMigoto: d41578c724791e79 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 145 2 8
//   undeciphered1a: 17
//   Keywords { "FOG_AREA_BOX" "FOG_POINT_LIGHT0" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 576
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 352 [_SunDir] 3
//   Vector 368 [_SunColor] 3
//   Vector 400 [_FogScatteringData2]
//   Vector 496 [_VolumetricFogSunWorldPos]
//   Vector 512 [_VolumetricFogSunShadowsData]
//   Float 528 [_Jitter]
//   Matrix 432 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:15:13 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[34], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 19
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r17.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed d41578c724791e79-ps.txt

mul r17.w, -r17.x, r17.y
mad r18.xyz, -r17.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r18.y
mov r1.xz, r18.xxzx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.y, l(0.000010)
lt r2.xy, cb0[13].yyyy, r1.ywyy
and r2.x, r2.y, r2.x
lt r2.y, r1.y, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.y
or r1.w, r1.w, r2.x
if_z r1.w
  add r0.w, r0.y, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xwzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.xyz, r1.xyzx, -cb0[17].xyzx
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r5.xyz, -r2.xyzx, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.xyz, -r2.xyzx, r4.xyzx
  mul r2.xyz, r2.xyzx, r3.xyzx
  min r4.xyz, r5.xyzx, r2.xyzx
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.xyz, r5.xyzx, r2.xyzx
  min r2.xy, r2.yzyy, r2.xxxx
  min r2.x, r2.y, r2.x
  min r2.y, r0.w, cb0[12].z
  min r2.x, r2.y, r2.x
  add r2.x, -r1.w, r2.x
  lt r2.z, l(0.000000), r2.x
  if_nz r2.z
    mul r2.zw, v1.xxxy, cb1[6].xxxy
    dp2 r2.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.zwzz
    frc r2.z, r2.z
    add r2.z, r2.z, l(-0.500000)
    div r3.xyz, r1.wwww, r3.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    div r1.xy, cb0[18].xzxx, cb0[13].wwww
    log r1.z, r2.x
    mul r1.z, r1.z, l(0.693147182)
    max r1.z, r1.z, l(0.000000)
    mad r1.z, r1.z, cb0[15].x, l(0.100000)
    mul r1.z, r1.z, cb0[13].z
    mul_sat r2.w, r2.y, cb0[15].y
    mul r1.z, r1.z, r2.w
    add r2.y, -r1.w, r2.y
    max r1.z, r1.z, l(0.010000)
    mul r4.xyz, r0.xyzx, r1.zzzz
    div r4.xyz, r4.xyzx, r0.wwww
    div r1.z, r2.x, r1.z
    add r5.xyz, r3.xyzx, -cb0[19].xyzx
    mul r6.xz, r4.xxzx, cb0[13].wwww
    mul r2.w, cb0[13].z, cb0[13].y
    div r6.y, r4.y, r2.w
    add r7.xy, r3.xzxx, cb0[14].xzxx
    mul r7.xy, r7.xyxx, cb0[13].wwww
    div r2.w, r3.y, r2.w
    add r7.zw, cb0[14].xxxz, cb0[17].xxxz
    frc r4.w, r2.z
    mad r1.z, r4.w, cb0[33].x, r1.z
    add r3.w, r3.y, cb0[13].x
    mul r8.xyz, r3.wwww, cb0[28].xywx
    mad r8.xyz, cb0[27].xywx, r3.xxxx, r8.xyzx
    mad r8.xyz, cb0[29].xywx, r3.zzzz, r8.xyzx
    add r8.xyz, r8.xyzx, cb0[30].xywx
    div r8.xy, r8.xyxx, r8.zzzz
    mad r8.xy, r8.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r2.z, r2.z, cb0[32].y, l(1.000000)
    mul r2.z, r2.z, r2.x
    mul r9.xyz, r0.xyzx, r2.zzzz
    div r9.xyz, r9.xyzx, r0.wwww
    add r9.xyz, r3.xwzx, r9.xyzx
    mul r10.xyz, r9.yyyy, cb0[28].xywx
    mad r10.xyz, cb0[27].xywx, r9.xxxx, r10.xyzx
    mad r10.xyz, cb0[29].xywx, r9.zzzz, r10.xyzx
    add r10.xyz, r10.xyzx, cb0[30].xywx
    div r8.zw, r10.xxxy, r10.zzzz
    mad r8.zw, r8.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    add r1.w, -r1.w, cb0[31].w
    mul_sat r1.w, r1.w, l(0.0285714287)
    mul r1.w, r1.w, cb0[32].x
    div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
    ge r2.x, r2.x, r2.y
    and r2.x, r2.x, l(0x3f800000)
    add r8.xy, -r8.zwzz, r8.xyxx
    add r3.xyz, r3.xwzx, -r9.xyzx
    mov r10.xyzw, l(0,0,0,0)
    mov r11.xyz, r5.xyzx
    mov r13.xz, r7.xxyx
    mov r2.y, r1.z
    mov r13.y, r2.w
    mov r12.xyzw, l(0,0,0,0)
    loop
      ge r3.w, l(1.000000), r2.y
      breakc_nz r3.w
      mad r14.xy, r7.zwzz, cb0[13].wwww, -r13.xzxx
      mul r14.xy, r1.xyxx, |r14.xyxx|
      max r3.w, r14.y, r14.x
      sample_l r14.xyzw, r13.xzxx, t1.xyzw, s0, l(0.000000)
      mad r3.w, r3.w, cb0[18].w, |r13.y|
      add r3.w, -r3.w, r14.w
      lt r4.w, l(0.000000), r3.w
      if_nz r4.w
        add r4.w, -r3.w, l(1.000000)
        mul r15.xyz, r4.wwww, cb0[11].xyzx
        mul r15.w, r3.w, l(0.400000)
        mul r3.w, r2.z, r2.y
        mad r16.xy, r3.wwww, r8.xyxx, r8.zwzz
        sample_l r16.xyzw, r16.xyxx, t2.xyzw, s2, l(0.000000)
        dp4 r4.w, r16.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        mad r16.xyz, r3.wwww, r3.xyzx, r9.xyzx
        add r16.xyz, r16.xyzx, -cb0[31].xyzx
        dp3 r3.w, r16.xyzx, r16.xyzx
        sqrt r3.w, r3.w
        add_sat r3.w, -r3.w, r4.w
        mul r4.w, r1.w, r12.w
        add r3.w, r3.w, l(-1.000000)
        mad r4.w, r4.w, r3.w, l(1.000000)
        mad r3.w, cb0[32].z, r3.w, l(1.000000)
        mul r15.xyzw, r3.wwww, r15.xyzw
        dp3 r3.w, r11.xyzx, r11.xyzx
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        mul r16.xyz, r3.wwww, cb0[20].xyzx
        mul r16.xyz, r15.wwww, r16.xyzx
        mad r14.xyz, r14.xyzx, r4.wwww, r16.xyzx
        mul r14.xyz, r15.wwww, r14.xyzx
        mul r15.xyz, r14.xyzx, r15.xyzx
        add r3.w, -r12.w, l(1.000000)
        mad r14.xyzw, r15.xyzw, r3.wwww, r12.xyzw
        lt r3.w, l(0.990000), r14.w
        if_nz r3.w
          mov r10.xyzw, r15.xyzw
          mov r12.xyzw, r14.xyzw
          break
        endif
        mov r10.xyzw, r15.xyzw
        mov r12.xyzw, r14.xyzw
      endif
      add r11.xyz, r4.xyzx, r11.xyzx
      add r2.y, r2.y, l(-1.000000)
      add r13.xyz, r6.xyzx, r13.xyzx
    endloop
    lt r1.x, r12.w, l(0.990000)
    and r1.x, r1.x, l(0x3f800000)
    add r1.y, -r12.w, l(1.000000)
    mul r1.z, r2.y, r2.x
    mul r1.x, r1.y, r1.x
    mul r1.x, r1.z, r1.x
    mad r1.xyzw, r10.xyzw, r1.xxxx, r12.xyzw
    div r0.xyz, r0.xyzx, r0.wwww
    dp3 r0.x, r0.xyzx, cb0[22].xyzx
    mul r0.x, r0.x, cb0[25].w
    max r0.x, r0.x, l(0.000000)
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, r0.x
    mul r0.x, r1.w, r0.x
    add r0.yzw, -r1.xxyz, cb0[23].xxyz
    mad r1.xyz, r0.xxxx, r0.yzwy, r1.xyzx
    mul o0.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used