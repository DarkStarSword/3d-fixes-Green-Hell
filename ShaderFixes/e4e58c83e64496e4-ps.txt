// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e4e58c83e64496e4-ps.txt
// 3DMigoto: e4e58c83e64496e4 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 175 4 14
//   undeciphered1a: 23
//   Keywords { "FOG_OF_WAR_ON" "FOG_POINT_LIGHT3" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 688
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 288 [_FogOfWarSize] 3
//   Vector 304 [_FogOfWarCenterAdjusted] 3
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_FogPointLightPosition2] 3
//   Vector 400 [_FogPointLightColor2] 3
//   Vector 416 [_FogPointLightPosition3] 3
//   Vector 432 [_FogPointLightColor3] 3
//   Vector 464 [_SunDir] 3
//   Vector 480 [_SunColor] 3
//   Vector 512 [_FogScatteringData2]
//   Vector 608 [_VolumetricFogSunWorldPos]
//   Vector 624 [_VolumetricFogSunShadowsData]
//   Float 640 [_Jitter]
//   Matrix 544 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   SetTexture 4 [_VolumetricFogSunDepthTexture] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:23:07 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[41], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 25
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r23.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e4e58c83e64496e4-ps.txt

mul r23.w, -r23.x, r23.y
mad r24.xyz, -r23.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r24.y
mov r1.xz, r24.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, r0.z
lt r3.x, r0.y, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xw, r2.xxxz, cb0[18].xxxz
    add r0.xw, r0.xxxw, -cb0[19].xxxz
    sample r3.xyzw, r0.xwxx, t2.wxyz, s3
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r2.xyz, -r1.xyzx, r2.xwzx
    dp3 r0.x, r2.xyzx, r2.xyzx
    dp2 r0.w, r2.xzxx, r2.xzxx
    sqrt r0.xw, r0.xxxw
    div r3.yz, r2.xxzx, r0.wwww
    div r0.w, r0.w, r2.y
    max r1.w, r0.z, r1.y
    min r4.z, r1.w, cb0[13].y
    add r1.w, r1.y, -r4.z
    mul r1.w, r0.w, r1.w
    mad r4.xy, -r3.yzyy, r1.wwww, r24.xzxx
    min r1.w, r0.x, cb0[12].z
    add r5.xyz, -r1.xyzx, r4.xzyx
    dp3 r1.x, r5.xyzx, r5.xyzx
    sqrt r1.x, r1.x
    lt r1.z, r1.x, r1.w
    if_nz r1.z
      lt r1.z, l(0.000000), r0.w
      lt r2.w, l(-0.500000), r0.y
      and r1.z, r1.z, r2.w
      lt r2.w, r0.w, l(0.000000)
      lt r0.y, r0.y, l(0.500000)
      and r0.y, r0.y, r2.w
      and r0.y, r0.z, r0.y
      movc r5.y, r1.z, cb0[13].y, r0.y
      add r0.y, -r1.y, r5.y
      mul r0.y, r0.y, r0.w
      mad r5.xz, -r3.yyzy, r0.yyyy, r24.xxzx
      add r0.yzw, r4.xxzy, -r5.xxyz
      dp3 r0.y, r0.yzwy, r0.yzwy
      sqrt r0.y, r0.y
      add r0.z, -r1.x, r1.w
      min r0.y, r0.z, r0.y
      lt r0.w, l(0.000000), r0.y
      if_nz r0.w
        mul r1.yz, v1.xxyx, cb1[6].xxyx
        dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r1.yzyy
        frc r0.w, r0.w
        add r0.w, r0.w, l(-0.500000)
        log r1.y, r0.y
        mul r1.y, r1.y, l(0.693147182)
        max r1.y, r1.y, l(0.000000)
        mad r1.y, r1.y, cb0[15].x, l(0.100000)
        mul r1.y, r1.y, cb0[13].z
        mul_sat r1.z, r1.w, cb0[15].y
        mul r1.y, r1.z, r1.y
        max r1.y, r1.y, l(0.010000)
        mul r3.yzw, r1.yyyy, r2.xxyz
        div r3.yzw, r3.yyzw, r0.xxxx
        div r1.y, r0.y, r1.y
        add r5.xyz, r4.xzyx, -cb0[20].xyzx
        add r6.xyz, r4.xzyx, -cb0[22].xyzx
        add r7.xyz, r4.xzyx, -cb0[24].xyzx
        add r8.xyz, r4.xzyx, -cb0[26].xyzx
        mul r9.xz, r3.yywy, cb0[13].wwww
        mul r1.z, cb0[13].z, cb0[13].y
        div r9.y, r3.z, r1.z
        add r10.xy, r4.xyxx, cb0[14].xzxx
        mul r10.xy, r10.xyxx, cb0[13].wwww
        div r1.z, r4.z, r1.z
        frc r1.w, r0.w
        mad r1.y, r1.w, cb0[40].x, r1.y
        add r4.w, r4.z, cb0[13].x
        mul r11.xyz, r4.wwww, cb0[35].xywx
        mad r11.xyz, cb0[34].xywx, r4.xxxx, r11.xyzx
        mad r11.xyz, cb0[36].xywx, r4.yyyy, r11.xyzx
        add r11.xyz, r11.xyzx, cb0[37].xywx
        div r10.zw, r11.xxxy, r11.zzzz
        mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        mad r0.w, r0.w, cb0[39].y, l(1.000000)
        mul r0.w, r0.w, r0.y
        mul r11.xyz, r2.xyzx, r0.wwww
        div r11.xyz, r11.xyzx, r0.xxxx
        add r11.xyz, r4.xwyx, r11.xyzx
        mul r12.xyz, r11.yyyy, cb0[35].xywx
        mad r12.xyz, cb0[34].xywx, r11.xxxx, r12.xyzx
        mad r12.xyz, cb0[36].xywx, r11.zzzz, r12.xyzx
        add r12.xyz, r12.xyzx, cb0[37].xywx
        div r12.xy, r12.xyxx, r12.zzzz
        mad r12.xy, r12.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r0.w, -r1.x, cb0[38].w
        mul_sat r0.w, r0.w, l(0.0285714287)
        mul r0.w, r0.w, cb0[39].x
        div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
        ge r0.y, r0.y, r0.z
        add r10.zw, r10.zzzw, -r12.xxxy
        add r4.xyz, r4.xwyx, -r11.xyzx
        mov r13.xyzw, l(0,0,0,0)
        mov r14.xyz, r5.xyzx
        mov r15.xyz, r6.xyzx
        mov r16.xyz, r7.xyzx
        mov r17.xyz, r8.xyzx
        mov r19.xz, r10.xxyx
        mov r0.z, r1.y
        mov r19.y, r1.z
        mov r18.xyzw, l(0,0,0,0)
        loop
          ge r2.w, l(1.000000), r0.z
          breakc_nz r2.w
          sample_l r20.xyzw, r19.xzxx, t3.xyzw, s0, l(0.000000)
          add r2.w, -|r19.y|, r20.w
          lt r4.w, l(0.000000), r2.w
          if_nz r4.w
            add r4.w, -r2.w, l(1.000000)
            mul r21.xyz, r4.wwww, cb0[11].xyzx
            mul r21.w, r2.w, l(0.400000)
            mul r2.w, r1.w, r0.z
            mad r12.zw, r2.wwww, r10.zzzw, r12.xxxy
            sample_l r22.xyzw, r12.zwzz, t4.xyzw, s4, l(0.000000)
            dp4 r4.w, r22.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            mad r22.xyz, r2.wwww, r4.xyzx, r11.xyzx
            add r22.xyz, r22.xyzx, -cb0[38].xyzx
            dp3 r2.w, r22.xyzx, r22.xyzx
            sqrt r2.w, r2.w
            add_sat r2.w, -r2.w, r4.w
            mul r4.w, r0.w, r18.w
            add r2.w, r2.w, l(-1.000000)
            mad r4.w, r4.w, r2.w, l(1.000000)
            mad r2.w, cb0[39].z, r2.w, l(1.000000)
            mul r21.xyzw, r2.wwww, r21.xyzw
            dp3 r2.w, r14.xyzx, r14.xyzx
            div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
            dp3 r5.w, r15.xyzx, r15.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            dp3 r6.w, r16.xyzx, r16.xyzx
            div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
            dp3 r7.w, r17.xyzx, r17.xyzx
            div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
            mul r22.xyz, r6.wwww, cb0[25].xyzx
            mad r22.xyz, cb0[27].xyzx, r7.wwww, r22.xyzx
            mad r22.xyz, cb0[23].xyzx, r5.wwww, r22.xyzx
            mad r22.xyz, cb0[21].xyzx, r2.wwww, r22.xyzx
            mul r22.xyz, r21.wwww, r22.xyzx
            mad r20.xyz, r20.xyzx, r4.wwww, r22.xyzx
            mul r20.xyz, r21.wwww, r20.xyzx
            mul r21.xyz, r20.xyzx, r21.xyzx
            add r2.w, -r18.w, l(1.000000)
            mad r20.xyzw, r21.xyzw, r2.wwww, r18.xyzw
            lt r2.w, l(0.990000), r20.w
            if_nz r2.w
              mov r13.xyzw, r21.xyzw
              mov r18.xyzw, r20.xyzw
              break
            endif
            mov r13.xyzw, r21.xyzw
            mov r18.xyzw, r20.xyzw
          endif
          add r14.xyz, r3.yzwy, r14.xyzx
          add r15.xyz, r3.yzwy, r15.xyzx
          add r16.xyz, r3.yzwy, r16.xyzx
          add r17.xyz, r3.yzwy, r17.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r19.xyz, r9.xyzx, r19.xyzx
        endloop
        lt r0.w, r18.w, l(0.990000)
        and r0.yw, r0.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
        add r1.y, -r18.w, l(1.000000)
        mul r0.y, r0.z, r0.y
        mul r0.z, r0.w, r1.y
        mul r0.y, r0.y, r0.z
        mad r4.xyzw, r13.xyzw, r0.yyyy, r18.xyzw
        div r0.xyz, r2.xyzx, r0.xxxx
        dp3 r0.x, r0.xyzx, cb0[29].xyzx
        mul r0.x, r0.x, cb0[32].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r4.w, r0.x
        add r0.yzw, -r4.xxyz, cb0[30].xxyz
        mad r4.xyz, r0.xxxx, r0.yzwy, r4.xyzx
        mul r0.xyzw, r4.xyzw, cb0[10].wwww
        add r1.x, -r1.x, cb0[12].z
        div_sat r1.x, r1.x, cb0[12].w
        mul r1.x, r1.x, r1.x
        mul r0.xyzw, r0.xyzw, r1.xxxx
        mul o0.xyzw, r3.xxxx, r0.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used