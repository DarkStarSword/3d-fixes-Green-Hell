// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 329b6890f0d46814-ps.txt
// 3DMigoto: 329b6890f0d46814 |    Unity headers extracted from Hidden_HxVolumetricDirectionalLight
//    Shader "Hidden/HxVolumetricDirectionalLight" {
//      SubShader 1/1 {
//        Pass 3/3 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Hidden_HxVolumetricDirectionalLight:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 226 0 21
//   undeciphered1a: 14
//   Keywords { "VTRANSPARENCY_ON" "SHADOWS_OFF" "NOISE_ON" }
//   undeciphered2: 1 3 3 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 6048
//   Float 208 [hxNoiseContrast]
//   Vector 224 [Phase]
//   Vector 240 [Phase2]
//   Vector 256 [NoiseOffset] 3
//   Vector 272 [NoiseScale] 3
//   Vector 288 [Density]
//   Vector 960 [hxVolumeSettingsOld0] 2
//   Vector 968 [hxVolumeSettingsOld1] 2
//   Vector 976 [hxVolumeSettingsOld2] 2
//   Vector 984 [hxVolumeSettingsOld3] 2
//   Vector 992 [hxVolumeSettingsOld4] 2
//   Vector 1000 [hxVolumeSettingsOld5] 2
//   Vector 1008 [hxVolumeSettingsOld6] 2
//   Vector 1016 [hxVolumeSettingsOld7] 2
//   Vector 1024 [hxVolumeSettingsOld8] 2
//   Vector 1032 [hxVolumeSettingsOld9] 2
//   Vector 5120 [TransparencySliceSettings]
//   Float 5200 [hxRayOffset]
//   Float 5204 [HxTileSize]
//   Float 5696 [FirstLight]
//   Vector 5792 [ShadowBias] 3
//   Vector 5888 [_SpotLightParams]
//   Vector 5904 [CameraFoward] 3
//   Float 5916 [VolumeScale]
//   Float 5920 [ExtinctionEffect]
//   Vector 5924 [LightColour] 3
//   Vector 5936 [LightColour2] 3
//   Float 5968 [TintPercent]
//   Vector 5972 [MaxRayDistance] 2
//   Vector 6032 [SunSize] 2
//   Matrix 320 [hxVolumeMatrixOld0]
//   Matrix 384 [hxVolumeMatrixOld1]
//   Matrix 448 [hxVolumeMatrixOld2]
//   Matrix 512 [hxVolumeMatrixOld3]
//   Matrix 576 [hxVolumeMatrixOld4]
//   Matrix 640 [hxVolumeMatrixOld5]
//   Matrix 704 [hxVolumeMatrixOld6]
//   Matrix 768 [hxVolumeMatrixOld7]
//   Matrix 832 [hxVolumeMatrixOld8]
//   Matrix 896 [hxVolumeMatrixOld9]
//   Matrix 5216 [InverseProjectionMatrix]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerCameraRare" 352
//   Matrix 288 [unity_CameraToWorld]
//   SetTexture 0 [VolumetricDepth] 2D 1
//   SetTexture 1 [Tile5x5] 2D 2
//   SetTexture 2 [NoiseTexture3D] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerCameraRare" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:47:07 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[378], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 329b6890f0d46814-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s1, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
mad r1.xy, r1.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, r1.yyyy, cb0[327].xyzw
mad r1.xyzw, cb0[326].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[328].xyzw
add r1.xyzw, r1.xyzw, cb0[329].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb2[19].xyzx
mad r1.xyw, cb2[18].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb2[20].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb2[21].xyzx
add r2.xyz, -r1.xyzx, r15.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, cb0[369].xyzx, -r2.xyzx
div r1.w, cb1[5].y, r0.w
mad r2.xyz, -r2.xyzx, r1.wwww, r15.xyzx
mad r1.xyz, cb0[368].xyzx, cb0[362].xxxx, r1.xyzx
add r1.xyz, -r1.xyzx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r1.w, r1.w
div r1.xyz, r1.xyzx, r1.wwww
min r1.w, r1.w, cb0[373].z
min r2.w, r1.w, cb0[373].y
add r1.w, r1.w, -r2.w
min r3.x, cb0[18].y, l(128.000000)
ftoi r3.y, r3.x
round_z r3.x, r3.x
div r3.z, r2.w, r3.x
mul r4.xy, cb0[369].wwww, cb1[6].xyxx
mul r0.xy, r0.xyxx, r4.xyxx
div r0.xy, r0.xyxx, cb0[325].yyyy
ge r4.xy, r0.xyxx, -r0.xyxx
frc r0.xy, |r0.xyxx|
movc r0.xy, r4.xyxx, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[325].yyyy
div r0.xy, r0.xyxx, cb0[325].yyyy
sample_l r4.xyzw, r0.xyxx, t1.xyzw, s2, l(0.000000)
add r0.x, r4.x, cb0[325].x
frc r0.x, r0.x
mul r0.y, r0.x, r3.z
mad r2.xyz, -r0.yyyy, r1.xyzx, r2.xyzx
dp3 r0.y, cb0[368].xyzx, r1.xyzx
lt r0.z, l(0.990000), r0.z
and r0.z, r0.z, l(0x3f800000)
mad r3.w, -cb0[15].w, r0.y, cb0[15].z
log r3.w, r3.w
mul r3.w, r3.w, l(1.500000)
exp r3.w, r3.w
max r3.w, r3.w, l(0.000100)
div r3.w, cb0[15].y, r3.w
mul r3.w, r3.w, cb0[15].x
mul r3.w, r3.w, cb0[377].x
max r0.z, r0.z, cb0[377].y
mul r0.z, r0.z, r3.w
min r0.z, r0.z, l(100.000000)
mad r3.w, -cb0[14].w, r0.y, cb0[14].z
log r3.w, r3.w
mul r3.w, r3.w, l(1.500000)
exp r3.w, r3.w
div r3.w, cb0[14].y, r3.w
mul r3.w, r3.w, cb0[14].x
max r0.z, r0.z, r3.w
add r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, cb0[373].x
mul_sat r0.y, r0.y, l(0.500000)
add r4.xyz, cb0[370].yzwy, -cb0[371].xyzx
mad r4.xyz, r0.yyyy, r4.xyzx, cb0[371].xyzx
add r5.xyz, r2.xyzx, -r15.xyzx
dp3 r0.y, r5.xyzx, r5.xyzx
sqrt r0.y, r0.y
mul r0.y, r0.w, r0.y
div r0.w, r3.z, r0.w
max r3.w, cb0[13].x, l(0.000000)
ftoi r4.w, cb0[320].z
iadd r4.w, r4.w, l(-1)
itof r4.w, r4.w
mov r5.z, l(0)
mov r6.xyzw, l(0,0,0,0)
mov r7.xyzw, l(0,0,0,0)
mov r8.xyz, r2.xyzx
mov r5.w, l(0)
mov r8.w, l(0)
mov r9.x, r0.y
mov r9.y, l(0)
loop
  ige r9.z, r9.y, r3.y
  breakc_nz r9.z
  add r10.xyz, r8.xyzx, cb0[16].xyzx
  mul r10.xyz, r10.xyzx, cb0[17].xyzx
  sample_l r10.xyzw, r10.xyzx, t2.xyzw, s0, l(1.000000)
  add r9.z, r10.w, l(-0.500000)
  mad r9.z, r9.z, r3.w, l(0.500000)
  dp2 r9.z, r9.zzzz, cb0[18].xxxx
  mov r10.x, r9.z
  mov r10.yz, l(0,0,0,0)
  mov r9.w, l(0)
  loop
    ige r10.w, r10.z, l(10)
    mov r9.w, l(0)
    breakc_nz r10.w
    eq r10.w, l(-1.000000), cb0[r10.z + 60].y
    if_nz r10.w
      mov r10.xy, r10.xxxx
      mov r9.w, l(-1)
      break
    endif
    ishl r11.x, r10.z, l(2)
    mul r11.yzw, r8.yyyy, cb0[r11.x + 21].xxyz
    mad r11.yzw, cb0[r11.x + 20].xxyz, r8.xxxx, r11.yyzw
    mad r11.yzw, cb0[r11.x + 22].xxyz, r8.zzzz, r11.yyzw
    add r11.xyz, r11.yzwy, cb0[r11.x + 23].xyzx
    lt r12.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r11.xyzx
    lt r13.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r11.w, r12.x, r13.x
    and r11.w, r12.y, r11.w
    and r11.w, r13.y, r11.w
    and r11.w, r12.z, r11.w
    and r11.w, r13.z, r11.w
    if_nz r11.w
      ge r11.w, l(3.000000), cb0[r10.z + 60].y
      if_nz r11.w
        max r11.w, r10.x, cb0[r10.z + 60].x
        add r12.x, r10.x, cb0[r10.z + 60].x
        min r12.y, r10.x, cb0[r10.z + 60].x
        eq r13.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r10.z + 60].yyyy
        add r12.z, r10.x, -cb0[r10.z + 60].x
        movc r12.z, r13.w, r12.z, r10.x
        movc r12.y, r13.z, r12.y, r12.z
        movc r12.x, r13.y, r12.x, r12.y
        movc r5.x, r13.x, r11.w, r12.x
      else
        ge r11.w, l(7.000000), cb0[r10.z + 60].y
        dp3 r11.y, r11.xyzx, r11.xyzx
        sqrt r11.y, r11.y
        lt r11.y, r11.y, l(0.500000)
        and r11.y, r11.y, r11.w
        if_nz r11.y
          max r11.y, r10.x, cb0[r10.z + 60].x
          add r11.w, r10.x, cb0[r10.z + 60].x
          min r12.x, r10.x, cb0[r10.z + 60].x
          eq r13.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r10.z + 60].yyyy
          add r12.y, r10.x, -cb0[r10.z + 60].x
          movc r12.y, r13.w, r12.y, r10.x
          movc r12.x, r13.z, r12.x, r12.y
          movc r11.w, r13.y, r11.w, r12.x
          movc r5.x, r13.x, r11.y, r11.w
        else
          ge r11.y, l(11.000000), cb0[r10.z + 60].y
          dp2 r11.x, r11.xzxx, r11.xzxx
          sqrt r11.x, r11.x
          lt r11.x, r11.x, l(0.500000)
          and r11.x, r11.x, r11.y
          max r11.y, r10.x, cb0[r10.z + 60].x
          add r11.z, r10.x, cb0[r10.z + 60].x
          min r11.w, r10.x, cb0[r10.z + 60].x
          eq r12.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r10.z + 60].yyyy
          add r13.x, r10.x, -cb0[r10.z + 60].x
          movc r12.w, r12.w, r13.x, r10.x
          movc r11.w, r12.z, r11.w, r12.w
          movc r11.z, r12.y, r11.z, r11.w
          movc r11.y, r12.x, r11.y, r11.z
          movc r5.x, r11.x, r11.y, r10.x
        endif
      endif
    else
      mov r5.x, r10.x
    endif
    iadd r5.y, r10.z, l(1)
    mov r10.xyz, r5.xzyx
    mov r9.w, r10.w
  endloop
  movc r5.x, r9.w, r10.y, r10.x
  mul r5.y, r5.x, cb0[18].w
  mad r8.w, r5.y, r3.z, r8.w
  mul r5.y, r8.w, l(-1.442695)
  exp r5.y, r5.y
  mul r5.x, r3.z, r5.x
  mul r5.x, r5.y, r5.x
  mul r5.x, r0.z, r5.x
  max r5.x, r5.x, l(0.000000)
  add r5.w, r5.x, r5.w
  mul r11.xyz, r4.xyzx, r5.xxxx
  dp3 r5.x, r11.xyzx, l(0.0396819152, 0.458021790, 0.00609653955, 0.000000)
  div r5.y, r9.x, cb0[320].x
  log r5.y, r5.y
  mul r5.y, r5.y, cb0[320].y
  exp r5.y, r5.y
  mul r9.z, r4.w, r5.y
  mov_sat r9.z, r9.z
  add r9.z, -r9.z, l(1.000000)
  mul_sat r11.x, r5.x, r9.z
  mad_sat r12.xyzw, r5.yyyy, r4.wwww, l(-1.000000, -2.000000, -3.000000, -4.000000)
  add r12.xyzw, -r12.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul_sat r12.xyzw, r5.xxxx, r12.wxyz
  mov r11.yzw, r12.yyzw
  add r6.xyzw, r6.xyzw, r11.xyzw
  mad_sat r11.xyz, r5.yyyy, r4.wwww, l(-5.000000, -6.000000, -7.000000, 0.000000)
  add r11.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul_sat r12.yzw, r5.xxxx, r11.xxyz
  add r7.xyzw, r7.xyzw, r12.xyzw
  mad r8.xyz, -r1.xyzx, r3.zzzz, r8.xyzx
  add r9.x, r0.w, r9.x
  iadd r9.y, r9.y, l(1)
endloop
mov o1.xyzw, r6.xyzw
mov o2.xyzw, r7.xyzw
lt r0.y, l(0.000000), r1.w
if_nz r0.y
  add r0.y, r2.w, r3.z
  mad r2.xyz, -r1.xyzx, r0.yyyy, r15.xyzx
  div r0.y, r1.w, r3.x
  mul r0.x, r0.x, r0.y
  mad r2.xyz, -r0.xxxx, r1.xyzx, r2.xyzx
  mov r5.z, l(0)
  mov r6.xyz, r2.xyzx
  mov r0.x, r5.w
  mov r0.w, r8.w
  mov r1.w, l(0)
  loop
    ige r2.w, r1.w, r3.y
    breakc_nz r2.w
    add r7.xyz, r6.xyzx, cb0[16].xyzx
    mul r7.xyz, r7.xyzx, cb0[17].xyzx
    sample_l r7.xyzw, r7.xyzx, t2.xyzw, s0, l(1.000000)
    add r2.w, r7.w, l(-0.500000)
    mad r2.w, r2.w, r3.w, l(0.500000)
    dp2 r2.w, r2.wwww, cb0[18].xxxx
    mov r7.x, r2.w
    mov r7.yz, l(0,0,0,0)
    mov r3.x, l(0)
    loop
      ige r3.z, r7.z, l(10)
      mov r3.x, l(0)
      breakc_nz r3.z
      eq r3.z, l(-1.000000), cb0[r7.z + 60].y
      if_nz r3.z
        mov r7.xy, r7.xxxx
        mov r3.x, l(-1)
        break
      endif
      ishl r4.w, r7.z, l(2)
      mul r8.xyz, r6.yyyy, cb0[r4.w + 21].xyzx
      mad r8.xyz, cb0[r4.w + 20].xyzx, r6.xxxx, r8.xyzx
      mad r8.xyz, cb0[r4.w + 22].xyzx, r6.zzzz, r8.xyzx
      add r8.xyz, r8.xyzx, cb0[r4.w + 23].xyzx
      lt r9.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r8.xyzx
      lt r10.xyz, r8.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      and r4.w, r9.x, r10.x
      and r4.w, r9.y, r4.w
      and r4.w, r10.y, r4.w
      and r4.w, r9.z, r4.w
      and r4.w, r10.z, r4.w
      if_nz r4.w
        ge r4.w, l(3.000000), cb0[r7.z + 60].y
        if_nz r4.w
          max r4.w, r7.x, cb0[r7.z + 60].x
          add r6.w, r7.x, cb0[r7.z + 60].x
          min r7.w, r7.x, cb0[r7.z + 60].x
          eq r9.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r7.z + 60].yyyy
          add r10.x, r7.x, -cb0[r7.z + 60].x
          movc r9.w, r9.w, r10.x, r7.x
          movc r7.w, r9.z, r7.w, r9.w
          movc r6.w, r9.y, r6.w, r7.w
          movc r5.x, r9.x, r4.w, r6.w
        else
          ge r4.w, l(7.000000), cb0[r7.z + 60].y
          dp3 r6.w, r8.xyzx, r8.xyzx
          sqrt r6.w, r6.w
          lt r6.w, r6.w, l(0.500000)
          and r4.w, r4.w, r6.w
          if_nz r4.w
            max r4.w, r7.x, cb0[r7.z + 60].x
            add r6.w, r7.x, cb0[r7.z + 60].x
            min r7.w, r7.x, cb0[r7.z + 60].x
            eq r9.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r7.z + 60].yyyy
            add r8.y, r7.x, -cb0[r7.z + 60].x
            movc r8.y, r9.w, r8.y, r7.x
            movc r7.w, r9.z, r7.w, r8.y
            movc r6.w, r9.y, r6.w, r7.w
            movc r5.x, r9.x, r4.w, r6.w
          else
            ge r4.w, l(11.000000), cb0[r7.z + 60].y
            dp2 r6.w, r8.xzxx, r8.xzxx
            sqrt r6.w, r6.w
            lt r6.w, r6.w, l(0.500000)
            and r4.w, r4.w, r6.w
            max r6.w, r7.x, cb0[r7.z + 60].x
            add r7.w, r7.x, cb0[r7.z + 60].x
            min r8.x, r7.x, cb0[r7.z + 60].x
            eq r9.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r7.z + 60].yyyy
            add r8.y, r7.x, -cb0[r7.z + 60].x
            movc r8.y, r9.w, r8.y, r7.x
            movc r8.x, r9.z, r8.x, r8.y
            movc r7.w, r9.y, r7.w, r8.x
            movc r6.w, r9.x, r6.w, r7.w
            movc r5.x, r4.w, r6.w, r7.x
          endif
        endif
      else
        mov r5.x, r7.x
      endif
      iadd r5.y, r7.z, l(1)
      mov r7.xyz, r5.xzyx
      mov r3.x, r3.z
    endloop
    movc r2.w, r3.x, r7.y, r7.x
    mul r3.z, r2.w, cb0[18].w
    mad r0.w, r3.z, r0.y, r0.w
    mul r3.z, r0.w, l(-1.442695)
    exp r3.z, r3.z
    mul r2.w, r0.y, r2.w
    mul r2.w, r3.z, r2.w
    mul r2.w, r0.z, r2.w
    max r2.w, r2.w, l(0.000000)
    add r0.x, r0.x, r2.w
    mad r6.xyz, -r1.xyzx, r0.yyyy, r6.xyzx
    iadd r1.w, r1.w, l(1)
  endloop
  mov r5.w, r0.x
  mov r8.w, r0.w
endif
mul r0.x, r8.w, l(-1.442695)
exp r0.x, r0.x
min r0.x, r0.x, l(1.000000)
mul o0.xyz, r4.xyzx, r5.wwww
add r0.y, -cb0[370].x, l(1.000000)
add r0.z, -r0.x, l(1.000000)
mad r0.x, r0.y, r0.z, r0.x
add r0.x, -r0.x, l(1.000000)
mul o0.w, r0.x, cb0[356].x
ret
// Approximately 0 instruction slots used