// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ea2baeb28a9ca47c-ps.txt
// 3DMigoto: ea2baeb28a9ca47c |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 141 3 10
//   undeciphered1a: 18
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT1" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 512
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogSkyColor]
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_SunPosition] 3
//   Vector 400 [_SunDir] 3
//   Vector 416 [_SunColor] 3
//   Vector 432 [_FogScatteringData]
//   Vector 448 [_FogScatteringData2]
//   Float 464 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:25:39 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 20
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r18.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ea2baeb28a9ca47c-ps.txt

mul r18.w, -r18.x, r18.y
mad r19.xyz, -r18.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r19.y
mov r1.xz, r19.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  add r4.xyz, r1.xyzx, -cb0[17].xyzx
  div r5.xyz, r3.xyzx, r0.wwww
  dp3 r1.w, r5.xyzx, r4.xyzx
  dp3 r2.y, r4.xyzx, r4.xyzx
  add r2.y, r2.y, -cb0[18].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.w, r2.y, l(0.000000)
  sqrt r3.w, r2.y
  movc r2.y, r2.w, r3.w, r2.y
  add r2.w, -r1.w, -r2.y
  max r2.w, r2.w, l(0.000000)
  min r3.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r3.w, r1.w
  add r1.w, -r2.w, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r1.xyz, r5.xyzx, r2.wwww, r1.xyzx
    log r2.y, r1.w
    mul r2.y, r2.y, l(0.693147182)
    max r2.y, r2.y, l(0.000000)
    mad r2.y, r2.y, cb0[15].x, l(0.100000)
    mul r2.y, r2.y, cb0[13].z
    mul_sat r4.x, r3.w, cb0[15].y
    mul r2.y, r2.y, r4.x
    add r2.w, -r2.w, r3.w
    max r2.y, r2.y, l(0.010000)
    mul r3.xyz, r2.yyyy, r3.xyzx
    div r3.xyz, r3.xyzx, r0.wwww
    div r0.w, r1.w, r2.y
    add r4.xyz, r1.xyzx, -cb0[20].xyzx
    add r6.xyz, r1.xyzx, -cb0[22].xyzx
    mul r7.xz, r3.xxzx, cb0[13].wwww
    mul r2.y, cb0[13].z, cb0[13].y
    div r7.y, r3.y, r2.y
    add r1.xz, r1.xxzx, cb0[14].xxzx
    mul r1.xz, r1.xxzx, cb0[13].wwww
    div r1.y, r1.y, r2.y
    add r8.xy, cb0[14].xzxx, cb0[17].xzxx
    add r8.zw, cb0[14].xxxz, r19.xxxz
    frc r2.y, r0.z
    mad r0.w, r2.y, cb0[29].x, r0.w
    ge r1.w, r1.w, r2.w
    and r1.w, r1.w, l(0x3f800000)
    mov r9.xyzw, l(0,0,0,0)
    mov r10.xyz, r4.xyzx
    mov r11.xyz, r6.xyzx
    mov r2.y, r0.w
    mov r13.xyz, r1.xyzx
    mov r12.xyzw, l(0,0,0,0)
    loop
      ge r2.w, l(1.000000), r2.y
      breakc_nz r2.w
      mad r14.xy, r8.xyxx, cb0[13].wwww, -r13.xzxx
      mul r14.xy, r14.xyxx, cb0[18].xxxx
      dp2 r2.w, r14.xyxx, r14.xyxx
      sample_l r14.xyzw, r13.xzxx, t1.xyzw, s1, l(0.000000)
      mad r2.w, r2.w, cb0[18].w, |r13.y|
      add r2.w, -r2.w, r14.w
      mad r15.xy, r8.zwzz, cb0[13].wwww, -r13.xzxx
      dp2 r3.w, r15.xyxx, r15.xyxx
      add r3.w, -r3.w, cb0[12].x
      max r3.w, r3.w, l(0.000000)
      mad r2.w, -r3.w, cb0[12].y, r2.w
      lt r3.w, l(0.000000), r2.w
      if_nz r3.w
        add r3.w, -r2.w, l(1.000000)
        mul r15.xyz, r3.wwww, cb0[11].xyzx
        mul r16.w, r2.w, l(0.400000)
        dp3 r2.w, r10.xyzx, r10.xyzx
        div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
        dp3 r3.w, r11.xyzx, r11.xyzx
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        mul r17.xyz, r2.wwww, cb0[21].xyzx
        mad r17.xyz, cb0[23].xyzx, r3.wwww, r17.xyzx
        mad r14.xyz, r17.xyzx, r16.wwww, r14.xyzx
        mul r14.xyz, r16.wwww, r14.xyzx
        mul r16.xyz, r14.xyzx, r15.xyzx
        add r2.w, -r12.w, l(1.000000)
        mad r14.xyzw, r16.xyzw, r2.wwww, r12.xyzw
        lt r2.w, l(0.990000), r14.w
        if_nz r2.w
          mov r9.xyzw, r16.xyzw
          mov r12.xyzw, r14.xyzw
          break
        endif
        mov r9.xyzw, r16.xyzw
        mov r12.xyzw, r14.xyzw
      endif
      add r10.xyz, r3.xyzx, r10.xyzx
      add r11.xyz, r3.xyzx, r11.xyzx
      add r2.y, r2.y, l(-1.000000)
      add r13.xyz, r7.xyzx, r13.xyzx
    endloop
    lt r0.w, r12.w, l(0.990000)
    and r0.w, r0.w, l(0x3f800000)
    add r1.x, -r12.w, l(1.000000)
    mul r1.y, r1.w, r2.y
    mul r0.w, r0.w, r1.x
    mul r0.w, r1.y, r0.w
    mad r1.xyzw, r9.xyzw, r0.wwww, r12.xyzw
    dp3 r0.w, r5.xyzx, cb0[25].xyzx
    mul r0.w, r0.w, cb0[28].w
    max r0.w, r0.w, l(0.000000)
    mul r0.w, r0.w, r0.w
    mul r0.w, r0.w, r0.w
    mul r0.w, r0.w, r0.w
    mul r0.w, r1.w, r0.w
    add r3.xyz, -r1.xyzx, cb0[26].xyzx
    mad r1.xyz, r0.wwww, r3.xyzx, r1.xyzx
    mul r1.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r2.y, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t2.xyzw, s0
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r1.xy, r0.xxxx, r2.xzxx
  mad r1.xy, r1.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r5.xyzw, r1.xyxx, t1.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r5.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r1.xyz, -r4.xyzx, cb0[19].xyzx
  mad r4.xyz, r0.xxxx, r1.xyzx, r4.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyw, r4.xyxz, r0.xxxx, r3.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[24].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[24].y
add r2.x, -v1.x, cb0[24].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[28].z, l(1.000000)
mul r0.z, r0.z, cb0[27].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[28].x
mov r3.x, cb0[27].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.zzzz, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t2.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[27].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[28].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[27].zzzz, r0.xywx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used