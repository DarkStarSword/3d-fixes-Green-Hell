// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e902e7471f9c00b7-ps.txt
// 3DMigoto: e902e7471f9c00b7 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 122 3 12
//   undeciphered1a: 11
//   Keywords { "FOG_DISTANCE_ON" "FOG_VOID_BOX" "FOG_USE_XY_PLANE" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 432
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 320 [_SunDir] 3
//   Vector 336 [_SunColor] 3
//   Vector 368 [_FogScatteringData2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:25:06 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[24], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r11.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e902e7471f9c00b7-ps.txt

mul r11.w, -r11.x, r11.y
mad r12.xyz, -r11.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.z, r0.y, r12.z
mov r1.xy, r12.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.z, l(0.000010)
lt r0.y, cb0[13].y, r1.z
lt r0.w, cb0[13].y, r0.x
and r0.y, r0.w, r0.y
lt r0.w, r1.z, r0.z
lt r1.w, r0.x, r0.z
and r0.w, r0.w, r1.w
or r0.y, r0.w, r0.y
if_z r0.y
  add r2.w, r2.z, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xywx
  dp3 r0.y, r2.xyzx, r2.xyzx
  dp2 r0.w, r2.xyxx, r2.xyxx
  sqrt r0.yw, r0.yyyw
  div r3.xy, r2.xyxx, r0.wwww
  div r0.w, r0.w, r2.z
  max r1.w, r0.z, r1.z
  min r4.z, r1.w, cb0[13].y
  add r1.w, r1.z, -r4.z
  mul r1.w, r0.w, r1.w
  mad r4.xy, -r3.xyxx, r1.wwww, r12.xyxx
  min r1.w, r0.y, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xyzx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.y, r1.x, r1.w
  if_nz r1.y
    lt r1.y, l(0.000000), r0.w
    lt r2.w, l(-0.500000), r0.x
    and r1.y, r1.y, r2.w
    lt r2.w, r0.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r2.w
    and r0.x, r0.z, r0.x
    movc r5.z, r1.y, cb0[13].y, r0.x
    add r0.x, -r1.z, r5.z
    mul r0.x, r0.x, r0.w
    mad r5.xy, -r3.xyxx, r0.xxxx, r12.xyxx
    add r0.xzw, r4.xxyz, -r5.xxyz
    dp3 r0.x, r0.xzwx, r0.xzwx
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r1.w
    min r0.x, r0.z, r0.x
    lt r0.w, l(0.000000), r0.x
    if_nz r0.w
      mul r3.xyz, r2.xyzx, r0.xxxx
      div r3.xyz, r3.xyzx, r0.yyyy
      add r3.xyz, r3.xyzx, r4.xyzx
      add r3.xyz, -r3.xyzx, cb0[17].xyzx
      mul r3.xyz, |r3.xyzx|, cb0[18].xyzx
      max r0.w, r3.y, r3.x
      max r0.w, r3.z, r0.w
      add r0.w, r0.w, l(-1.000000)
      mad_sat r0.w, cb0[18].w, r0.w, l(1.000000)
      lt r1.y, l(0.000000), r0.w
      if_nz r1.y
        log r1.y, r0.x
        mul r1.y, r1.y, l(0.693147182)
        max r1.y, r1.y, l(0.000000)
        mad r1.y, r1.y, cb0[15].x, l(0.100000)
        mul r1.y, r1.y, cb0[13].z
        mul_sat r1.z, r1.w, cb0[15].y
        mul r1.y, r1.z, r1.y
        max r1.y, r1.y, l(0.010000)
        mul r3.xyz, r1.yyyy, r2.xyzx
        div r3.xyz, r3.xyzx, r0.yyyy
        div r1.y, r0.x, r1.y
        mul r5.xy, r3.xyxx, cb0[13].wwww
        mul r1.z, cb0[13].z, cb0[13].y
        div r5.z, r3.z, r1.z
        add r3.xy, r4.xyxx, cb0[14].xzxx
        mul r3.xy, r3.xyxx, cb0[13].wwww
        div r1.z, r4.z, r1.z
        add r3.zw, cb0[14].xxxy, r12.xxxy
        ge r0.x, r0.x, r0.z
        and r0.x, r0.x, l(0x3f800000)
        mov r4.xyzw, l(0,0,0,0)
        mov r7.xy, r3.xyxx
        mov r0.z, r1.y
        mov r7.z, r1.z
        mov r6.xyzw, l(0,0,0,0)
        loop
          ge r1.w, l(1.000000), r0.z
          breakc_nz r1.w
          sample_l r8.xyzw, r7.xyxx, t2.xyzw, s0, l(0.000000)
          add r1.w, -|r7.z|, r8.w
          mad r9.xy, r3.zwzz, cb0[13].wwww, -r7.xyxx
          dp2 r2.w, r9.xyxx, r9.xyxx
          add r2.w, -r2.w, cb0[12].x
          max r2.w, r2.w, l(0.000000)
          mad r1.w, -r2.w, cb0[12].y, r1.w
          lt r2.w, l(0.000000), r1.w
          if_nz r2.w
            add r2.w, -r1.w, l(1.000000)
            mul r9.xyz, r2.wwww, cb0[11].xyzx
            mul r10.w, r1.w, l(0.400000)
            mul r8.xyz, r8.xyzx, r10.wwww
            mul r10.xyz, r8.xyzx, r9.xyzx
            add r1.w, -r6.w, l(1.000000)
            mad r8.xyzw, r10.xyzw, r1.wwww, r6.xyzw
            lt r1.w, l(0.990000), r8.w
            if_nz r1.w
              mov r4.xyzw, r10.xyzw
              mov r6.xyzw, r8.xyzw
              break
            endif
            mov r4.xyzw, r10.xyzw
            mov r6.xyzw, r8.xyzw
          endif
          add r0.z, r0.z, l(-1.000000)
          add r7.xyz, r5.xyzx, r7.xyzx
        endloop
        lt r1.y, r6.w, l(0.990000)
        and r1.y, r1.y, l(0x3f800000)
        add r1.z, -r6.w, l(1.000000)
        mul r0.x, r0.z, r0.x
        mul r0.z, r1.z, r1.y
        mul r0.x, r0.x, r0.z
        mad r3.xyzw, r4.xyzw, r0.xxxx, r6.xyzw
        div r0.xyz, r2.xyzx, r0.yyyy
        dp3 r0.x, r0.xyzx, cb0[20].xyzx
        mul r0.x, r0.x, cb0[23].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r3.w, r0.x
        add r1.yzw, -r3.xxyz, cb0[21].xxyz
        mad r3.xyz, r0.xxxx, r1.yzwy, r3.xyzx
        mul r2.xyzw, r3.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r1.xyzw, r0.xxxx, r2.xyzw
        mul o0.xyzw, r0.wwww, r1.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used