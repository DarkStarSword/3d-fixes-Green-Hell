// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 08242a0c394a9078-ps.txt
// 3DMigoto: 08242a0c394a9078 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 99 3 8
//   undeciphered1a: 12
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_USE_XY_PLANE" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 432
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_SunDir] 3
//   Vector 336 [_SunColor] 3
//   Vector 368 [_FogScatteringData2]
//   Float 384 [_Jitter]
//   Float 400 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:27:12 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[26], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 14
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r12.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 08242a0c394a9078-ps.txt

mul r12.w, -r12.x, r12.y
mad r13.xyz, -r12.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
sample r2.xyzw, v1.zwzz, t1.xyzw, s2
mad r1.y, cb1[7].x, r2.x, cb1[7].y
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
min r1.x, r1.y, r1.x
add r2.z, -cb0[13].x, r13.z
mov r2.xy, r13.xyxx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.z, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.zwzz
and r3.x, r3.y, r3.x
lt r3.y, r2.z, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.z, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xywx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[17].xyzx
  div r4.xyz, r1.xyzx, r1.wwww
  dp3 r2.w, r4.xyzx, r3.xyzx
  dp3 r3.x, r3.xyzx, r3.xyzx
  add r3.x, r3.x, -cb0[18].y
  mad r3.x, r2.w, r2.w, -r3.x
  ge r3.y, r3.x, l(0.000000)
  sqrt r3.z, r3.x
  movc r3.x, r3.y, r3.z, r3.x
  add r3.y, -r2.w, -r3.x
  max r3.y, r3.y, l(0.000000)
  min r3.z, r1.w, cb0[12].z
  add r2.w, -r2.w, r3.x
  min r2.w, r3.z, r2.w
  add r2.w, -r3.y, r2.w
  ge r3.x, r2.w, l(0.000000)
  if_nz r3.x
    mad r2.xyz, r4.xyzx, r3.yyyy, r2.xyzx
    log r3.x, r2.w
    mul r3.x, r3.x, l(0.693147182)
    max r3.x, r3.x, l(0.000000)
    mad r3.x, r3.x, cb0[15].x, l(0.100000)
    mul r3.x, r3.x, cb0[13].z
    mul_sat r3.w, r3.z, cb0[15].y
    mul r3.x, r3.w, r3.x
    add r3.y, -r3.y, r3.z
    max r3.x, r3.x, l(0.010000)
    mul r1.xyz, r1.xyzx, r3.xxxx
    div r1.xyz, r1.xyzx, r1.wwww
    div r1.w, r2.w, r3.x
    mul r5.xy, r1.xyxx, cb0[13].wwww
    mul r1.x, cb0[13].z, cb0[13].y
    div r5.z, r1.z, r1.x
    add r1.yz, r2.xxyx, cb0[14].xxzx
    mul r1.yz, r1.yyzy, cb0[13].wwww
    div r1.x, r2.z, r1.x
    add r2.xy, cb0[14].xyxx, cb0[17].xyxx
    add r3.xz, cb0[14].xxyx, r13.xxyx
    frc r2.z, cb0[25].x
    mad r1.w, r2.z, cb0[24].x, r1.w
    ge r2.z, r2.w, r3.y
    and r2.z, r2.z, l(0x3f800000)
    mov r6.xyzw, l(0,0,0,0)
    mov r2.w, r1.w
    mov r8.xyz, r1.yzxy
    mov r7.xyzw, l(0,0,0,0)
    loop
      ge r3.y, l(1.000000), r2.w
      breakc_nz r3.y
      mad r3.yw, r2.xxxy, cb0[13].wwww, -r8.xxxy
      mul r3.yw, r3.yyyw, cb0[18].xxxx
      dp2 r3.y, r3.ywyy, r3.ywyy
      sample_l r9.xyzw, r8.xyxx, t2.xyzw, s0, l(0.000000)
      mad r3.y, r3.y, cb0[18].w, |r8.z|
      add r3.y, -r3.y, r9.w
      mad r10.xy, r3.xzxx, cb0[13].wwww, -r8.xyxx
      dp2 r3.w, r10.xyxx, r10.xyxx
      add r3.w, -r3.w, cb0[12].x
      max r3.w, r3.w, l(0.000000)
      mad r3.y, -r3.w, cb0[12].y, r3.y
      lt r3.w, l(0.000000), r3.y
      if_nz r3.w
        add r3.w, -r3.y, l(1.000000)
        mul r10.xyz, r3.wwww, cb0[11].xyzx
        mul r11.w, r3.y, l(0.400000)
        mul r9.xyz, r9.xyzx, r11.wwww
        mul r11.xyz, r9.xyzx, r10.xyzx
        add r3.y, -r7.w, l(1.000000)
        mad r9.xyzw, r11.xyzw, r3.yyyy, r7.xyzw
        lt r3.y, l(0.990000), r9.w
        if_nz r3.y
          mov r6.xyzw, r11.xyzw
          mov r7.xyzw, r9.xyzw
          break
        endif
        mov r6.xyzw, r11.xyzw
        mov r7.xyzw, r9.xyzw
      endif
      add r2.w, r2.w, l(-1.000000)
      add r8.xyz, r5.xyzx, r8.xyzx
    endloop
    lt r1.x, r7.w, l(0.990000)
    and r1.x, r1.x, l(0x3f800000)
    add r1.y, -r7.w, l(1.000000)
    mul r1.z, r2.w, r2.z
    mul r1.x, r1.y, r1.x
    mul r1.x, r1.z, r1.x
    mad r1.xyzw, r6.xyzw, r1.xxxx, r7.xyzw
    dp3 r2.x, r4.xyzx, cb0[20].xyzx
    mul r2.x, r2.x, cb0[23].w
    max r2.x, r2.x, l(0.000000)
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.x, r2.x
    mul r2.x, r1.w, r2.x
    add r2.yzw, -r1.xxyz, cb0[21].xxyz
    mad r1.xyz, r2.xxxx, r2.yzwy, r1.xyzx
    mul o0.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used