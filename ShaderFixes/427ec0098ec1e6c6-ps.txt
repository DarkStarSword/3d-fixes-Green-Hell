// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 427ec0098ec1e6c6-ps.txt
// 3DMigoto: 427ec0098ec1e6c6 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 130 3 8
//   undeciphered1a: 25
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_POINT_LIGHT5" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 624
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 368 [_FogPointLightPosition2] 3
//   Vector 384 [_FogPointLightColor2] 3
//   Vector 400 [_FogPointLightPosition3] 3
//   Vector 416 [_FogPointLightColor3] 3
//   Vector 432 [_FogPointLightPosition4] 3
//   Vector 448 [_FogPointLightColor4] 3
//   Vector 464 [_FogPointLightPosition5] 3
//   Vector 480 [_FogPointLightColor5] 3
//   Vector 512 [_SunDir] 3
//   Vector 528 [_SunColor] 3
//   Vector 560 [_FogScatteringData2]
//   Float 576 [_Jitter]
//   Float 592 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:54:50 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[38], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 27
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r25.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 427ec0098ec1e6c6-ps.txt

mul r25.w, -r25.x, r25.y
mad r26.xyz, -r25.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
sample r2.xyzw, v1.zwzz, t1.xyzw, s2
mad r1.y, cb1[7].x, r2.x, cb1[7].y
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
min r1.x, r1.y, r1.x
add r2.y, -cb0[13].x, r26.y
mov r2.xz, r26.xxzx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.y, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.ywyy
and r3.x, r3.y, r3.x
lt r3.y, r2.y, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.y, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xwzx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[17].xyzx
  div r4.xyz, r1.xyzx, r1.wwww
  dp3 r2.w, r4.xyzx, r3.xyzx
  dp3 r3.x, r3.xyzx, r3.xyzx
  add r3.x, r3.x, -cb0[18].y
  mad r3.x, r2.w, r2.w, -r3.x
  ge r3.y, r3.x, l(0.000000)
  sqrt r3.z, r3.x
  movc r3.x, r3.y, r3.z, r3.x
  add r3.y, -r2.w, -r3.x
  max r3.y, r3.y, l(0.000000)
  min r3.z, r1.w, cb0[12].z
  add r2.w, -r2.w, r3.x
  min r2.w, r3.z, r2.w
  add r2.w, -r3.y, r2.w
  ge r3.x, r2.w, l(0.000000)
  if_nz r3.x
    mad r2.xyz, r4.xyzx, r3.yyyy, r2.xyzx
    log r3.x, r2.w
    mul r3.x, r3.x, l(0.693147182)
    max r3.x, r3.x, l(0.000000)
    mad r3.x, r3.x, cb0[15].x, l(0.100000)
    mul r3.x, r3.x, cb0[13].z
    mul_sat r3.w, r3.z, cb0[15].y
    mul r3.x, r3.w, r3.x
    add r3.y, -r3.y, r3.z
    max r3.x, r3.x, l(0.010000)
    mul r1.xyz, r1.xyzx, r3.xxxx
    div r1.xyz, r1.xyzx, r1.wwww
    div r1.w, r2.w, r3.x
    add r3.xzw, r2.xxyz, -cb0[19].xxyz
    add r5.xyz, r2.xyzx, -cb0[21].xyzx
    add r6.xyz, r2.xyzx, -cb0[23].xyzx
    add r7.xyz, r2.xyzx, -cb0[25].xyzx
    add r8.xyz, r2.xyzx, -cb0[27].xyzx
    add r9.xyz, r2.xyzx, -cb0[29].xyzx
    mul r10.xz, r1.xxzx, cb0[13].wwww
    mul r4.w, cb0[13].z, cb0[13].y
    div r10.y, r1.y, r4.w
    add r2.xz, r2.xxzx, cb0[14].xxzx
    mul r2.xz, r2.xxzx, cb0[13].wwww
    div r2.y, r2.y, r4.w
    add r11.xy, cb0[14].xzxx, cb0[17].xzxx
    add r11.zw, cb0[14].xxxz, r26.xxxz
    frc r4.w, cb0[37].x
    mad r1.w, r4.w, cb0[36].x, r1.w
    ge r2.w, r2.w, r3.y
    and r2.w, r2.w, l(0x3f800000)
    mov r12.xyzw, l(0,0,0,0)
    mov r13.xyz, r3.xzwx
    mov r14.xyz, r5.xyzx
    mov r15.xyz, r6.xyzx
    mov r16.xyz, r7.xyzx
    mov r17.xyz, r8.xyzx
    mov r18.xyz, r9.xyzx
    mov r3.y, r1.w
    mov r20.xyz, r2.xyzx
    mov r19.xyzw, l(0,0,0,0)
    loop
      ge r4.w, l(1.000000), r3.y
      breakc_nz r4.w
      mad r21.xy, r11.xyxx, cb0[13].wwww, -r20.xzxx
      mul r21.xy, r21.xyxx, cb0[18].xxxx
      dp2 r4.w, r21.xyxx, r21.xyxx
      sample_l r21.xyzw, r20.xzxx, t2.xyzw, s0, l(0.000000)
      mad r4.w, r4.w, cb0[18].w, |r20.y|
      add r4.w, -r4.w, r21.w
      mad r22.xy, r11.zwzz, cb0[13].wwww, -r20.xzxx
      dp2 r5.w, r22.xyxx, r22.xyxx
      add r5.w, -r5.w, cb0[12].x
      max r5.w, r5.w, l(0.000000)
      mad r4.w, -r5.w, cb0[12].y, r4.w
      lt r5.w, l(0.000000), r4.w
      if_nz r5.w
        add r5.w, -r4.w, l(1.000000)
        mul r22.xyz, r5.wwww, cb0[11].xyzx
        mul r23.w, r4.w, l(0.400000)
        dp3 r4.w, r13.xyzx, r13.xyzx
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        dp3 r5.w, r14.xyzx, r14.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        dp3 r6.w, r15.xyzx, r15.xyzx
        div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
        dp3 r7.w, r16.xyzx, r16.xyzx
        div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
        dp3 r8.w, r17.xyzx, r17.xyzx
        div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
        dp3 r9.w, r18.xyzx, r18.xyzx
        div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
        mul r24.xyz, r8.wwww, cb0[28].xyzx
        mad r24.xyz, cb0[30].xyzx, r9.wwww, r24.xyzx
        mad r24.xyz, cb0[26].xyzx, r7.wwww, r24.xyzx
        mad r24.xyz, cb0[24].xyzx, r6.wwww, r24.xyzx
        mad r24.xyz, cb0[22].xyzx, r5.wwww, r24.xyzx
        mad r24.xyz, cb0[20].xyzx, r4.wwww, r24.xyzx
        mad r21.xyz, r24.xyzx, r23.wwww, r21.xyzx
        mul r21.xyz, r23.wwww, r21.xyzx
        mul r23.xyz, r21.xyzx, r22.xyzx
        add r4.w, -r19.w, l(1.000000)
        mad r21.xyzw, r23.xyzw, r4.wwww, r19.xyzw
        lt r4.w, l(0.990000), r21.w
        if_nz r4.w
          mov r12.xyzw, r23.xyzw
          mov r19.xyzw, r21.xyzw
          break
        endif
        mov r12.xyzw, r23.xyzw
        mov r19.xyzw, r21.xyzw
      endif
      add r13.xyz, r1.xyzx, r13.xyzx
      add r14.xyz, r1.xyzx, r14.xyzx
      add r15.xyz, r1.xyzx, r15.xyzx
      add r16.xyz, r1.xyzx, r16.xyzx
      add r17.xyz, r1.xyzx, r17.xyzx
      add r18.xyz, r1.xyzx, r18.xyzx
      add r3.y, r3.y, l(-1.000000)
      add r20.xyz, r10.xyzx, r20.xyzx
    endloop
    lt r1.x, r19.w, l(0.990000)
    and r1.x, r1.x, l(0x3f800000)
    add r1.y, -r19.w, l(1.000000)
    mul r1.z, r2.w, r3.y
    mul r1.x, r1.y, r1.x
    mul r1.x, r1.z, r1.x
    mad r1.xyzw, r12.xyzw, r1.xxxx, r19.xyzw
    dp3 r2.x, r4.xyzx, cb0[32].xyzx
    mul r2.x, r2.x, cb0[35].w
    max r2.x, r2.x, l(0.000000)
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.x, r2.x
    mul r2.x, r1.w, r2.x
    add r2.yzw, -r1.xxyz, cb0[33].xxyz
    mad r1.xyz, r2.xxxx, r2.yzwy, r1.xyzx
    mul o0.xyzw, r1.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used