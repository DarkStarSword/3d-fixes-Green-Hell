// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 155a511eae739537-ps.txt
// 3DMigoto: 155a511eae739537 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 157 2 10
//   undeciphered1a: 20
//   Keywords { "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 576
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogPointLightPosition0] 3
//   Vector 288 [_FogPointLightColor0] 3
//   Vector 304 [_FogPointLightPosition1] 3
//   Vector 320 [_FogPointLightColor1] 3
//   Vector 352 [_SunDir] 3
//   Vector 368 [_SunColor] 3
//   Vector 400 [_FogScatteringData2]
//   Vector 496 [_VolumetricFogSunWorldPos]
//   Vector 512 [_VolumetricFogSunShadowsData]
//   Float 528 [_Jitter]
//   Matrix 432 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:33:32 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[34], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 22
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r20.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 155a511eae739537-ps.txt

mul r20.w, -r20.x, r20.y
mad r21.xyz, -r20.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mov r1.yz, -cb0[13].xxyx
add r2.z, r1.y, r21.z
mov r2.xy, r21.xyxx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.x, r3.z, l(0.000010)
lt r1.y, cb0[13].y, r2.z
lt r1.w, cb0[13].y, r1.x
and r1.y, r1.w, r1.y
lt r1.w, r2.z, r1.z
lt r2.w, r1.x, r1.z
and r1.w, r1.w, r2.w
or r1.y, r1.w, r1.y
if_z r1.y
  add r3.w, r3.z, l(0.000010)
  add r3.xyz, -r2.xyzx, r3.xywx
  dp3 r1.y, r3.xyzx, r3.xyzx
  dp2 r1.w, r3.xyxx, r3.xyxx
  sqrt r1.yw, r1.yyyw
  div r4.xy, r3.xyxx, r1.wwww
  div r1.w, r1.w, r3.z
  max r2.w, r1.z, r2.z
  min r5.z, r2.w, cb0[13].y
  add r2.w, r2.z, -r5.z
  mul r2.w, r1.w, r2.w
  mad r5.xy, -r4.xyxx, r2.wwww, r21.xyxx
  min r2.w, r1.y, cb0[12].z
  add r6.xyz, -r2.xyzx, r5.xyzx
  dp3 r2.x, r6.xyzx, r6.xyzx
  sqrt r2.x, r2.x
  lt r2.y, r2.x, r2.w
  if_nz r2.y
    lt r2.y, l(0.000000), r1.w
    lt r3.w, l(-0.500000), r1.x
    and r2.y, r2.y, r3.w
    lt r3.w, r1.w, l(0.000000)
    lt r1.x, r1.x, l(0.500000)
    and r1.x, r1.x, r3.w
    and r1.x, r1.z, r1.x
    movc r6.z, r2.y, cb0[13].y, r1.x
    add r1.x, -r2.z, r6.z
    mul r1.x, r1.x, r1.w
    mad r6.xy, -r4.xyxx, r1.xxxx, r21.xyxx
    add r1.xzw, r5.xxyz, -r6.xxyz
    dp3 r1.x, r1.xzwx, r1.xzwx
    sqrt r1.x, r1.x
    add r1.z, -r2.x, r2.w
    min r1.x, r1.z, r1.x
    lt r1.w, l(0.000000), r1.x
    if_nz r1.w
      mul r2.yz, v1.xxyx, cb1[6].xxyx
      dp2 r1.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.yzyy
      frc r1.w, r1.w
      add r1.w, r1.w, l(-0.500000)
      log r2.y, r1.x
      mul r2.y, r2.y, l(0.693147182)
      max r2.y, r2.y, l(0.000000)
      mad r2.y, r2.y, cb0[15].x, l(0.100000)
      mul r2.y, r2.y, cb0[13].z
      mul_sat r2.z, r2.w, cb0[15].y
      mul r2.y, r2.z, r2.y
      max r2.y, r2.y, l(0.010000)
      mul r4.xyz, r2.yyyy, r3.xyzx
      div r4.xyz, r4.xyzx, r1.yyyy
      div r2.y, r1.x, r2.y
      add r6.xyz, r5.xyzx, -cb0[17].xyzx
      add r7.xyz, r5.xyzx, -cb0[19].xyzx
      mul r8.xy, r4.xyxx, cb0[13].wwww
      mul r2.z, cb0[13].z, cb0[13].y
      div r8.z, r4.z, r2.z
      add r9.xy, r5.xyxx, cb0[14].xzxx
      mul r9.xy, r9.xyxx, cb0[13].wwww
      div r2.z, r5.z, r2.z
      frc r2.w, r1.w
      mad r2.y, r2.w, cb0[33].x, r2.y
      add r5.w, r5.z, cb0[13].x
      mul r10.xyz, r5.yyyy, cb0[28].xywx
      mad r10.xyz, cb0[27].xywx, r5.xxxx, r10.xyzx
      mad r10.xyz, cb0[29].xywx, r5.wwww, r10.xyzx
      add r10.xyz, r10.xyzx, cb0[30].xywx
      div r9.zw, r10.xxxy, r10.zzzz
      mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r1.w, r1.w, cb0[32].y, l(1.000000)
      mul r1.w, r1.w, r1.x
      mul r10.xyz, r3.xyzx, r1.wwww
      div r10.xyz, r10.xyzx, r1.yyyy
      add r10.xyz, r5.xywx, r10.xyzx
      mul r11.xyz, r10.yyyy, cb0[28].xywx
      mad r11.xyz, cb0[27].xywx, r10.xxxx, r11.xyzx
      mad r11.xyz, cb0[29].xywx, r10.zzzz, r11.xyzx
      add r11.xyz, r11.xyzx, cb0[30].xywx
      div r11.xy, r11.xyxx, r11.zzzz
      mad r11.xy, r11.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r1.w, -r2.x, cb0[31].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[32].x
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
      ge r1.x, r1.x, r1.z
      add r9.zw, r9.zzzw, -r11.xxxy
      add r5.xyz, r5.xywx, -r10.xyzx
      mov r12.xyzw, l(0,0,0,0)
      mov r13.xyz, r6.xyzx
      mov r14.xyz, r7.xyzx
      mov r16.xy, r9.xyxx
      mov r1.z, r2.y
      mov r16.z, r2.z
      mov r15.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r1.z
        breakc_nz r3.w
        sample_l r17.xyzw, r16.xyxx, t1.xyzw, s0, l(0.000000)
        add r3.w, -|r16.z|, r17.w
        lt r4.w, l(0.000000), r3.w
        if_nz r4.w
          add r4.w, -r3.w, l(1.000000)
          mul r18.xyz, r4.wwww, cb0[11].xyzx
          mul r18.w, r3.w, l(0.400000)
          mul r3.w, r2.w, r1.z
          mad r11.zw, r3.wwww, r9.zzzw, r11.xxxy
          sample_l r19.xyzw, r11.zwzz, t2.xyzw, s2, l(0.000000)
          dp4 r4.w, r19.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mad r19.xyz, r3.wwww, r5.xyzx, r10.xyzx
          add r19.xyz, r19.xyzx, -cb0[31].xyzx
          dp3 r3.w, r19.xyzx, r19.xyzx
          sqrt r3.w, r3.w
          add_sat r3.w, -r3.w, r4.w
          mul r4.w, r1.w, r15.w
          add r3.w, r3.w, l(-1.000000)
          mad r4.w, r4.w, r3.w, l(1.000000)
          mad r3.w, cb0[32].z, r3.w, l(1.000000)
          mul r18.xyzw, r3.wwww, r18.xyzw
          dp3 r3.w, r13.xyzx, r13.xyzx
          div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
          dp3 r5.w, r14.xyzx, r14.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mul r19.xyz, r3.wwww, cb0[18].xyzx
          mad r19.xyz, cb0[20].xyzx, r5.wwww, r19.xyzx
          mul r19.xyz, r18.wwww, r19.xyzx
          mad r17.xyz, r17.xyzx, r4.wwww, r19.xyzx
          mul r17.xyz, r18.wwww, r17.xyzx
          mul r18.xyz, r17.xyzx, r18.xyzx
          add r3.w, -r15.w, l(1.000000)
          mad r17.xyzw, r18.xyzw, r3.wwww, r15.xyzw
          lt r3.w, l(0.990000), r17.w
          if_nz r3.w
            mov r12.xyzw, r18.xyzw
            mov r15.xyzw, r17.xyzw
            break
          endif
          mov r12.xyzw, r18.xyzw
          mov r15.xyzw, r17.xyzw
        endif
        add r13.xyz, r4.xyzx, r13.xyzx
        add r14.xyz, r4.xyzx, r14.xyzx
        add r1.z, r1.z, l(-1.000000)
        add r16.xyz, r8.xyzx, r16.xyzx
      endloop
      lt r1.w, r15.w, l(0.990000)
      and r1.xw, r1.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
      add r2.y, -r15.w, l(1.000000)
      mul r1.x, r1.z, r1.x
      mul r1.z, r1.w, r2.y
      mul r1.x, r1.x, r1.z
      mad r4.xyzw, r12.xyzw, r1.xxxx, r15.xyzw
      div r1.xyz, r3.xyzx, r1.yyyy
      dp3 r1.x, r1.xyzx, cb0[22].xyzx
      mul r1.x, r1.x, cb0[25].w
      max r1.x, r1.x, l(0.000000)
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r1.x, r1.x
      mul r1.x, r4.w, r1.x
      add r1.yzw, -r4.xxyz, cb0[23].xxyz
      mad r4.xyz, r1.xxxx, r1.yzwy, r4.xyzx
      mul r1.xyzw, r4.xyzw, cb0[10].wwww
      add r2.x, -r2.x, cb0[12].z
      div_sat r2.x, r2.x, cb0[12].w
      mul r2.x, r2.x, r2.x
      mul o0.xyzw, r1.xyzw, r2.xxxx
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used