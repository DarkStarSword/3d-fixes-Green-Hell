// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f5aec897436bbe10-ps.txt
// 3DMigoto: f5aec897436bbe10 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 155 3 8
//   undeciphered1a: 24
//   Keywords { "FOG_AREA_SPHERE" "FOG_POINT_LIGHT4" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 624
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 368 [_FogPointLightPosition2] 3
//   Vector 384 [_FogPointLightColor2] 3
//   Vector 400 [_FogPointLightPosition3] 3
//   Vector 416 [_FogPointLightColor3] 3
//   Vector 432 [_FogPointLightPosition4] 3
//   Vector 448 [_FogPointLightColor4] 3
//   Vector 544 [_VolumetricFogSunWorldPos]
//   Vector 560 [_VolumetricFogSunShadowsData]
//   Float 576 [_Jitter]
//   Matrix 480 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 4 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:30:55 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[37], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 26
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r24.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed f5aec897436bbe10-ps.txt

mul r24.w, -r24.x, r24.y
mad r25.xyz, -r24.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r25.y
mov r1.xz, r25.xxzx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.y, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.yywy
and r2.y, r2.z, r2.y
lt r2.z, r1.y, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.y, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xwzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[17].xxyz
  div r3.xyz, r0.xyzx, r0.wwww
  dp3 r1.w, r3.xyzx, r2.yzwy
  dp3 r2.y, r2.yzwy, r2.yzwy
  add r2.y, r2.y, -cb0[18].y
  mad r2.y, r1.w, r1.w, -r2.y
  ge r2.z, r2.y, l(0.000000)
  sqrt r2.w, r2.y
  movc r2.y, r2.z, r2.w, r2.y
  add r2.z, -r1.w, -r2.y
  max r2.z, r2.z, l(0.000000)
  min r2.w, r0.w, cb0[12].z
  add r1.w, -r1.w, r2.y
  min r1.w, r2.w, r1.w
  add r1.w, -r2.z, r1.w
  ge r2.y, r1.w, l(0.000000)
  if_nz r2.y
    mad r3.xyz, r3.xyzx, r2.zzzz, r1.xyzx
    log r1.x, r1.w
    mul r1.x, r1.x, l(0.693147182)
    max r1.x, r1.x, l(0.000000)
    mad r1.x, r1.x, cb0[15].x, l(0.100000)
    mul r1.x, r1.x, cb0[13].z
    mul_sat r1.y, r2.w, cb0[15].y
    mul r1.x, r1.y, r1.x
    add r1.y, -r2.z, r2.w
    max r1.x, r1.x, l(0.010000)
    mul r4.xyz, r0.xyzx, r1.xxxx
    div r4.xyz, r4.xyzx, r0.wwww
    div r1.x, r1.w, r1.x
    add r5.xyz, r3.xyzx, -cb0[19].xyzx
    add r6.xyz, r3.xyzx, -cb0[21].xyzx
    add r7.xyz, r3.xyzx, -cb0[23].xyzx
    add r8.xyz, r3.xyzx, -cb0[25].xyzx
    add r9.xyz, r3.xyzx, -cb0[27].xyzx
    mul r10.xz, r4.xxzx, cb0[13].wwww
    mul r1.z, cb0[13].z, cb0[13].y
    div r10.y, r4.y, r1.z
    add r2.yw, r3.xxxz, cb0[14].xxxz
    mul r2.yw, r2.yyyw, cb0[13].wwww
    div r1.z, r3.y, r1.z
    add r11.xy, cb0[14].xzxx, cb0[17].xzxx
    frc r4.w, r2.x
    mad r1.x, r4.w, cb0[36].x, r1.x
    add r3.w, r3.y, cb0[13].x
    mul r12.xyz, r3.wwww, cb0[31].xywx
    mad r12.xyz, cb0[30].xywx, r3.xxxx, r12.xyzx
    mad r12.xyz, cb0[32].xywx, r3.zzzz, r12.xyzx
    add r12.xyz, r12.xyzx, cb0[33].xywx
    div r11.zw, r12.xxxy, r12.zzzz
    mad r11.zw, r11.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    mad r3.y, r2.x, cb0[35].y, l(1.000000)
    mul r3.y, r1.w, r3.y
    mul r0.xyz, r0.xyzx, r3.yyyy
    div r0.xyz, r0.xyzx, r0.wwww
    add r0.xyz, r0.xyzx, r3.xwzx
    mul r12.xyz, r0.yyyy, cb0[31].xywx
    mad r12.xyz, cb0[30].xywx, r0.xxxx, r12.xyzx
    mad r12.xyz, cb0[32].xywx, r0.zzzz, r12.xyzx
    add r12.xyz, r12.xyzx, cb0[33].xywx
    div r12.xy, r12.xyxx, r12.zzzz
    mad r12.xy, r12.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r0.w, -r2.z, cb0[34].w
    mul_sat r0.w, r0.w, l(0.0285714287)
    mul r0.w, r0.w, cb0[35].x
    div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
    ge r1.y, r1.w, r1.y
    and r1.y, r1.y, l(0x3f800000)
    add r11.zw, r11.zzzw, -r12.xxxy
    add r3.xyz, -r0.xyzx, r3.xwzx
    mov r13.xyzw, l(0,0,0,0)
    mov r14.xyz, r5.xyzx
    mov r15.xyz, r6.xyzx
    mov r16.xyz, r7.xyzx
    mov r17.xyz, r8.xyzx
    mov r18.xyz, r9.xyzx
    mov r20.xz, r2.yywy
    mov r1.w, r1.x
    mov r20.y, r1.z
    mov r19.xyzw, l(0,0,0,0)
    loop
      ge r3.w, l(1.000000), r1.w
      breakc_nz r3.w
      mad r12.zw, r11.xxxy, cb0[13].wwww, -r20.xxxz
      mul r12.zw, r12.zzzw, cb0[18].xxxx
      dp2 r3.w, r12.zwzz, r12.zwzz
      sample_l r21.xyzw, r20.xzxx, t2.xyzw, s1, l(0.000000)
      mad r3.w, r3.w, cb0[18].w, |r20.y|
      add r3.w, -r3.w, r21.w
      lt r4.w, l(0.000000), r3.w
      if_nz r4.w
        add r4.w, -r3.w, l(1.000000)
        mul r22.xyz, r4.wwww, cb0[11].xyzx
        mul r22.w, r3.w, l(0.400000)
        mul r3.w, r2.z, r1.w
        mad r12.zw, r3.wwww, r11.zzzw, r12.xxxy
        sample_l r23.xyzw, r12.zwzz, t3.xyzw, s4, l(0.000000)
        dp4 r4.w, r23.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        mad r23.xyz, r3.wwww, r3.xyzx, r0.xyzx
        add r23.xyz, r23.xyzx, -cb0[34].xyzx
        dp3 r3.w, r23.xyzx, r23.xyzx
        sqrt r3.w, r3.w
        add_sat r3.w, -r3.w, r4.w
        mul r4.w, r0.w, r19.w
        add r3.w, r3.w, l(-1.000000)
        mad r4.w, r4.w, r3.w, l(1.000000)
        mad r3.w, cb0[35].z, r3.w, l(1.000000)
        mul r22.xyzw, r3.wwww, r22.xyzw
        dp3 r3.w, r14.xyzx, r14.xyzx
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        dp3 r5.w, r15.xyzx, r15.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        dp3 r6.w, r16.xyzx, r16.xyzx
        div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
        dp3 r7.w, r17.xyzx, r17.xyzx
        div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
        dp3 r8.w, r18.xyzx, r18.xyzx
        div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
        mul r23.xyz, r7.wwww, cb0[26].xyzx
        mad r23.xyz, cb0[28].xyzx, r8.wwww, r23.xyzx
        mad r23.xyz, cb0[24].xyzx, r6.wwww, r23.xyzx
        mad r23.xyz, cb0[22].xyzx, r5.wwww, r23.xyzx
        mad r23.xyz, cb0[20].xyzx, r3.wwww, r23.xyzx
        mul r23.xyz, r22.wwww, r23.xyzx
        mad r21.xyz, r21.xyzx, r4.wwww, r23.xyzx
        mul r21.xyz, r22.wwww, r21.xyzx
        mul r22.xyz, r21.xyzx, r22.xyzx
        add r3.w, -r19.w, l(1.000000)
        mad r21.xyzw, r22.xyzw, r3.wwww, r19.xyzw
        lt r3.w, l(0.990000), r21.w
        if_nz r3.w
          mov r13.xyzw, r22.xyzw
          mov r19.xyzw, r21.xyzw
          break
        endif
        mov r13.xyzw, r22.xyzw
        mov r19.xyzw, r21.xyzw
      endif
      add r14.xyz, r4.xyzx, r14.xyzx
      add r15.xyz, r4.xyzx, r15.xyzx
      add r16.xyz, r4.xyzx, r16.xyzx
      add r17.xyz, r4.xyzx, r17.xyzx
      add r18.xyz, r4.xyzx, r18.xyzx
      add r1.w, r1.w, l(-1.000000)
      add r20.xyz, r10.xyzx, r20.xyzx
    endloop
    lt r0.x, r19.w, l(0.990000)
    and r0.x, r0.x, l(0x3f800000)
    add r0.y, -r19.w, l(1.000000)
    mul r0.z, r1.w, r1.y
    mul r0.x, r0.y, r0.x
    mul r0.x, r0.z, r0.x
    mad r0.xyzw, r13.xyzw, r0.xxxx, r19.xyzw
    mul r0.xyzw, r0.xyzw, cb0[10].wwww
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xyzw, r1.xxxx
sample r3.xyzw, v1.xyxx, t4.xyzw, s0
mad_sat r0.x, -r0.w, r1.x, l(1.000000)
mad o0.xyz, r3.xyzx, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used