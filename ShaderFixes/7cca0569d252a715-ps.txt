// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 7cca0569d252a715-ps.txt
// 3DMigoto: 7cca0569d252a715 |    Unity headers extracted from Hidden_HxVolumetricPointLight
//    Shader "Hidden/HxVolumetricPointLight" {
//      SubShader 1/1 {
// 1:     Pass 1/2 {
// 2:     Pass 2/2 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Hidden_HxVolumetricPointLight:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 150 0 10
//   undeciphered1a: 13
//   Keywords { "NOISE_ON" }
//   undeciphered2: 1 5 4 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 5888
//   Float 208 [hxNoiseContrast]
//   Vector 224 [Phase]
//   Vector 256 [NoiseOffset] 3
//   Vector 272 [NoiseScale] 3
//   Vector 288 [Density]
//   Vector 960 [hxVolumeSettingsOld0] 2
//   Vector 968 [hxVolumeSettingsOld1] 2
//   Vector 976 [hxVolumeSettingsOld2] 2
//   Vector 984 [hxVolumeSettingsOld3] 2
//   Vector 992 [hxVolumeSettingsOld4] 2
//   Vector 1000 [hxVolumeSettingsOld5] 2
//   Vector 1008 [hxVolumeSettingsOld6] 2
//   Vector 1016 [hxVolumeSettingsOld7] 2
//   Vector 1024 [hxVolumeSettingsOld8] 2
//   Vector 1032 [hxVolumeSettingsOld9] 2
//   Float 5184 [hxRayOffset]
//   Vector 5328 [LightColour] 3
//   Vector 5344 [LightColour2] 3
//   Vector 5376 [_LightParams]
//   Vector 5392 [_CustomLightPosition]
//   Float 5408 [HxTileSize]
//   Float 5760 [TintPercent]
//   Float 5840 [VolumeScale]
//   Vector 5872 [ShadowBias] 3
//   Matrix 320 [hxVolumeMatrixOld0]
//   Matrix 384 [hxVolumeMatrixOld1]
//   Matrix 448 [hxVolumeMatrixOld2]
//   Matrix 512 [hxVolumeMatrixOld3]
//   Matrix 576 [hxVolumeMatrixOld4]
//   Matrix 640 [hxVolumeMatrixOld5]
//   Matrix 704 [hxVolumeMatrixOld6]
//   Matrix 768 [hxVolumeMatrixOld7]
//   Matrix 832 [hxVolumeMatrixOld8]
//   Matrix 896 [hxVolumeMatrixOld9]
//   Matrix 5264 [InverseProjectionMatrix]
//   Matrix 5440 [hxCameraToWorld]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 32 [_LightProjectionParams]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   SetTexture 0 [VolumetricDepth] 2D 4
//   SetTexture 1 [Tile5x5] 2D 3
//   SetTexture 2 [NoiseTexture3D] 3D 1
//   SetTexture 3 [_FalloffTex] 2D 2
//   SetTexture 4 [_ShadowMapTexture] CUBE 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:27:51 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[368], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_constantbuffer cb3[25], immediateIndexed
dcl_sampler s0, mode_comparison
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_temps 15
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r13.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 7cca0569d252a715-ps.txt

mul r13.w, -r13.x, r13.y
mad r14.xyz, -r13.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s4, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
add r1.xy, -r1.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, r1.yyyy, cb0[330].xyzw
mad r1.xyzw, cb0[329].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[331].xyzw
add r1.xyzw, r1.xyzw, cb0[332].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, -r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb0[341].xyzx
mad r1.xyw, cb0[340].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb0[342].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb0[343].xyzx
mul r0.zw, cb0[365].xxxx, cb1[6].xxxy
mul r0.xy, r0.xyxx, r0.zwzz
div r0.xy, r0.xyxx, cb0[338].xxxx
ge r0.zw, r0.xxxy, -r0.xxxy
frc r0.xy, |r0.xyxx|
movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[338].xxxx
div r0.xy, r0.xyxx, cb0[338].xxxx
sample_l r0.xyzw, r0.xyxx, t1.xyzw, s3, l(0.000000)
add r0.x, r0.x, cb0[324].x
frc r0.x, r0.x
add r0.yzw, r1.xxyz, -r14.xxyz
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.y, r1.x
mul r0.yzw, r0.yyzw, r1.yyyy
sqrt r1.x, r1.x
min r1.y, cb0[18].y, l(128.000000)
ftoi r1.z, r1.y
add r2.xyz, -cb0[337].xyzx, r14.xyzx
dp3 r1.w, r0.yzwy, r2.xyzx
add r2.w, r1.w, r1.w
dp3 r2.x, r2.xyzx, r2.xyzx
mul r2.y, cb0[336].z, cb0[336].z
mad r2.x, -cb0[336].z, cb0[336].z, r2.x
mul r2.x, r2.x, l(4.000000)
mad r2.x, r2.w, r2.w, -r2.x
lt r2.z, r2.x, l(0.000000)
discard_nz r2.z
sqrt r2.x, r2.x
mad r2.z, -r1.w, l(2.000000), -r2.x
mul r2.z, r2.z, l(0.500000)
mad r1.w, -r1.w, l(2.000000), r2.x
mul r1.w, r1.w, l(0.500000)
max r2.x, r2.z, r1.w
min r1.x, r1.x, r2.x
min r1.w, r2.z, r1.w
max r1.w, r1.w, l(0.000000)
add r1.x, -r1.w, r1.x
add r2.x, r1.x, l(-0.000100)
lt r2.x, r2.x, l(0.000000)
discard_nz r2.x
mad r2.xzw, r0.yyzw, r1.wwww, r14.xxyz
round_z r1.y, r1.y
div r1.x, r1.x, r1.y
mul r3.xyz, r0.yzwy, r1.xxxx
mad r2.xzw, r3.xxyz, r0.xxxx, r2.xxzw
mul r0.x, r1.w, cb0[18].x
mul r0.x, r0.x, cb0[18].w
mul r1.y, r1.x, cb0[18].w
add r1.w, -cb3[24].x, l(1.000000)
max r3.x, cb0[13].x, l(0.000000)
div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
add r3.yzw, cb0[333].xxyz, -cb0[334].xxyz
mov r4.y, l(0)
mov r5.z, l(0)
mov r6.xyz, l(0,0,0,0)
mov r7.xyz, r2.xzwx
mov r4.z, r0.x
mov r4.w, l(0)
loop
  ige r5.w, r4.w, r1.z
  breakc_nz r5.w
  add r8.xyz, r7.xyzx, -cb0[337].xyzx
  max r5.w, |r8.y|, |r8.x|
  max r5.w, |r8.z|, r5.w
  add r5.w, r5.w, -cb2[2].z
  max r5.w, r5.w, l(0.000010)
  mul r5.w, r5.w, cb2[2].w
  div r5.w, cb2[2].y, r5.w
  add r5.w, r5.w, -cb2[2].x
  add r5.w, -r5.w, l(1.000000)
  sample_c_lz r5.w, r8.xyzx, t4.xxxx, s0, r5.w
  mad r5.w, r5.w, r1.w, cb3[24].x
  dp3 r6.w, r8.xyzx, r8.xyzx
  rsq r7.w, r6.w
  mul r8.xyz, r7.wwww, r8.xyzx
  add r9.xyz, r7.xyzx, cb0[16].xyzx
  mul r9.xyz, r9.xyzx, cb0[17].xyzx
  sample_l r9.xyzw, r9.xyzx, t2.xyzw, s1, l(1.000000)
  add r7.w, r9.w, l(-0.500000)
  mad r7.w, r7.w, r3.x, l(0.500000)
  dp2 r7.w, r7.wwww, cb0[18].xxxx
  mov r9.x, r7.w
  mov r9.yz, l(0,0,0,0)
  mov r8.w, l(0)
  loop
    ige r9.w, r9.z, l(10)
    mov r8.w, l(0)
    breakc_nz r9.w
    eq r9.w, l(-1.000000), cb0[r9.z + 60].y
    if_nz r9.w
      mov r9.xy, r9.xxxx
      mov r8.w, l(-1)
      break
    endif
    ishl r10.x, r9.z, l(2)
    mul r10.yzw, r7.yyyy, cb0[r10.x + 21].xxyz
    mad r10.yzw, cb0[r10.x + 20].xxyz, r7.xxxx, r10.yyzw
    mad r10.yzw, cb0[r10.x + 22].xxyz, r7.zzzz, r10.yyzw
    add r10.xyz, r10.yzwy, cb0[r10.x + 23].xyzx
    lt r11.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r10.xyzx
    lt r12.xyz, r10.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r10.w, r11.x, r12.x
    and r10.w, r11.y, r10.w
    and r10.w, r12.y, r10.w
    and r10.w, r11.z, r10.w
    and r10.w, r12.z, r10.w
    if_nz r10.w
      ge r10.w, l(3.000000), cb0[r9.z + 60].y
      if_nz r10.w
        max r10.w, r9.x, cb0[r9.z + 60].x
        add r11.x, r9.x, cb0[r9.z + 60].x
        min r11.y, r9.x, cb0[r9.z + 60].x
        eq r12.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r9.z + 60].yyyy
        add r11.z, r9.x, -cb0[r9.z + 60].x
        movc r11.z, r12.w, r11.z, r9.x
        movc r11.y, r12.z, r11.y, r11.z
        movc r11.x, r12.y, r11.x, r11.y
        movc r5.x, r12.x, r10.w, r11.x
      else
        ge r10.w, l(7.000000), cb0[r9.z + 60].y
        dp3 r10.y, r10.xyzx, r10.xyzx
        sqrt r10.y, r10.y
        lt r10.y, r10.y, l(0.500000)
        and r10.y, r10.y, r10.w
        if_nz r10.y
          max r10.y, r9.x, cb0[r9.z + 60].x
          add r10.w, r9.x, cb0[r9.z + 60].x
          min r11.x, r9.x, cb0[r9.z + 60].x
          eq r12.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r9.z + 60].yyyy
          add r11.y, r9.x, -cb0[r9.z + 60].x
          movc r11.y, r12.w, r11.y, r9.x
          movc r11.x, r12.z, r11.x, r11.y
          movc r10.w, r12.y, r10.w, r11.x
          movc r5.x, r12.x, r10.y, r10.w
        else
          ge r10.y, l(11.000000), cb0[r9.z + 60].y
          dp2 r10.x, r10.xzxx, r10.xzxx
          sqrt r10.x, r10.x
          lt r10.x, r10.x, l(0.500000)
          and r10.x, r10.x, r10.y
          max r10.y, r9.x, cb0[r9.z + 60].x
          add r10.z, r9.x, cb0[r9.z + 60].x
          min r10.w, r9.x, cb0[r9.z + 60].x
          eq r11.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r9.z + 60].yyyy
          add r12.x, r9.x, -cb0[r9.z + 60].x
          movc r11.w, r11.w, r12.x, r9.x
          movc r10.w, r11.z, r10.w, r11.w
          movc r10.z, r11.y, r10.z, r10.w
          movc r10.y, r11.x, r10.y, r10.z
          movc r5.x, r10.x, r10.y, r9.x
        endif
      endif
    else
      mov r5.x, r9.x
    endif
    iadd r5.y, r9.z, l(1)
    mov r9.xyz, r5.xzyx
    mov r8.w, r9.w
  endloop
  movc r5.x, r8.w, r9.y, r9.x
  dp3 r5.y, r8.xyzx, -r0.yzwy
  mad r5.y, -cb0[14].w, r5.y, cb0[14].z
  log r5.y, r5.y
  mul r5.y, r5.y, l(1.500000)
  exp r5.y, r5.y
  div r5.y, cb0[14].y, r5.y
  mul r5.y, r5.y, cb0[14].x
  mul r4.x, r2.y, r6.w
  sample_l r10.xyzw, r4.xyxx, t3.xyzw, s2, l(0.000000)
  mad r4.x, -r6.w, r2.y, l(1.000000)
  mul r4.x, r4.x, cb0[360].x
  mul_sat r4.x, r4.x, l(0.500000)
  mad r8.xyz, r4.xxxx, r3.yzwy, cb0[334].xyzx
  add r4.x, -r5.w, l(1.000000)
  mul r4.x, r4.x, cb0[367].z
  mad r4.x, r5.y, r5.w, r4.x
  mul r4.x, r10.w, r4.x
  mul r5.y, r4.z, l(-1.442695)
  exp r5.y, r5.y
  mul r4.x, r4.x, r5.y
  mul r4.x, r5.x, r4.x
  mul r4.x, r1.x, r4.x
  max r4.x, r4.x, l(0.000000)
  mad r6.xyz, r8.xyzx, r4.xxxx, r6.xyzx
  mad r7.xyz, r0.yzwy, r1.xxxx, r7.xyzx
  mad r4.z, r1.y, r5.x, r4.z
  iadd r4.w, r4.w, l(1)
endloop
mov o0.xyz, r6.xyzx
mov o0.w, l(0)
ret
// Approximately 0 instruction slots used