// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9b107375062d2cb5-ps.txt
// 3DMigoto: 9b107375062d2cb5 | Matched 3 variants of 3 shaders: ASESampleShaders/Simple/SimpleRefraction, AVP/Rain_SimpleRefraction, Amplify/lab_analyzer_screen
//
// 2:    Unity headers extracted from ASESampleShaders_Simple_SimpleRefraction
// 4:    Unity headers extracted from AVP_Rain_SimpleRefraction
// 1:    Unity headers extracted from Amplify_lab_analyzer_screen
// 2:    Shader "ASESampleShaders/Simple/SimpleRefraction" {
// 4:    Shader "AVP/Rain_SimpleRefraction" {
// 1:    Shader "Amplify/lab_analyzer_screen" {
//         CustomEditor "ASEMaterialInspector"
//         Fallback "Diffuse"
//         SubShader 1/1 {
// 1:        Tags { "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="Opaque" }
// 6:        Tags { "IsEmissive"="true" "QUEUE"="Transparent+0" "RenderType"="Opaque" }
// 1:        Pass 2/5 {
// 6:        Pass 3/6 {
//             Name "FORWARD"
// 1:          Tags { "IsEmissive"="true" "LIGHTMODE"="FORWARDADD" "QUEUE"="Geometry+0" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
// 6:          Tags { "IsEmissive"="true" "LIGHTMODE"="FORWARDADD" "QUEUE"="Transparent+0" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//             ZWrite Off
//             Program "fp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
// 2: Unity 5.3 headers extracted from ASESampleShaders_Simple_SimpleRefraction:
// 4: Unity 5.3 headers extracted from AVP_Rain_SimpleRefraction:
// 1: Unity 5.3 headers extracted from Amplify_lab_analyzer_screen:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201802150 101 3 4
//      undeciphered1a: 10
//      Keywords { "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
//      undeciphered2: 1 4 6 4 0 0
//      undeciphered3: 0 0
// 6:   ConstBuffer "$Globals" 240
// 1:   ConstBuffer "$Globals" 256
//      Vector 32 [_LightColor0]
//      Vector 128 [_ShadowMapTexture_TexelSize]
//      Matrix 144 [unity_WorldToLight]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      ConstBuffer "UnityLighting" 768
//      Vector 0 [_WorldSpaceLightPos0]
//      Vector 736 [unity_OcclusionMaskSelector]
//      ConstBuffer "UnityShadows" 416
//      Vector 384 [_LightShadowData]
//      Vector 400 [unity_ShadowFadeCenterAndType]
//      Matrix 128 [unity_WorldToShadow0]
//      Matrix 192 [unity_WorldToShadow1]
//      Matrix 256 [unity_WorldToShadow2]
//      Matrix 320 [unity_WorldToShadow3]
//      ConstBuffer "UnityPerFrame" 368
//      Matrix 144 [unity_MatrixV]
//      ConstBuffer "UnityProbeVolume" 112
//      Vector 0 [unity_ProbeVolumeParams]
//      Vector 80 [unity_ProbeVolumeSizeInv] 3
//      Vector 96 [unity_ProbeVolumeMin] 3
//      Matrix 16 [unity_ProbeVolumeWorldToObject]
//      SetTexture 0 [_LightTexture0] 2D 2
//      SetTexture 1 [_LightTextureB0] 2D 3
//      SetTexture 2 [unity_ProbeVolumeSH] 3D 0
//      SetTexture 3 [_ShadowMapTexture] 2D 1
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityLighting" 2
//      BindCB "UnityShadows" 3
//      BindCB "UnityPerFrame" 4
//      BindCB "UnityProbeVolume" 5
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:45:33 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyz         1     NONE   float   xyz
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyzw        3     NONE   float
// TEXCOORD                 3   xyzw        4     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[13], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 12
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r10.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9b107375062d2cb5-ps.txt

mul r10.w, -r10.x, r10.y
mad r11.xyz, -r10.wwww, cb10[0].xyzw, cb1[4].xyzw

add r0.xyz, -v2.xyzx, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r0.xyzx
add r2.xyz, -v2.xyzx, r11.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r2.xyzx
mul r4.xyzw, v2.yyyy, cb0[10].xyzw
mad r4.xyzw, cb0[9].xyzw, v2.xxxx, r4.xyzw
mad r4.xyzw, cb0[11].xyzw, v2.zzzz, r4.xyzw
add r4.xyzw, r4.xyzw, cb0[12].xyzw
mov r5.x, cb4[9].z
mov r5.y, cb4[10].z
mov r5.z, cb4[11].z
dp3 r1.w, r2.xyzx, r5.xyzx
add r2.xyz, v2.xyzx, -cb3[25].xyzx
dp3 r2.x, r2.xyzx, r2.xyzx
sqrt r2.x, r2.x
add r2.x, -r1.w, r2.x
mad r1.w, cb3[25].w, r2.x, r1.w
mad_sat r1.w, r1.w, cb3[24].z, cb3[24].w
eq r2.x, cb5[0].x, l(1.000000)
if_nz r2.x
  eq r2.x, cb5[0].y, l(1.000000)
  mul r2.yzw, v2.yyyy, cb5[2].xxyz
  mad r2.yzw, cb5[1].xxyz, v2.xxxx, r2.yyzw
  mad r2.yzw, cb5[3].xxyz, v2.zzzz, r2.yyzw
  add r2.yzw, r2.yyzw, cb5[4].xxyz
  movc r2.xyz, r2.xxxx, r2.yzwy, v2.xyzx
  add r2.xyz, r2.xyzx, -cb5[6].xyzx
  mul r2.yzw, r2.xxyz, cb5[5].xxyz
  mad r2.y, r2.y, l(0.250000), l(0.750000)
  mad r3.w, cb5[0].z, l(0.500000), l(0.750000)
  max r2.x, r2.y, r3.w
  sample r2.xyzw, r2.xzwx, t2.xyzw, s0
else
  mov r2.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r2.x, r2.xyzw, cb2[46].xyzw
lt r2.y, r1.w, l(0.990000)
if_nz r2.y
  mul r5.xyzw, v2.yyyy, cb3[9].xyzw
  mad r5.xyzw, cb3[8].xyzw, v2.xxxx, r5.xyzw
  mad r5.xyzw, cb3[10].xyzw, v2.zzzz, r5.xyzw
  add r5.xyzw, r5.xyzw, cb3[11].xyzw
  div r2.yzw, r5.xxyz, r5.wwww
  mad r5.xy, r2.yzyy, cb0[8].zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
  round_ni r5.xy, r5.xyxx
  mad r2.yz, r2.yyzy, cb0[8].zzwz, -r5.xxyx
  add r6.xyzw, r2.yyzz, l(0.500000, 1.000000, 0.500000, 1.000000)
  mul r7.xw, r6.xxxz, r6.xxxz
  mad r5.zw, r7.xxxw, l(0.000000, 0.000000, 0.500000, 0.500000), -r2.yyyz
  add r6.xz, -r2.yyzy, l(1.000000, 0.000000, 1.000000, 0.000000)
  min r8.xy, r2.yzyy, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r6.xz, -r8.xxyx, r8.xxyx, r6.xxzx
  max r2.yz, r2.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r2.yz, -r2.yyzy, r2.yyzy, r6.yywy
  mov r8.x, r5.z
  mov r8.y, r6.x
  mov r8.z, r2.y
  mov r8.w, r7.x
  mul r8.xyzw, r8.xyzw, l(0.444440, 0.444440, 0.444440, 0.222220)
  mov r7.x, r5.w
  mov r7.y, r6.z
  mov r7.z, r2.z
  mul r6.xyzw, r7.xyzw, l(0.444440, 0.444440, 0.444440, 0.222220)
  add r7.xyzw, r8.ywyw, r8.xzxz
  add r9.xyzw, r6.yyww, r6.xxzz
  div r2.yz, r8.yywy, r7.zzwz
  add r2.yz, r2.yyzy, l(0.000000, -1.500000, 0.500000, 0.000000)
  div r5.zw, r6.yyyw, r9.yyyw
  add r5.zw, r5.zzzw, l(0.000000, 0.000000, -1.500000, 0.500000)
  mul r6.xy, r2.yzyy, cb0[8].xxxx
  mul r6.zw, r5.zzzw, cb0[8].yyyy
  mul r7.xyzw, r7.xyzw, r9.xyzw
  mad r8.xyzw, r5.xyxy, cb0[8].xyxy, r6.xzyz
  sample_c_lz r2.y, r8.xyxx, t3.xxxx, s1, r2.w
  sample_c_lz r2.z, r8.zwzz, t3.xxxx, s1, r2.w
  mul r2.z, r2.z, r7.y
  mad r2.y, r7.x, r2.y, r2.z
  mad r5.xyzw, r5.xyxy, cb0[8].xyxy, r6.xwyw
  sample_c_lz r2.z, r5.xyxx, t3.xxxx, s1, r2.w
  mad r2.y, r7.z, r2.z, r2.y
  sample_c_lz r2.z, r5.zwzz, t3.xxxx, s1, r2.w
  mad r2.y, r7.w, r2.z, r2.y
  add r2.z, -cb3[24].x, l(1.000000)
  mad r2.y, r2.y, r2.z, cb3[24].x
else
  mov r2.y, l(1.000000)
endif
add r2.x, -r2.y, r2.x
mad r1.w, r1.w, r2.x, r2.y
lt r2.x, l(0.000000), r4.z
and r2.x, r2.x, l(0x3f800000)
div r2.yz, r4.xxyx, r4.wwww
add r2.yz, r2.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
sample r5.xyzw, r2.yzyy, t0.xyzw, s2
mul r2.x, r2.x, r5.w
dp3 r2.y, r4.xyzx, r4.xyzx
sample r4.xyzw, r2.yyyy, t1.xyzw, s3
mul r2.x, r2.x, r4.x
mul r1.w, r1.w, r2.x
mul r2.xyz, r1.wwww, cb0[2].xyzx
dp3 r1.w, v1.xyzx, v1.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, v1.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r3.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r4.xyzx, r3.xyzx
dp3_sat r1.w, r4.xyzx, r1.xyzx
dp3_sat r0.x, r1.xyzx, r0.xyzx
add r0.y, |r0.w|, r1.w
add r0.y, r0.y, l(0.000010)
div r0.y, l(0.500000), r0.y
mul r0.y, r0.y, l(0.999999881)
mul r0.y, r1.w, r0.y
mul r0.yzw, r2.xxyz, r0.yyyy
add r0.x, -r0.x, l(1.000000)
mul r1.x, r0.x, r0.x
mul r1.x, r1.x, r1.x
mul r0.x, r0.x, r1.x
mad r0.x, r0.x, l(0.960000), l(0.040000)
mul o0.xyz, r0.xxxx, r0.yzwy
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used