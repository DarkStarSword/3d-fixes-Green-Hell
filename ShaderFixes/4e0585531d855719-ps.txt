// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4e0585531d855719-ps.txt
// 3DMigoto: 4e0585531d855719 |    Unity headers extracted from Amplify_mia_disappear_hair
//    Shader "Amplify/mia_disappear_hair" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="Transparent" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "IGNOREPROJECTOR"="true" "IsEmissive"="true" "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry+0" "RenderType"="Transparent" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_mia_disappear_hair:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 177 9 8
//   undeciphered1a: 15
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" }
//   undeciphered2: 1 8 9 7 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 144
//   Vector 32 [_LightColor0]
//   Vector 64 [_Normal_ST]
//   Float 80 [_useRtomultiply]
//   Vector 96 [_Albedo_ST]
//   Float 112 [_use_albedo_alpha]
//   Float 116 [_Cutoff]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 624 [unity_SHAr]
//   Vector 640 [unity_SHAg]
//   Vector 656 [unity_SHAb]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   ConstBuffer "UnityPerDraw" 176
//   Matrix 0 [unity_ObjectToWorld]
//   Matrix 64 [unity_WorldToObject]
//   ConstBuffer "UnityPerFrame" 368
//   Matrix 144 [unity_MatrixV]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "Amplifymia_disappear_hair" 128
//   Vector 0 [_Albedo_color_multiply]
//   Vector 48 [_emmisive]
//   Float 80 [_main_normal_scale]
//   Float 84 [_detail_normal_scale]
//   Float 88 [_detail_tiling]
//   Float 104 [_smooothnes]
//   Float 108 [_disappear_mask_multiply]
//   Float 112 [_disolve_texture_tile]
//   Float 116 [_disappear_mask_size]
//   SetTexture 0 [_Normal] 2D 3
//   SetTexture 1 [_Normal_detail] 2D 4
//   SetTexture 2 [_Albedo] 2D 5
//   SetTexture 3 [_dissolveguide] 2D 6
//   SetTexture 4 [_ShadowMapTexture] 2D 2
//   SetTexture 5 [unity_SpecCube0] CUBE 0
//   SetTexture 6 [unity_SpecCube1] CUBE -1
//   SetTexture 7 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerDraw" 4
//   BindCB "UnityPerFrame" 5
//   BindCB "UnityReflectionProbes" 6
//   BindCB "UnityProbeVolume" 7
//   BindCB "Amplifymia_disappear_hair" 8
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:00:37 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float
// TEXCOORD                 5   xyz         6     NONE   float   xyz
// TEXCOORD                 7   xyzw        7     NONE   float   xy w
// TEXCOORD                 8   xyzw        8     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb5[12], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_constantbuffer cb7[7], immediateIndexed
dcl_constantbuffer cb8[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyw
dcl_output o0.xyzw
dcl_temps 17
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4e0585531d855719-ps.txt

mul r15.w, -r15.x, r15.y
mad r16.xyz, -r15.wwww, cb10[0].xyzw, cb1[4].xyzw

mov r0.x, v2.w
mov r0.y, v3.w
mov r0.z, v4.w
add r1.xyz, -r0.xyzx, r16.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r1.xyzx
mad r3.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
mul r3.zw, v1.xxxy, cb8[5].zzzz
sample r4.xyzw, r3.xyxx, t0.xyzw, s3
mul r4.x, r4.w, r4.x
mad r3.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r4.xy, r3.xyxx, cb8[5].xxxx
dp2 r1.w, r4.xyxx, r4.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r1.w, r1.w
sample r4.xyzw, r3.zwzz, t1.xyzw, s4
mul r4.x, r4.w, r4.x
mad r3.zw, r4.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r3.zw, r3.zzzw, cb8[5].yyyy
dp2 r2.w, r3.zwzz, r3.zwzz
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r2.w, r2.w
mad r3.xy, r3.xyxx, cb8[5].xxxx, r3.zwzz
mul r3.z, r1.w, r2.w
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
mad r4.xy, v1.xyxx, cb0[6].xyxx, cb0[6].zwzz
sample r4.xyzw, r4.xyxx, t2.xyzw, s5
add r5.xyz, -r4.xyzx, r4.xxxx
mad r5.xyz, cb0[5].xxxx, r5.xyzx, r4.xyzx
mul r5.xyz, r5.xyzx, cb8[0].xyzx
mul r6.xyz, v3.wwww, cb4[5].xyzx
mad r6.xyz, cb4[4].xyzx, v2.wwww, r6.xyzx
mad r6.xyz, cb4[6].xyzx, v4.wwww, r6.xyzx
add r6.xyz, r6.xyzx, cb4[7].xyzx
mul r1.w, r6.y, cb4[1].y
mad r1.w, cb4[0].y, r6.x, r1.w
mad r1.w, cb4[2].y, r6.z, r1.w
mul r6.xy, v1.xyxx, cb8[7].xxxx
sample r6.xyzw, r6.xyxx, t3.xyzw, s6
mad r1.w, r6.x, cb8[7].y, r1.w
ge r1.w, r1.w, cb8[6].w
movc r6.xy, r1.wwww, l(0,-0.000000,0,0), l(1.000000,-1.000000,0,0)
mad r1.w, r4.w, r6.x, r6.y
mad r1.w, cb0[7].x, r1.w, r6.x
add r1.w, r1.w, -cb0[7].y
lt r1.w, r1.w, l(0.000000)
discard_nz r1.w
mov r6.x, cb5[9].z
mov r6.y, cb5[10].z
mov r6.z, cb5[11].z
dp3 r1.w, r1.xyzx, r6.xyzx
add r6.xyz, r0.xyzx, -cb3[25].xyzx
dp3 r2.w, r6.xyzx, r6.xyzx
sqrt r2.w, r2.w
add r2.w, -r1.w, r2.w
mad r1.w, cb3[25].w, r2.w, r1.w
mad_sat r1.w, r1.w, cb3[24].z, cb3[24].w
eq r2.w, cb7[0].x, l(1.000000)
if_nz r2.w
  eq r3.w, cb7[0].y, l(1.000000)
  mul r6.xyz, v3.wwww, cb7[2].xyzx
  mad r6.xyz, cb7[1].xyzx, v2.wwww, r6.xyzx
  mad r6.xyz, cb7[3].xyzx, v4.wwww, r6.xyzx
  add r6.xyz, r6.xyzx, cb7[4].xyzx
  movc r6.xyz, r3.wwww, r6.xyzx, r0.xyzx
  add r6.xyz, r6.xyzx, -cb7[6].xyzx
  mul r6.yzw, r6.xxyz, cb7[5].xxyz
  mad r3.w, r6.y, l(0.250000), l(0.750000)
  mad r4.w, cb7[0].z, l(0.500000), l(0.750000)
  max r6.x, r3.w, r4.w
  sample r6.xyzw, r6.xzwx, t7.xyzw, s1
else
  mov r6.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r3.w, r6.xyzw, cb2[46].xyzw
div r6.xy, v7.xyxx, v7.wwww
sample r6.xyzw, r6.xyxx, t4.xyzw, s2
add r3.w, r3.w, -r6.x
mad r1.w, r1.w, r3.w, r6.x
dp3 r6.x, v2.xyzx, r3.xyzx
dp3 r6.y, v3.xyzx, r3.xyzx
dp3 r6.z, v4.xyzx, r3.xyzx
dp3 r3.x, r6.xyzx, r6.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, r6.xyzx
add r4.w, -cb8[6].z, l(1.000000)
dp3 r5.w, -r2.xyzx, r3.xyzx
add r5.w, r5.w, r5.w
mad r6.xyz, r3.xyzx, -r5.wwww, -r2.xyzx
mul r7.xyz, r1.wwww, cb0[2].xyzx
if_nz r2.w
  eq r1.w, cb7[0].y, l(1.000000)
  mul r8.xyz, v3.wwww, cb7[2].xyzx
  mad r8.xyz, cb7[1].xyzx, v2.wwww, r8.xyzx
  mad r8.xyz, cb7[3].xyzx, v4.wwww, r8.xyzx
  add r8.xyz, r8.xyzx, cb7[4].xyzx
  movc r8.xyz, r1.wwww, r8.xyzx, r0.xyzx
  add r8.xyz, r8.xyzx, -cb7[6].xyzx
  mul r8.yzw, r8.xxyz, cb7[5].xxyz
  mul r1.w, r8.y, l(0.250000)
  mul r2.w, cb7[0].z, l(0.500000)
  mad r5.w, -cb7[0].z, l(0.500000), l(0.250000)
  max r1.w, r1.w, r2.w
  min r8.x, r5.w, r1.w
  sample r9.xyzw, r8.xzwx, t7.xyzw, s1
  add r10.xyz, r8.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r10.xyzw, r10.xyzx, t7.xyzw, s1
  add r8.xyz, r8.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r8.xyzw, r8.xyzx, t7.xyzw, s1
  mov r3.w, l(1.000000)
  dp4 r9.x, r9.xyzw, r3.xyzw
  dp4 r9.y, r10.xyzw, r3.xyzw
  dp4 r9.z, r8.xyzw, r3.xyzw
else
  mov r3.w, l(1.000000)
  dp4 r9.x, cb2[39].xyzw, r3.xyzw
  dp4 r9.y, cb2[40].xyzw, r3.xyzw
  dp4 r9.z, cb2[41].xyzw, r3.xyzw
endif
add r8.xyz, r9.xyzx, v6.xyzx
max r8.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r1.w, l(0.000000), cb6[2].w
if_nz r1.w
  dp3 r1.w, r6.xyzx, r6.xyzx
  rsq r1.w, r1.w
  mul r9.xyz, r1.wwww, r6.xyzx
  add r10.xyz, -r0.xyzx, cb6[0].xyzx
  div r10.xyz, r10.xyzx, r9.xyzx
  add r11.xyz, -r0.xyzx, cb6[1].xyzx
  div r11.xyz, r11.xyzx, r9.xyzx
  lt r12.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r9.xyzx
  movc r10.xyz, r12.xyzx, r10.xyzx, r11.xyzx
  min r1.w, r10.y, r10.x
  min r1.w, r10.z, r1.w
  add r10.xyz, r0.xyzx, -cb6[2].xyzx
  mad r9.xyz, r9.xyzx, r1.wwww, r10.xyzx
else
  mov r9.xyz, r6.xyzx
endif
mad r1.w, -r4.w, l(0.700000), l(1.700000)
mul r1.w, r1.w, r4.w
mul r1.w, r1.w, l(6.000000)
sample_l r9.xyzw, r9.xyzx, t5.xyzw, s0, r1.w
add r2.w, r9.w, l(-1.000000)
mad r2.w, cb6[3].w, r2.w, l(1.000000)
log r2.w, r2.w
mul r2.w, r2.w, cb6[3].y
exp r2.w, r2.w
mul r2.w, r2.w, cb6[3].x
mul r10.xyz, r9.xyzx, r2.wwww
lt r3.w, cb6[1].w, l(0.999990)
if_nz r3.w
  lt r3.w, l(0.000000), cb6[6].w
  if_nz r3.w
    dp3 r3.w, r6.xyzx, r6.xyzx
    rsq r3.w, r3.w
    mul r11.xyz, r3.wwww, r6.xyzx
    add r12.xyz, -r0.xyzx, cb6[4].xyzx
    div r12.xyz, r12.xyzx, r11.xyzx
    add r13.xyz, -r0.xyzx, cb6[5].xyzx
    div r13.xyz, r13.xyzx, r11.xyzx
    lt r14.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
    movc r12.xyz, r14.xyzx, r12.xyzx, r13.xyzx
    min r3.w, r12.y, r12.x
    min r3.w, r12.z, r3.w
    add r0.xyz, r0.xyzx, -cb6[6].xyzx
    mad r6.xyz, r11.xyzx, r3.wwww, r0.xyzx
  endif
  sample_l r6.xyzw, r6.xyzx, t6.xyzw, s0, r1.w
  add r0.x, r6.w, l(-1.000000)
  mad r0.x, cb6[7].w, r0.x, l(1.000000)
  log r0.x, r0.x
  mul r0.x, r0.x, cb6[7].y
  exp r0.x, r0.x
  mul r0.x, r0.x, cb6[7].x
  mul r0.xyz, r6.xyzx, r0.xxxx
  mad r6.xyz, r2.wwww, r9.xyzx, -r0.xyzx
  mad r10.xyz, cb6[1].wwww, r6.xyzx, r0.xyzx
endif
mad r0.xyz, r1.xyzx, r0.wwww, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r3.xyzx, r2.xyzx
dp3_sat r1.x, r3.xyzx, cb2[0].xyzx
dp3_sat r0.x, cb2[0].xyzx, r0.xyzx
mul r0.x, r0.x, r0.x
dp2 r0.x, r0.xxxx, r4.wwww
add r0.x, r0.x, l(-0.500000)
add r0.y, -r1.x, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.y, r0.z
mad r0.y, r0.x, r0.y, l(1.000000)
add r0.z, -|r0.w|, l(1.000000)
mul r0.w, r0.z, r0.z
mul r0.w, r0.w, r0.w
mul r0.z, r0.z, r0.w
mad r0.x, r0.x, r0.z, l(1.000000)
mul r0.x, r0.x, r0.y
mul r0.x, r1.x, r0.x
mul r0.y, r4.w, r4.w
max r0.y, r0.y, l(0.002000)
mad r0.y, r0.y, r0.y, l(1.000000)
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mov_sat r0.w, cb8[6].z
mad r1.xyz, r7.xyzx, r0.xxxx, r8.xyzx
mul r2.xyz, r10.xyzx, r0.yyyy
mul r0.x, r0.w, r0.z
mul r0.xyz, r0.xxxx, r2.xyzx
mad r0.xyz, r5.xyzx, r1.xyzx, r0.xyzx
mad o0.xyz, r4.xyzx, cb8[3].xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used