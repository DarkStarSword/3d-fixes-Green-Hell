// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 0334e8da2a02138f-ps.txt
// 3DMigoto: 0334e8da2a02138f | Matched 2 variants of 1 shaders: Custom/CharacterBodypainting
//
//       Unity headers extracted from Custom_CharacterBodypainting
//       Shader "Custom/CharacterBodypainting" {
//         CustomEditor "ASEMaterialInspector"
//         Fallback "Diffuse"
//         SubShader 1/1 {
//           Tags { "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="TransparentCutout" }
//           Pass 1/5 {
//             Name "FORWARD"
//             Tags { "IsEmissive"="true" "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry+0" "RenderType"="TransparentCutout" "SHADOWSUPPORT"="true" }
//             Program "fp" {
//               SubProgram "d3d11" {
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Custom_CharacterBodypainting:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201802150 202 11 8
//      undeciphered1a: 14
// 1:   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "INSTANCING_ON" "_BODYPAINTINGNORMAL_ON" }
// 2:   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "INSTANCING_ON" }
//      undeciphered2: 1 10 9 9 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 336
//      Vector 32 [_LightColor0]
//      Vector 64 [_NormalRG_ST]
//      Float 80 [_NormalIntensity]
//      Float 84 [_DetailNormalUV0UV1]
//      Float 88 [_DetailNormalTiling]
//      Float 92 [_DetailNormalIntensity]
//      Vector 112 [_PaintingMasksRGB_ST]
//      Vector 128 [_PaintingDetailMasksRGB_ST]
//      Vector 160 [_Color]
//      Vector 176 [_Albedo_ST]
//      Vector 224 [_ColorB]
//      Float 240 [_EmissionPower]
//      Vector 256 [_EmissionColor]
//      Float 276 [_SmoothnessIntensity]
//      Float 280 [_NoiseCut]
//      Float 284 [_NoiseUVTiling]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      ConstBuffer "UnityLighting" 768
//      Vector 0 [_WorldSpaceLightPos0]
//      Vector 736 [unity_OcclusionMaskSelector]
//      ConstBuffer "UnityShadows" 416
//      Vector 384 [_LightShadowData]
//      Vector 400 [unity_ShadowFadeCenterAndType]
//      ConstBuffer "UnityPerFrame" 368
//      Matrix 144 [unity_MatrixV]
//      ConstBuffer "UnityReflectionProbes" 128
//      Vector 0 [unity_SpecCube0_BoxMax]
//      Vector 16 [unity_SpecCube0_BoxMin]
//      Vector 32 [unity_SpecCube0_ProbePosition]
//      Vector 48 [unity_SpecCube0_HDR]
//      Vector 64 [unity_SpecCube1_BoxMax]
//      Vector 80 [unity_SpecCube1_BoxMin]
//      Vector 96 [unity_SpecCube1_ProbePosition]
//      Vector 112 [unity_SpecCube1_HDR]
//      ConstBuffer "UnityProbeVolume" 112
//      Vector 0 [unity_ProbeVolumeParams]
//      Vector 80 [unity_ProbeVolumeSizeInv] 3
//      Vector 96 [unity_ProbeVolumeMin] 3
//      Matrix 16 [unity_ProbeVolumeWorldToObject]
//      ConstBuffer "UnityDrawCallInfo" 16
//      ScalarInt 0 [unity_BaseInstanceID]
//      ConstBuffer "UnityInstancing_PerDraw2" 224
//      Struct 0 [unity_Builtins2Array] 2 112
//      Vector 0 [unity_SHArArray]
//      Vector 16 [unity_SHAgArray]
//      Vector 32 [unity_SHAbArray]
//      Vector 48 [unity_SHBrArray]
//      Vector 64 [unity_SHBgArray]
//      Vector 80 [unity_SHBbArray]
//      Vector 96 [unity_SHCArray]
//      SetTexture 0 [_NormalRG] 2D 3
//      SetTexture 1 [_DetailNormalRG] 2D 4
//      SetTexture 2 [_PaintingMasksRGB] 2D 5
//      SetTexture 3 [_PaintingDetailMasksRGB] 2D 6
//      SetTexture 4 [_Albedo] 2D 7
//      SetTexture 5 [_Cutout] 2D 8
//      SetTexture 6 [_ShadowMapTexture] 2D 2
//      SetTexture 7 [unity_SpecCube0] CUBE 0
//      SetTexture 8 [unity_SpecCube1] CUBE -1
//      SetTexture 9 [unity_ProbeVolumeSH] 3D 1
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityLighting" 2
//      BindCB "UnityShadows" 3
//      BindCB "UnityPerFrame" 4
//      BindCB "UnityReflectionProbes" 5
//      BindCB "UnityProbeVolume" 6
//      BindCB "UnityDrawCallInfo" 7
//      BindCB "UnityInstancing_PerDraw2" 8
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:24:50 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyzw        6     NONE   float   xy w
// TEXCOORD                 7   xyzw        7     NONE   float
// SV_InstanceID            0   x           8     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[18], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_constantbuffer cb5[8], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_constantbuffer cb7[1], immediateIndexed
dcl_constantbuffer cb8[14], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texturecube (float,float,float,float) t7
dcl_resource_texturecube (float,float,float,float) t8
dcl_resource_texture3d (float,float,float,float) t9
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyw
dcl_input_ps constant v8.x
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 0334e8da2a02138f-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

iadd r0.x, v8.x, cb7[0].x
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r0.yzw, -r1.xxyz, r15.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r2.xyz, r0.yzwy, r1.wwww
mad r3.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
sample r3.xyzw, r3.xyxx, t0.xyzw, s3
add r4.xy, r3.xyxx, r3.xyxx
mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r3.xyxx, r3.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r4.z, r2.w
add r3.xyz, r4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r3.xyz, cb0[5].xxxx, r3.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r4.xy, v1.xyxx, cb0[5].zzzz
mad r4.zw, v1.zzzw, cb0[5].zzzz, -r4.xxxy
mad r4.xy, cb0[5].yyyy, r4.zwzz, r4.xyxx
sample r4.xyzw, r4.xyxx, t1.xyzw, s4
add r5.xy, r4.xyxx, r4.xyxx
mad r4.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r4.xyxx, r4.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r5.z, r2.w
add r4.xyz, r5.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r4.xyz, cb0[5].wwww, r4.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
add r5.xy, r3.xyxx, r4.xyxx
mul r5.z, r3.z, r4.z
dp3 r2.w, r5.xyzx, r5.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r5.xyzx
mad r4.xy, v1.zwzz, cb0[7].xyxx, cb0[7].zwzz
sample r4.xyzw, r4.xyxx, t2.xyzw, s5
mad r4.xy, v1.xyxx, cb0[8].xyxx, cb0[8].zwzz
sample r5.xyzw, r4.xyxx, t3.xyzw, s6
mad r4.xy, v1.xyxx, cb0[11].xyxx, cb0[11].zwzz
sample r6.xyzw, r4.xyxx, t4.xyzw, s7
mul r4.xyw, r6.xyxz, cb0[10].xyxz
mul r2.w, r4.z, r5.z
mul r2.w, r2.w, cb0[14].w
mul r2.w, r2.w, cb0[15].x
mul r5.xy, v1.xyxx, cb0[17].wwww
sample r5.xyzw, r5.xyxx, t5.xyzw, s8
add r3.w, -r5.x, cb0[17].z
lt r3.w, r3.w, l(0.000000)
discard_nz r3.w
mov r6.x, cb4[9].z
mov r6.y, cb4[10].z
mov r6.z, cb4[11].z
dp3 r3.w, r0.yzwy, r6.xyzx
add r5.yzw, r1.xxyz, -cb3[25].xxyz
dp3 r4.z, r5.yzwy, r5.yzwy
sqrt r4.z, r4.z
add r4.z, -r3.w, r4.z
mad r3.w, cb3[25].w, r4.z, r3.w
mad_sat r3.w, r3.w, cb3[24].z, cb3[24].w
imul null, r0.x, r0.x, l(7)
eq r4.z, cb6[0].x, l(1.000000)
if_nz r4.z
  eq r5.y, cb6[0].y, l(1.000000)
  mul r6.xyz, v3.wwww, cb6[2].xyzx
  mad r6.xyz, cb6[1].xyzx, v2.wwww, r6.xyzx
  mad r6.xyz, cb6[3].xyzx, v4.wwww, r6.xyzx
  add r6.xyz, r6.xyzx, cb6[4].xyzx
  movc r5.yzw, r5.yyyy, r6.xxyz, r1.xxyz
  add r5.yzw, r5.yyzw, -cb6[6].xxyz
  mul r7.yzw, r5.yyzw, cb6[5].xxyz
  mad r5.y, r7.y, l(0.250000), l(0.750000)
  mad r5.z, cb6[0].z, l(0.500000), l(0.750000)
  max r7.x, r5.z, r5.y
  sample r7.xyzw, r7.xzwx, t9.xyzw, s1
else
  mov r7.xyzw, cb8[r0.x + 6].wwww
endif
dp4_sat r5.y, r7.xyzw, cb2[46].xyzw
div r5.zw, v6.xxxy, v6.wwww
sample r7.xyzw, r5.zwzz, t6.xyzw, s2
add r5.y, r5.y, -r7.x
mad r3.w, r3.w, r5.y, r7.x
dp3 r6.x, v2.xyzx, r3.xyzx
dp3 r6.y, v3.xyzx, r3.xyzx
dp3 r6.z, v4.xyzx, r3.xyzx
dp3 r3.x, r6.xyzx, r6.xyzx
rsq r3.x, r3.x
mul r7.xyz, r3.xxxx, r6.xyzx
mad r3.x, -cb0[17].y, r6.w, l(1.000000)
dp3 r3.y, -r2.xyzx, r7.xyzx
add r3.y, r3.y, r3.y
mad r5.yzw, r7.xxyz, -r3.yyyy, -r2.xxyz
mul r3.yzw, r3.wwww, cb0[2].xxyz
if_nz r4.z
  eq r4.z, cb6[0].y, l(1.000000)
  mul r6.xyz, v3.wwww, cb6[2].xyzx
  mad r6.xyz, cb6[1].xyzx, v2.wwww, r6.xyzx
  mad r6.xyz, cb6[3].xyzx, v4.wwww, r6.xyzx
  add r6.xyz, r6.xyzx, cb6[4].xyzx
  movc r6.xyz, r4.zzzz, r6.xyzx, r1.xyzx
  add r6.xyz, r6.xyzx, -cb6[6].xyzx
  mul r8.yzw, r6.xxyz, cb6[5].xxyz
  mul r4.z, r8.y, l(0.250000)
  mul r6.x, cb6[0].z, l(0.500000)
  mad r6.y, -cb6[0].z, l(0.500000), l(0.250000)
  max r4.z, r4.z, r6.x
  min r8.x, r6.y, r4.z
  sample r9.xyzw, r8.xzwx, t9.xyzw, s1
  add r6.xyz, r8.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r10.xyzw, r6.xyzx, t9.xyzw, s1
  add r6.xyz, r8.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r8.xyzw, r6.xyzx, t9.xyzw, s1
  mov r7.w, l(1.000000)
  dp4 r6.x, r9.xyzw, r7.xyzw
  dp4 r6.y, r10.xyzw, r7.xyzw
  dp4 r6.z, r8.xyzw, r7.xyzw
else
  mov r7.w, l(1.000000)
  dp4 r6.x, cb8[r0.x + 0].xyzw, r7.xyzw
  dp4 r6.y, cb8[r0.x + 1].xyzw, r7.xyzw
  dp4 r6.z, cb8[r0.x + 2].xyzw, r7.xyzw
endif
add r6.xyz, r6.xyzx, v5.xyzx
max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.x, l(0.000000), cb5[2].w
if_nz r0.x
  dp3 r0.x, r5.yzwy, r5.yzwy
  rsq r0.x, r0.x
  mul r8.xyz, r0.xxxx, r5.yzwy
  add r9.xyz, -r1.xyzx, cb5[0].xyzx
  div r9.xyz, r9.xyzx, r8.xyzx
  add r10.xyz, -r1.xyzx, cb5[1].xyzx
  div r10.xyz, r10.xyzx, r8.xyzx
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
  movc r9.xyz, r11.xyzx, r9.xyzx, r10.xyzx
  min r0.x, r9.y, r9.x
  min r0.x, r9.z, r0.x
  add r9.xyz, r1.xyzx, -cb5[2].xyzx
  mad r8.xyz, r8.xyzx, r0.xxxx, r9.xyzx
else
  mov r8.xyz, r5.yzwy
endif
mad r0.x, -r3.x, l(0.700000), l(1.700000)
mul r0.x, r0.x, r3.x
mul r0.x, r0.x, l(6.000000)
sample_l r8.xyzw, r8.xyzx, t7.xyzw, s0, r0.x
add r4.z, r8.w, l(-1.000000)
mad r4.z, cb5[3].w, r4.z, l(1.000000)
log r4.z, r4.z
mul r4.z, r4.z, cb5[3].y
exp r4.z, r4.z
mul r4.z, r4.z, cb5[3].x
mul r9.xyz, r8.xyzx, r4.zzzz
lt r7.w, cb5[1].w, l(0.999990)
if_nz r7.w
  lt r7.w, l(0.000000), cb5[6].w
  if_nz r7.w
    dp3 r7.w, r5.yzwy, r5.yzwy
    rsq r7.w, r7.w
    mul r10.xyz, r5.yzwy, r7.wwww
    add r11.xyz, -r1.xyzx, cb5[4].xyzx
    div r11.xyz, r11.xyzx, r10.xyzx
    add r12.xyz, -r1.xyzx, cb5[5].xyzx
    div r12.xyz, r12.xyzx, r10.xyzx
    lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
    min r7.w, r11.y, r11.x
    min r7.w, r11.z, r7.w
    add r1.xyz, r1.xyzx, -cb5[6].xyzx
    mad r5.yzw, r10.xxyz, r7.wwww, r1.xxyz
  endif
  sample_l r10.xyzw, r5.yzwy, t8.xyzw, s0, r0.x
  add r0.x, r10.w, l(-1.000000)
  mad r0.x, cb5[7].w, r0.x, l(1.000000)
  log r0.x, r0.x
  mul r0.x, r0.x, cb5[7].y
  exp r0.x, r0.x
  mul r0.x, r0.x, cb5[7].x
  mul r1.xyz, r10.xyzx, r0.xxxx
  mad r5.yzw, r4.zzzz, r8.xxyz, -r1.xxyz
  mad r9.xyz, cb5[1].wwww, r5.yzwy, r1.xyzx
endif
mul r1.xyz, r4.xywx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r0.xyz, r0.yzwy, r1.wwww, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r7.xyzx, r2.xyzx
dp3_sat r1.w, r7.xyzx, cb2[0].xyzx
dp3_sat r2.x, r7.xyzx, r0.xyzx
dp3_sat r0.x, cb2[0].xyzx, r0.xyzx
mul r0.y, r0.x, r0.x
dp2 r0.y, r0.yyyy, r3.xxxx
add r0.y, r0.y, l(-0.500000)
add r0.z, -r1.w, l(1.000000)
mul r2.y, r0.z, r0.z
mul r2.y, r2.y, r2.y
mul r0.z, r0.z, r2.y
mad r0.z, r0.y, r0.z, l(1.000000)
add r2.y, -|r0.w|, l(1.000000)
mul r2.z, r2.y, r2.y
mul r2.z, r2.z, r2.z
mul r2.y, r2.y, r2.z
mad r0.y, r0.y, r2.y, l(1.000000)
mul r0.y, r0.y, r0.z
mul r0.z, r3.x, r3.x
max r0.z, r0.z, l(0.002000)
add r2.z, -r0.z, l(1.000000)
mad r3.x, |r0.w|, r2.z, r0.z
mad r2.z, r1.w, r2.z, r0.z
mul r0.w, |r0.w|, r2.z
mad r0.w, r1.w, r3.x, r0.w
add r0.w, r0.w, l(0.000010)
div r0.w, l(0.500000), r0.w
mul r2.z, r0.z, r0.z
mad r3.x, r2.x, r2.z, -r2.x
mad r2.x, r3.x, r2.x, l(1.000000)
mul r2.z, r2.z, l(0.318309873)
mad r2.x, r2.x, r2.x, l(1.000000012E-007)
div r2.x, r2.z, r2.x
mul r0.w, r0.w, r2.x
mul r0.w, r0.w, l(3.14159274)
mul r0.yw, r1.wwww, r0.yyyw
max r0.w, r0.w, l(0.000000)
mad r0.z, r0.z, r0.z, l(1.000000)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mad_sat r1.w, cb0[17].y, r6.w, l(0.0400000215)
mad r4.xyz, r3.yzwy, r0.yyyy, r6.xyzx
mul r3.xyz, r3.yzwy, r0.wwww
add r0.x, -r0.x, l(1.000000)
mul r0.y, r0.x, r0.x
mul r0.y, r0.y, r0.y
mul r0.x, r0.x, r0.y
mad r0.x, r0.x, l(0.960000), l(0.040000)
mul r0.xyw, r0.xxxx, r3.xyxz
mad r0.xyw, r1.xyxz, r4.xyxz, r0.xyxw
mul r1.xyz, r9.xyzx, r0.zzzz
add r0.z, r1.w, l(-0.040000)
mad r0.z, r2.y, r0.z, l(0.040000)
mad r0.xyz, r1.xyzx, r0.zzzz, r0.xywx
mad o0.xyz, r2.wwww, cb0[16].xyzx, r0.xyzx
mov o0.w, r5.x
ret
// Approximately 0 instruction slots used