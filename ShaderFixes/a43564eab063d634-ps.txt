// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a43564eab063d634-ps.txt
// 3DMigoto: a43564eab063d634 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 133 3 11
//   undeciphered1a: 12
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_VOID_SPHERE" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 464
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_SunPosition] 3
//   Vector 352 [_SunDir] 3
//   Vector 368 [_SunColor] 3
//   Vector 384 [_FogScatteringData]
//   Vector 400 [_FogScatteringData2]
//   Float 416 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:51:16 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[27], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 14
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r12.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a43564eab063d634-ps.txt

mul r12.w, -r12.x, r12.y
mad r13.xyz, -r12.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.z, -cb0[13].x, r13.z
mov r1.xy, r13.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.zzwz
and r2.y, r2.z, r2.y
lt r2.z, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r5.xyz, -r2.yzwy, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.yzw, -r2.yyzw, r4.xxyz
  mul r2.yzw, r2.yyzw, r3.xxyz
  min r4.xyz, r5.xyzx, r2.yzwy
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.yzw, r5.xxyz, r2.yyzw
  min r2.yz, r2.zzwz, r2.yyyy
  min r2.y, r2.z, r2.y
  min r2.z, r0.w, cb0[12].z
  min r2.y, r2.z, r2.y
  add r2.y, -r1.w, r2.y
  lt r2.w, l(0.000000), r2.y
  if_nz r2.w
    div r3.xyz, r1.wwww, r3.xyzx
    add r1.xyz, r1.xyzx, r3.xyzx
    mul r3.xyz, r0.xyzx, r2.yyyy
    div r3.xyz, r3.xyzx, r0.wwww
    add r3.xyz, r1.xyzx, r3.xyzx
    add r3.xyz, -r3.xyzx, cb0[17].xyzx
    dp3 r2.w, r3.xyzx, r3.xyzx
    sqrt r2.w, r2.w
    mad r2.w, r2.w, cb0[18].x, l(-1.000000)
    mad_sat r2.w, cb0[18].w, r2.w, l(1.000000)
    lt r3.x, l(0.000000), r2.w
    if_nz r3.x
      div r3.xy, cb0[20].xyxx, cb0[13].wwww
      log r3.z, r2.y
      mul r3.z, r3.z, l(0.693147182)
      max r3.z, r3.z, l(0.000000)
      mad r3.z, r3.z, cb0[15].x, l(0.100000)
      mul r3.z, r3.z, cb0[13].z
      mul_sat r3.w, r2.z, cb0[15].y
      mul r3.z, r3.w, r3.z
      add r1.w, -r1.w, r2.z
      max r2.z, r3.z, l(0.010000)
      mul r4.xyz, r0.xyzx, r2.zzzz
      div r4.xyz, r4.xyzx, r0.wwww
      div r2.z, r2.y, r2.z
      mul r5.xy, r4.xyxx, cb0[13].wwww
      mul r3.z, cb0[13].z, cb0[13].y
      div r5.z, r4.z, r3.z
      add r1.xy, r1.xyxx, cb0[14].xzxx
      mul r1.xy, r1.xyxx, cb0[13].wwww
      div r1.z, r1.z, r3.z
      add r3.zw, cb0[14].xxxy, cb0[19].xxxy
      add r4.xy, cb0[14].xyxx, r13.xyxx
      frc r4.z, r2.x
      mad r2.z, r4.z, cb0[26].x, r2.z
      ge r1.w, r2.y, r1.w
      mov r6.xyzw, l(0,0,0,0)
      mov r2.y, r2.z
      mov r8.xyz, r1.xyzx
      mov r7.xyzw, l(0,0,0,0)
      loop
        ge r4.z, l(1.000000), r2.y
        breakc_nz r4.z
        mad r4.zw, r3.zzzw, cb0[13].wwww, -r8.xxxy
        mul r4.zw, r3.xxxy, |r4.zzzw|
        max r4.z, r4.w, r4.z
        sample_l r9.xyzw, r8.xyxx, t2.xyzw, s1, l(0.000000)
        mad r4.z, r4.z, cb0[20].w, |r8.z|
        add r4.z, -r4.z, r9.w
        mad r10.xy, r4.xyxx, cb0[13].wwww, -r8.xyxx
        dp2 r4.w, r10.xyxx, r10.xyxx
        add r4.w, -r4.w, cb0[12].x
        max r4.w, r4.w, l(0.000000)
        mad r4.z, -r4.w, cb0[12].y, r4.z
        lt r4.w, l(0.000000), r4.z
        if_nz r4.w
          add r4.w, -r4.z, l(1.000000)
          mul r10.xyz, r4.wwww, cb0[11].xyzx
          mul r11.w, r4.z, l(0.400000)
          mul r9.xyz, r9.xyzx, r11.wwww
          mul r11.xyz, r9.xyzx, r10.xyzx
          add r4.z, -r7.w, l(1.000000)
          mad r9.xyzw, r11.xyzw, r4.zzzz, r7.xyzw
          lt r4.z, l(0.990000), r9.w
          if_nz r4.z
            mov r6.xyzw, r11.xyzw
            mov r7.xyzw, r9.xyzw
            break
          endif
          mov r6.xyzw, r11.xyzw
          mov r7.xyzw, r9.xyzw
        endif
        add r2.y, r2.y, l(-1.000000)
        add r8.xyz, r5.xyzx, r8.xyzx
      endloop
      lt r1.x, r7.w, l(0.990000)
      and r1.xw, r1.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
      add r1.y, -r7.w, l(1.000000)
      mul r1.z, r2.y, r1.w
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r1.xyzw, r6.xyzw, r1.xxxx, r7.xyzw
      div r0.xyz, r0.xyzx, r0.wwww
      dp3 r0.x, r0.xyzx, cb0[22].xyzx
      mul r0.x, r0.x, cb0[25].w
      max r0.x, r0.x, l(0.000000)
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r1.w, r0.x
      add r0.yzw, -r1.xxyz, cb0[23].xxyz
      mad r1.xyz, r0.xxxx, r0.yzwy, r1.xyzx
      mul r0.xyzw, r1.xyzw, cb0[10].wwww
      mul r0.xyzw, r2.wwww, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.xyzw, r1.xxxx
sample r4.xyzw, v1.xyxx, t3.xyzw, s0
mad_sat r0.x, -r0.w, r1.x, l(1.000000)
mad r0.xyz, r4.xyzx, r0.xxxx, r3.xyzx
lt r0.w, cb0[2].y, l(0.000000)
add r1.x, -cb0[21].y, l(1.000000)
movc r0.w, r0.w, r1.x, cb0[21].y
add r1.x, -v1.x, cb0[21].x
add r1.y, r0.w, -v1.y
mad r0.w, r2.x, cb0[25].z, l(1.000000)
mul r0.w, r0.w, cb0[24].x
mov r2.xyz, l(0,0,0,0)
mov r1.zw, v1.xxxy
mov r2.w, cb0[25].x
mov r3.x, cb0[24].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r1.zw, r1.xxxy, r0.wwww, r1.zzzw
  sample_l r4.xyzw, r1.zwzz, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r2.wwww, r4.xyzx
  mad r2.xyz, r4.xyzx, cb0[24].wwww, r2.xyzx
  mul r2.w, r2.w, cb0[25].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r2.xyzx, cb0[24].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used