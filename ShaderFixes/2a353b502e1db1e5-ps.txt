// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 2a353b502e1db1e5-ps.txt
// 3DMigoto: 2a353b502e1db1e5 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 152 3 11
//   undeciphered1a: 23
//   Keywords { "FOG_AREA_BOX" "FOG_VOID_SPHERE" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT4" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 624
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 400 [_FogPointLightPosition2] 3
//   Vector 416 [_FogPointLightColor2] 3
//   Vector 432 [_FogPointLightPosition3] 3
//   Vector 448 [_FogPointLightColor3] 3
//   Vector 464 [_FogPointLightPosition4] 3
//   Vector 480 [_FogPointLightColor4] 3
//   Vector 496 [_SunPosition] 3
//   Vector 512 [_SunDir] 3
//   Vector 528 [_SunColor] 3
//   Vector 544 [_FogScatteringData]
//   Vector 560 [_FogScatteringData2]
//   Float 576 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_MainTex] 2D 0
//   SetTexture 3 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:43:12 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[37], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 25
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r23.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 2a353b502e1db1e5-ps.txt

mul r23.w, -r23.x, r23.y
mad r24.xyz, -r23.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.z, -cb0[13].x, r24.z
mov r1.xy, r24.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.zzwz
and r2.y, r2.z, r2.y
lt r2.z, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r5.xyz, -r2.yzwy, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.yzw, -r2.yyzw, r4.xxyz
  mul r2.yzw, r2.yyzw, r3.xxyz
  min r4.xyz, r5.xyzx, r2.yzwy
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.yzw, r5.xxyz, r2.yyzw
  min r2.yz, r2.zzwz, r2.yyyy
  min r2.y, r2.z, r2.y
  min r2.z, r0.w, cb0[12].z
  min r2.y, r2.z, r2.y
  add r2.y, -r1.w, r2.y
  lt r2.w, l(0.000000), r2.y
  if_nz r2.w
    div r3.xyz, r1.wwww, r3.xyzx
    add r1.xyz, r1.xyzx, r3.xyzx
    mul r3.xyz, r0.xyzx, r2.yyyy
    div r3.xyz, r3.xyzx, r0.wwww
    add r3.xyz, r1.xyzx, r3.xyzx
    add r3.xyz, -r3.xyzx, cb0[17].xyzx
    dp3 r2.w, r3.xyzx, r3.xyzx
    sqrt r2.w, r2.w
    mad r2.w, r2.w, cb0[18].x, l(-1.000000)
    mad_sat r2.w, cb0[18].w, r2.w, l(1.000000)
    lt r3.x, l(0.000000), r2.w
    if_nz r3.x
      div r3.xy, cb0[20].xyxx, cb0[13].wwww
      log r3.z, r2.y
      mul r3.z, r3.z, l(0.693147182)
      max r3.z, r3.z, l(0.000000)
      mad r3.z, r3.z, cb0[15].x, l(0.100000)
      mul r3.z, r3.z, cb0[13].z
      mul_sat r3.w, r2.z, cb0[15].y
      mul r3.z, r3.w, r3.z
      add r1.w, -r1.w, r2.z
      max r2.z, r3.z, l(0.010000)
      mul r4.xyz, r0.xyzx, r2.zzzz
      div r4.xyz, r4.xyzx, r0.wwww
      div r2.z, r2.y, r2.z
      add r5.xyz, r1.xyzx, -cb0[21].xyzx
      add r6.xyz, r1.xyzx, -cb0[23].xyzx
      add r7.xyz, r1.xyzx, -cb0[25].xyzx
      add r8.xyz, r1.xyzx, -cb0[27].xyzx
      add r9.xyz, r1.xyzx, -cb0[29].xyzx
      mul r10.xy, r4.xyxx, cb0[13].wwww
      mul r3.z, cb0[13].z, cb0[13].y
      div r10.z, r4.z, r3.z
      add r1.xy, r1.xyxx, cb0[14].xzxx
      mul r1.xy, r1.xyxx, cb0[13].wwww
      div r1.z, r1.z, r3.z
      add r3.zw, cb0[14].xxxy, cb0[19].xxxy
      frc r4.w, r2.x
      mad r2.z, r4.w, cb0[36].x, r2.z
      ge r1.w, r2.y, r1.w
      mov r11.xyzw, l(0,0,0,0)
      mov r12.xyz, r5.xyzx
      mov r13.xyz, r6.xyzx
      mov r14.xyz, r7.xyzx
      mov r15.xyz, r8.xyzx
      mov r16.xyz, r9.xyzx
      mov r2.y, r2.z
      mov r18.xyz, r1.xyzx
      mov r17.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r2.y
        breakc_nz r4.w
        mad r19.xy, r3.zwzz, cb0[13].wwww, -r18.xyxx
        mul r19.xy, r3.xyxx, |r19.xyxx|
        max r4.w, r19.y, r19.x
        sample_l r19.xyzw, r18.xyxx, t1.xyzw, s1, l(0.000000)
        mad r4.w, r4.w, cb0[20].w, |r18.z|
        add r4.w, -r4.w, r19.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r20.xyz, r5.wwww, cb0[11].xyzx
          mul r21.w, r4.w, l(0.400000)
          dp3 r4.w, r12.xyzx, r12.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r13.xyzx, r13.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r6.w, r14.xyzx, r14.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r7.w, r15.xyzx, r15.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          dp3 r8.w, r16.xyzx, r16.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          mul r22.xyz, r7.wwww, cb0[28].xyzx
          mad r22.xyz, cb0[30].xyzx, r8.wwww, r22.xyzx
          mad r22.xyz, cb0[26].xyzx, r6.wwww, r22.xyzx
          mad r22.xyz, cb0[24].xyzx, r5.wwww, r22.xyzx
          mad r22.xyz, cb0[22].xyzx, r4.wwww, r22.xyzx
          mad r19.xyz, r22.xyzx, r21.wwww, r19.xyzx
          mul r19.xyz, r21.wwww, r19.xyzx
          mul r21.xyz, r19.xyzx, r20.xyzx
          add r4.w, -r17.w, l(1.000000)
          mad r19.xyzw, r21.xyzw, r4.wwww, r17.xyzw
          lt r4.w, l(0.990000), r19.w
          if_nz r4.w
            mov r11.xyzw, r21.xyzw
            mov r17.xyzw, r19.xyzw
            break
          endif
          mov r11.xyzw, r21.xyzw
          mov r17.xyzw, r19.xyzw
        endif
        add r12.xyz, r4.xyzx, r12.xyzx
        add r13.xyz, r4.xyzx, r13.xyzx
        add r14.xyz, r4.xyzx, r14.xyzx
        add r15.xyz, r4.xyzx, r15.xyzx
        add r16.xyz, r4.xyzx, r16.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r18.xyz, r10.xyzx, r18.xyzx
      endloop
      lt r1.x, r17.w, l(0.990000)
      and r1.xw, r1.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
      add r1.y, -r17.w, l(1.000000)
      mul r1.z, r2.y, r1.w
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r1.xyzw, r11.xyzw, r1.xxxx, r17.xyzw
      div r0.xyz, r0.xyzx, r0.wwww
      dp3 r0.x, r0.xyzx, cb0[32].xyzx
      mul r0.x, r0.x, cb0[35].w
      max r0.x, r0.x, l(0.000000)
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r1.w, r0.x
      add r0.yzw, -r1.xxyz, cb0[33].xxyz
      mad r1.xyz, r0.xxxx, r0.yzwy, r1.xyzx
      mul r0.xyzw, r1.xyzw, cb0[10].wwww
      mul r0.xyzw, r2.wwww, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.xyzw, r1.xxxx
sample r4.xyzw, v1.xyxx, t2.xyzw, s0
sample r5.xyzw, v1.zwzz, t3.xyzw, s3
add r0.xyz, -r4.xyzx, r5.xyzx
mad r0.xyz, r3.wwww, r0.xyzx, r4.xyzx
mad_sat r0.w, -r0.w, r1.x, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, r3.xyzx
lt r0.w, cb0[2].y, l(0.000000)
add r1.x, -cb0[31].y, l(1.000000)
movc r0.w, r0.w, r1.x, cb0[31].y
add r1.x, -v1.x, cb0[31].x
add r1.y, r0.w, -v1.y
mad r0.w, r2.x, cb0[35].z, l(1.000000)
mul r0.w, r0.w, cb0[34].x
mov r2.xyz, l(0,0,0,0)
mov r1.zw, v1.xxxy
mov r2.w, cb0[35].x
mov r3.x, cb0[34].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r1.zw, r1.xxxy, r0.wwww, r1.zzzw
  sample_l r4.xyzw, r1.zwzz, t2.xyzw, s0, l(0.000000)
  mul r4.xyz, r2.wwww, r4.xyzx
  mad r2.xyz, r4.xyzx, cb0[34].wwww, r2.xyzx
  mul r2.w, r2.w, cb0[35].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r2.xyzx, cb0[34].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used