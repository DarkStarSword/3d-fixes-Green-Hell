// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed bfac270a6e2ef102-ps.txt
// 3DMigoto: bfac270a6e2ef102 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 162 5 11
//   undeciphered1a: 15
//   Keywords { "FOG_AREA_BOX" "FOG_VOID_BOX" "FOG_HAZE_ON" "FOG_BLUR_ON" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 512
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogSkyColor]
//   Vector 432 [_VolumetricFogSunWorldPos]
//   Vector 448 [_VolumetricFogSunShadowsData]
//   Float 464 [_Jitter]
//   Matrix 368 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:05:44 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 17
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed bfac270a6e2ef102-ps.txt

mul r15.w, -r15.x, r15.y
mad r16.xyz, -r15.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r16.y
mov r1.xz, r16.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  sqrt r0.w, r0.w
  add r4.xyz, r1.xyzx, -cb0[19].xyzx
  div r5.xyz, r0.wwww, r3.xyzx
  div r6.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r7.xyz, -r4.xyzx, -r6.xyzx
  mul r7.xyz, r5.xyzx, r7.xyzx
  add r4.xyz, -r4.xyzx, r6.xyzx
  mul r4.xyz, r4.xyzx, r5.xyzx
  min r6.xyz, r7.xyzx, r4.xyzx
  max r2.yw, r6.yyyz, r6.xxxx
  max r1.w, r2.w, r2.y
  max r1.w, r1.w, l(0.000000)
  max r4.xyz, r7.xyzx, r4.xyzx
  min r2.yw, r4.yyyz, r4.xxxx
  min r2.y, r2.w, r2.y
  min r2.w, r0.w, cb0[12].z
  min r2.y, r2.w, r2.y
  add r2.y, -r1.w, r2.y
  lt r3.w, l(0.000000), r2.y
  if_nz r3.w
    div r4.xyz, r1.wwww, r5.xyzx
    add r4.xyz, r1.xyzx, r4.xyzx
    mul r1.xyz, r3.xyzx, r2.yyyy
    div r1.xyz, r1.xyzx, r0.wwww
    add r1.xyz, r1.xyzx, r4.xyzx
    add r1.xyz, -r1.xyzx, cb0[17].xyzx
    mul r1.xyz, |r1.xyzx|, cb0[18].xyzx
    max r1.x, r1.y, r1.x
    max r1.x, r1.z, r1.x
    add r1.x, r1.x, l(-1.000000)
    mad_sat r1.x, cb0[18].w, r1.x, l(1.000000)
    lt r1.y, l(0.000000), r1.x
    if_nz r1.y
      div r1.yz, cb0[20].xxzx, cb0[13].wwww
      log r3.w, r2.y
      mul r3.w, r3.w, l(0.693147182)
      max r3.w, r3.w, l(0.000000)
      mad r3.w, r3.w, cb0[15].x, l(0.100000)
      mul r3.w, r3.w, cb0[13].z
      mul_sat r5.x, r2.w, cb0[15].y
      mul r3.w, r3.w, r5.x
      add r2.w, -r1.w, r2.w
      max r3.w, r3.w, l(0.010000)
      mul r5.xyz, r3.wwww, r3.xyzx
      div r5.xyz, r5.xyzx, r0.wwww
      div r3.w, r2.y, r3.w
      mul r6.xz, r5.xxzx, cb0[13].wwww
      mul r5.x, cb0[13].z, cb0[13].y
      div r6.y, r5.y, r5.x
      add r5.yz, r4.xxzx, cb0[14].xxzx
      mul r5.yz, r5.yyzy, cb0[13].wwww
      div r5.x, r4.y, r5.x
      add r7.xy, cb0[14].xzxx, cb0[19].xzxx
      frc r5.w, r0.z
      mad r3.w, r5.w, cb0[29].x, r3.w
      add r4.w, r4.y, cb0[13].x
      mul r8.xyz, r4.wwww, cb0[24].xywx
      mad r8.xyz, cb0[23].xywx, r4.xxxx, r8.xyzx
      mad r8.xyz, cb0[25].xywx, r4.zzzz, r8.xyzx
      add r8.xyz, r8.xyzx, cb0[26].xywx
      div r7.zw, r8.xxxy, r8.zzzz
      mad r7.zw, r7.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r4.y, r0.z, cb0[28].y, l(1.000000)
      mul r4.y, r2.y, r4.y
      mul r3.xyz, r3.xyzx, r4.yyyy
      div r3.xyz, r3.xyzx, r0.wwww
      add r3.xyz, r3.xyzx, r4.xwzx
      mul r8.xyz, r3.yyyy, cb0[24].xywx
      mad r8.xyz, cb0[23].xywx, r3.xxxx, r8.xyzx
      mad r8.xyz, cb0[25].xywx, r3.zzzz, r8.xyzx
      add r8.xyz, r8.xyzx, cb0[26].xywx
      div r8.xy, r8.xyxx, r8.zzzz
      mad r8.xy, r8.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r0.w, -r1.w, cb0[27].w
      mul_sat r0.w, r0.w, l(0.0285714287)
      mul r0.w, r0.w, cb0[28].x
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
      ge r2.y, r2.y, r2.w
      and r2.y, r2.y, l(0x3f800000)
      add r7.zw, r7.zzzw, -r8.xxxy
      add r4.xyz, -r3.xyzx, r4.xwzx
      mov r9.xyzw, l(0,0,0,0)
      mov r2.w, r3.w
      mov r11.xyz, r5.yxzy
      mov r10.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r2.w
        breakc_nz r4.w
        mad r8.zw, r7.xxxy, cb0[13].wwww, -r11.xxxz
        mul r8.zw, r1.yyyz, |r8.zzzw|
        max r4.w, r8.w, r8.z
        sample_l r12.xyzw, r11.xzxx, t2.xyzw, s1, l(0.000000)
        mad r4.w, r4.w, cb0[20].w, |r11.y|
        add r4.w, -r4.w, r12.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r13.xyz, r5.wwww, cb0[11].xyzx
          mul r13.w, r4.w, l(0.400000)
          mul r4.w, r1.w, r2.w
          mad r8.zw, r4.wwww, r7.zzzw, r8.xxxy
          sample_l r14.xyzw, r8.zwzz, t3.xyzw, s5, l(0.000000)
          dp4 r5.w, r14.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          mad r14.xyz, r4.wwww, r4.xyzx, r3.xyzx
          add r14.xyz, r14.xyzx, -cb0[27].xyzx
          dp3 r4.w, r14.xyzx, r14.xyzx
          sqrt r4.w, r4.w
          add_sat r4.w, -r4.w, r5.w
          mul r5.w, r0.w, r10.w
          add r4.w, r4.w, l(-1.000000)
          mad r5.w, r5.w, r4.w, l(1.000000)
          mul r12.xyz, r5.wwww, r12.xyzx
          mad r4.w, cb0[28].z, r4.w, l(1.000000)
          mul r13.xyzw, r4.wwww, r13.xyzw
          mul r12.xyz, r12.xyzx, r13.wwww
          mul r13.xyz, r12.xyzx, r13.xyzx
          add r4.w, -r10.w, l(1.000000)
          mad r12.xyzw, r13.xyzw, r4.wwww, r10.xyzw
          lt r4.w, l(0.990000), r12.w
          if_nz r4.w
            mov r9.xyzw, r13.xyzw
            mov r10.xyzw, r12.xyzw
            break
          endif
          mov r9.xyzw, r13.xyzw
          mov r10.xyzw, r12.xyzw
        endif
        add r2.w, r2.w, l(-1.000000)
        add r11.xyz, r6.xyzx, r11.xyzx
      endloop
      lt r0.w, r10.w, l(0.990000)
      and r0.w, r0.w, l(0x3f800000)
      add r1.y, -r10.w, l(1.000000)
      mul r1.z, r2.w, r2.y
      mul r0.w, r0.w, r1.y
      mul r0.w, r1.z, r0.w
      mad r3.xyzw, r9.xyzw, r0.wwww, r10.xyzw
      mul r3.xyzw, r3.xyzw, cb0[10].wwww
      mul r1.xyzw, r1.xxxx, r3.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r0.z, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.zzzz, r1.xyzw
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
sample r5.xyzw, v1.zwzz, t5.xyzw, s4
add r1.xyz, -r4.xyzx, r5.xyzx
mad r1.xyz, r3.wwww, r1.xyzx, r4.xyzx
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r2.xy, r0.xxxx, r2.xzxx
  mad r2.xy, r2.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r2.xyzw, r2.xyxx, t2.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r2.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[21].w
  add r2.xyz, -r1.xyzx, cb0[21].xyzx
  mad r1.xyz, r0.xxxx, r2.xyzx, r1.xyzx
endif
mad_sat r0.x, -r1.w, r0.z, l(1.000000)
mad o0.xyz, r1.xyzx, r0.xxxx, r3.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used