// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4bb4ccb335c2453d-ps.txt
// 3DMigoto: 4bb4ccb335c2453d |    Unity headers extracted from Amplify_item_selection
//    Shader "Amplify/item_selection" {
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "IsEmissive"="true" "QUEUE"="Geometry+0" "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "IsEmissive"="true" "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry+0" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Amplify_item_selection:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 220 9 8
//   undeciphered1a: 16
//   Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "FOG_LINEAR" "INSTANCING_ON" }
//   undeciphered2: 1 8 8 7 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 256
//   Vector 32 [_LightColor0]
//   Vector 64 [_Normals_ST]
//   Float 80 [_DetailNormalPower]
//   Vector 96 [_Detail_Normal_ST]
//   Vector 112 [_Albedo_ST]
//   Float 128 [_Select_Emission]
//   Float 132 [_EmissionONOFF]
//   Vector 144 [_EmissionColor]
//   Vector 160 [_EmissionMask_ST]
//   Float 176 [_RimPower]
//   Vector 192 [_RimColor]
//   Vector 208 [_Metallic_ST]
//   Float 224 [_SmoothnessfromMetalic]
//   Float 228 [_SmthPower]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityReflectionProbes" 128
//   Vector 0 [unity_SpecCube0_BoxMax]
//   Vector 16 [unity_SpecCube0_BoxMin]
//   Vector 32 [unity_SpecCube0_ProbePosition]
//   Vector 48 [unity_SpecCube0_HDR]
//   Vector 64 [unity_SpecCube1_BoxMax]
//   Vector 80 [unity_SpecCube1_BoxMin]
//   Vector 96 [unity_SpecCube1_ProbePosition]
//   Vector 112 [unity_SpecCube1_HDR]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "UnityDrawCallInfo" 16
//   ScalarInt 0 [unity_BaseInstanceID]
//   ConstBuffer "UnityInstancing_PerDraw2" 224
//   Struct 0 [unity_Builtins2Array] 2 112
//   Vector 0 [unity_SHArArray]
//   Vector 16 [unity_SHAgArray]
//   Vector 32 [unity_SHAbArray]
//   Vector 48 [unity_SHBrArray]
//   Vector 64 [unity_SHBgArray]
//   Vector 80 [unity_SHBbArray]
//   Vector 96 [unity_SHCArray]
//   SetTexture 0 [_Normals] 2D 2
//   SetTexture 1 [_Detail_Normal] 2D 3
//   SetTexture 2 [_Albedo] 2D 4
//   SetTexture 3 [_EmissionMask] 2D 5
//   SetTexture 4 [_Metallic] 2D 6
//   SetTexture 5 [unity_SpecCube0] CUBE 0
//   SetTexture 6 [unity_SpecCube1] CUBE -1
//   SetTexture 7 [unity_ProbeVolumeSH] 3D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityFog" 3
//   BindCB "UnityReflectionProbes" 4
//   BindCB "UnityProbeVolume" 5
//   BindCB "UnityDrawCallInfo" 6
//   BindCB "UnityInstancing_PerDraw2" 7
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:59:30 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 5     z         1     NONE   float     z
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyzw        6     NONE   float
// TEXCOORD                 7   xyzw        7     NONE   float
// SV_InstanceID            0   x           8     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb6[1], immediateIndexed
dcl_constantbuffer cb7[14], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecube (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texture3d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps constant v8.x
dcl_output o0.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4bb4ccb335c2453d-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

iadd r0.x, v8.x, cb6[0].x
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r0.yzw, -r1.xxyz, r17.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r2.xyz, r0.yzwy, r1.wwww
mul r3.xyz, r2.yyyy, v3.xyzx
mad r3.xyz, v2.xyzx, r2.xxxx, r3.xyzx
mad r3.xyz, v4.xyzx, r2.zzzz, r3.xyzx
mad r4.xy, v1.xyxx, cb0[4].xyxx, cb0[4].zwzz
sample r4.xyzw, r4.xyxx, t0.xyzw, s2
mul r4.x, r4.w, r4.x
mad r4.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r4.xyxx, r4.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r4.z, r2.w
mad r5.xy, v1.xyxx, cb0[6].xyxx, cb0[6].zwzz
sample r5.xyzw, r5.xyxx, t1.xyzw, s3
mul r5.x, r5.w, r5.x
mad r5.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r5.zw, r5.xxxy, cb0[5].xxxx
dp2 r2.w, r5.zwzz, r5.zwzz
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r2.w, r2.w
mad r5.xy, r5.xyxx, cb0[5].xxxx, r4.xyxx
mul r5.z, r2.w, r4.z
dp3 r2.w, r5.xyzx, r5.xyzx
rsq r2.w, r2.w
mul r5.xyz, r2.wwww, r5.xyzx
mad r6.xy, v1.xyxx, cb0[7].xyxx, cb0[7].zwzz
sample r6.xyzw, r6.xyxx, t2.xyzw, s4
mad r7.xy, v1.xyxx, cb0[10].xyxx, cb0[10].zwzz
sample r7.xyzw, r7.xyxx, t3.xyzw, s5
mul r7.x, r7.w, r7.x
mad r7.xy, r7.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r7.xyxx, r7.xyxx
min r2.w, r2.w, l(1.000000)
add r2.w, -r2.w, l(1.000000)
sqrt r7.z, r2.w
mad r7.xyz, r7.xyzx, -cb0[9].xyzx, cb0[9].xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
dp3_sat r2.w, r4.xyzx, r3.xyzx
mul r3.xyz, r7.xyzx, cb0[8].yyyy
add r2.w, -r2.w, l(1.000000)
log r2.w, r2.w
mul r2.w, r2.w, cb0[11].x
exp r2.w, r2.w
mad r4.xyz, r2.wwww, cb0[12].xyzx, -r3.xyzx
mad r3.xyz, cb0[8].xxxx, r4.xyzx, r3.xyzx
mad r4.xy, v1.xyxx, cb0[13].xyxx, cb0[13].zwzz
sample r4.xyzw, r4.xyxx, t4.xyzw, s6
add r2.w, -r6.w, r4.w
mad r2.w, cb0[14].x, r2.w, r6.w
imul null, r0.x, r0.x, l(7)
eq r3.w, cb5[0].x, l(1.000000)
if_nz r3.w
  eq r4.y, cb5[0].y, l(1.000000)
  mul r7.xyz, v3.wwww, cb5[2].xyzx
  mad r7.xyz, cb5[1].xyzx, v2.wwww, r7.xyzx
  mad r7.xyz, cb5[3].xyzx, v4.wwww, r7.xyzx
  add r7.xyz, r7.xyzx, cb5[4].xyzx
  movc r4.yzw, r4.yyyy, r7.xxyz, r1.xxyz
  add r4.yzw, r4.yyzw, -cb5[6].xxyz
  mul r7.yzw, r4.yyzw, cb5[5].xxyz
  mad r4.y, r7.y, l(0.250000), l(0.750000)
  mad r4.z, cb5[0].z, l(0.500000), l(0.750000)
  max r7.x, r4.z, r4.y
  sample r7.xyzw, r7.xzwx, t7.xyzw, s1
else
  mov r7.xyzw, cb7[r0.x + 6].wwww
endif
dp4_sat r4.y, r7.xyzw, cb2[46].xyzw
dp3 r7.x, v2.xyzx, r5.xyzx
dp3 r7.y, v3.xyzx, r5.xyzx
dp3 r7.z, v4.xyzx, r5.xyzx
dp3 r4.z, r7.xyzx, r7.xyzx
rsq r4.z, r4.z
mul r5.xyz, r4.zzzz, r7.xyzx
mad r4.z, -r2.w, cb0[14].y, l(1.000000)
dp3 r4.w, -r2.xyzx, r5.xyzx
add r4.w, r4.w, r4.w
mad r7.xyz, r5.xyzx, -r4.wwww, -r2.xyzx
mul r8.xyz, r4.yyyy, cb0[2].xyzx
if_nz r3.w
  eq r3.w, cb5[0].y, l(1.000000)
  mul r9.xyz, v3.wwww, cb5[2].xyzx
  mad r9.xyz, cb5[1].xyzx, v2.wwww, r9.xyzx
  mad r9.xyz, cb5[3].xyzx, v4.wwww, r9.xyzx
  add r9.xyz, r9.xyzx, cb5[4].xyzx
  movc r9.xyz, r3.wwww, r9.xyzx, r1.xyzx
  add r9.xyz, r9.xyzx, -cb5[6].xyzx
  mul r9.yzw, r9.xxyz, cb5[5].xxyz
  mul r3.w, r9.y, l(0.250000)
  mul r4.y, cb5[0].z, l(0.500000)
  mad r4.w, -cb5[0].z, l(0.500000), l(0.250000)
  max r3.w, r3.w, r4.y
  min r9.x, r4.w, r3.w
  sample r10.xyzw, r9.xzwx, t7.xyzw, s1
  add r11.xyz, r9.xzwx, l(0.250000, 0.000000, 0.000000, 0.000000)
  sample r11.xyzw, r11.xyzx, t7.xyzw, s1
  add r9.xyz, r9.xzwx, l(0.500000, 0.000000, 0.000000, 0.000000)
  sample r9.xyzw, r9.xyzx, t7.xyzw, s1
  mov r5.w, l(1.000000)
  dp4 r10.x, r10.xyzw, r5.xyzw
  dp4 r10.y, r11.xyzw, r5.xyzw
  dp4 r10.z, r9.xyzw, r5.xyzw
else
  mov r5.w, l(1.000000)
  dp4 r10.x, cb7[r0.x + 0].xyzw, r5.xyzw
  dp4 r10.y, cb7[r0.x + 1].xyzw, r5.xyzw
  dp4 r10.z, cb7[r0.x + 2].xyzw, r5.xyzw
endif
add r9.xyz, r10.xyzx, v5.xyzx
max r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r0.x, l(0.000000), cb4[2].w
if_nz r0.x
  dp3 r0.x, r7.xyzx, r7.xyzx
  rsq r0.x, r0.x
  mul r10.xyz, r0.xxxx, r7.xyzx
  add r11.xyz, -r1.xyzx, cb4[0].xyzx
  div r11.xyz, r11.xyzx, r10.xyzx
  add r12.xyz, -r1.xyzx, cb4[1].xyzx
  div r12.xyz, r12.xyzx, r10.xyzx
  lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
  movc r11.xyz, r13.xyzx, r11.xyzx, r12.xyzx
  min r0.x, r11.y, r11.x
  min r0.x, r11.z, r0.x
  add r11.xyz, r1.xyzx, -cb4[2].xyzx
  mad r10.xyz, r10.xyzx, r0.xxxx, r11.xyzx
else
  mov r10.xyz, r7.xyzx
endif
mad r0.x, -r4.z, l(0.700000), l(1.700000)
mul r0.x, r0.x, r4.z
mul r0.x, r0.x, l(6.000000)
sample_l r10.xyzw, r10.xyzx, t5.xyzw, s0, r0.x
add r3.w, r10.w, l(-1.000000)
mad r3.w, cb4[3].w, r3.w, l(1.000000)
log r3.w, r3.w
mul r3.w, r3.w, cb4[3].y
exp r3.w, r3.w
mul r3.w, r3.w, cb4[3].x
mul r11.xyz, r10.xyzx, r3.wwww
lt r4.y, cb4[1].w, l(0.999990)
if_nz r4.y
  lt r4.y, l(0.000000), cb4[6].w
  if_nz r4.y
    dp3 r4.y, r7.xyzx, r7.xyzx
    rsq r4.y, r4.y
    mul r12.xyz, r4.yyyy, r7.xyzx
    add r13.xyz, -r1.xyzx, cb4[4].xyzx
    div r13.xyz, r13.xyzx, r12.xyzx
    add r14.xyz, -r1.xyzx, cb4[5].xyzx
    div r14.xyz, r14.xyzx, r12.xyzx
    lt r15.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
    movc r13.xyz, r15.xyzx, r13.xyzx, r14.xyzx
    min r4.y, r13.y, r13.x
    min r4.y, r13.z, r4.y
    add r1.xyz, r1.xyzx, -cb4[6].xyzx
    mad r7.xyz, r12.xyzx, r4.yyyy, r1.xyzx
  endif
  sample_l r7.xyzw, r7.xyzx, t6.xyzw, s0, r0.x
  add r0.x, r7.w, l(-1.000000)
  mad r0.x, cb4[7].w, r0.x, l(1.000000)
  log r0.x, r0.x
  mul r0.x, r0.x, cb4[7].y
  exp r0.x, r0.x
  mul r0.x, r0.x, cb4[7].x
  mul r1.xyz, r7.xyzx, r0.xxxx
  mad r7.xyz, r3.wwww, r10.xyzx, -r1.xyzx
  mad r11.xyz, cb4[1].wwww, r7.xyzx, r1.xyzx
endif
add r1.xyz, r6.xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
mad r1.xyz, r4.xxxx, r1.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
mad r0.x, -r4.x, l(0.960000), l(0.960000)
mul r4.xyw, r0.xxxx, r6.xyxz
mad r0.yzw, r0.yyzw, r1.wwww, cb2[0].xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
max r1.w, r1.w, l(0.001000)
rsq r1.w, r1.w
mul r0.yzw, r0.yyzw, r1.wwww
dp3 r1.w, r5.xyzx, r2.xyzx
dp3_sat r2.x, r5.xyzx, cb2[0].xyzx
dp3_sat r2.y, r5.xyzx, r0.yzwy
dp3_sat r0.y, cb2[0].xyzx, r0.yzwy
mul r0.z, r0.y, r0.y
dp2 r0.z, r0.zzzz, r4.zzzz
add r0.z, r0.z, l(-0.500000)
add r0.w, -r2.x, l(1.000000)
mul r2.z, r0.w, r0.w
mul r2.z, r2.z, r2.z
mul r0.w, r0.w, r2.z
mad r0.w, r0.z, r0.w, l(1.000000)
add r2.z, -|r1.w|, l(1.000000)
mul r3.w, r2.z, r2.z
mul r3.w, r3.w, r3.w
mul r2.z, r2.z, r3.w
mad r0.z, r0.z, r2.z, l(1.000000)
mul r0.z, r0.z, r0.w
mul r0.z, r2.x, r0.z
mul r0.w, r4.z, r4.z
max r0.w, r0.w, l(0.002000)
add r3.w, -r0.w, l(1.000000)
mad r4.z, |r1.w|, r3.w, r0.w
mad r3.w, r2.x, r3.w, r0.w
mul r1.w, |r1.w|, r3.w
mad r1.w, r2.x, r4.z, r1.w
add r1.w, r1.w, l(0.000010)
div r1.w, l(0.500000), r1.w
mul r3.w, r0.w, r0.w
mad r4.z, r2.y, r3.w, -r2.y
mad r2.y, r4.z, r2.y, l(1.000000)
mul r3.w, r3.w, l(0.318309873)
mad r2.y, r2.y, r2.y, l(1.000000012E-007)
div r2.y, r3.w, r2.y
mul r1.w, r1.w, r2.y
mul r1.w, r1.w, l(3.14159274)
mul r1.w, r2.x, r1.w
max r1.w, r1.w, l(0.000000)
mad r0.w, r0.w, r0.w, l(1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
dp3 r2.x, r1.xyzx, r1.xyzx
ne r2.x, r2.x, l(0.000000)
and r2.x, r2.x, l(0x3f800000)
mul r1.w, r1.w, r2.x
mad r0.x, r2.w, cb0[14].y, -r0.x
add_sat r0.x, r0.x, l(1.000000)
mad r2.xyw, r8.xyxz, r0.zzzz, r9.xyxz
mul r5.xyz, r8.xyzx, r1.wwww
add r0.y, -r0.y, l(1.000000)
mul r0.z, r0.y, r0.y
mul r0.z, r0.z, r0.z
mul r0.y, r0.y, r0.z
add r6.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r6.xyz, r6.xyzx, r0.yyyy, r1.xyzx
mul r5.xyz, r5.xyzx, r6.xyzx
mad r2.xyw, r4.xyxw, r2.xyxw, r5.xyxz
mul r0.yzw, r11.xxyz, r0.wwww
add r4.xyz, -r1.xyzx, r0.xxxx
mad r1.xyz, r2.zzzz, r4.xyzx, r1.xyzx
mad r0.xyz, r0.yzwy, r1.xyzx, r2.xywx
add r0.xyz, r3.xyzx, r0.xyzx
div r0.w, v1.z, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mad_sat r0.w, r0.w, cb3[1].z, cb3[1].w
add r0.xyz, r0.xyzx, -cb3[0].xyzx
mad o0.xyz, r0.wwww, r0.xyzx, cb3[0].xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used