// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a294b4f0dfdde983-ps.txt
// 3DMigoto: a294b4f0dfdde983 |    Unity headers extracted from Hidden_HxVolumetricDirectionalLight
//    Shader "Hidden/HxVolumetricDirectionalLight" {
//      SubShader 1/1 {
//        Pass 1/3 {
//          Tags { "IGNOREPROJECTOR"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Hidden_HxVolumetricDirectionalLight:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 266 0 21
//   undeciphered1a: 16
//   Keywords { "VTRANSPARENCY_ON" "NOISE_ON" }
//   undeciphered2: 1 4 3 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 6048
//   Float 208 [hxNoiseContrast]
//   Vector 224 [Phase]
//   Vector 240 [Phase2]
//   Vector 256 [NoiseOffset] 3
//   Vector 272 [NoiseScale] 3
//   Vector 288 [Density]
//   Vector 960 [hxVolumeSettingsOld0] 2
//   Vector 968 [hxVolumeSettingsOld1] 2
//   Vector 976 [hxVolumeSettingsOld2] 2
//   Vector 984 [hxVolumeSettingsOld3] 2
//   Vector 992 [hxVolumeSettingsOld4] 2
//   Vector 1000 [hxVolumeSettingsOld5] 2
//   Vector 1008 [hxVolumeSettingsOld6] 2
//   Vector 1016 [hxVolumeSettingsOld7] 2
//   Vector 1024 [hxVolumeSettingsOld8] 2
//   Vector 1032 [hxVolumeSettingsOld9] 2
//   Vector 5120 [TransparencySliceSettings]
//   Float 5200 [hxRayOffset]
//   Float 5204 [HxTileSize]
//   Float 5696 [FirstLight]
//   Vector 5792 [ShadowBias] 3
//   Vector 5888 [_SpotLightParams]
//   Vector 5904 [CameraFoward] 3
//   Float 5916 [VolumeScale]
//   Float 5920 [ExtinctionEffect]
//   Vector 5924 [LightColour] 3
//   Vector 5936 [LightColour2] 3
//   Float 5968 [TintPercent]
//   Vector 5972 [MaxRayDistance] 2
//   Float 5980 [AmbientStrength]
//   Vector 5984 [AmbientSkyColor] 3
//   Vector 6032 [SunSize] 2
//   Matrix 320 [hxVolumeMatrixOld0]
//   Matrix 384 [hxVolumeMatrixOld1]
//   Matrix 448 [hxVolumeMatrixOld2]
//   Matrix 512 [hxVolumeMatrixOld3]
//   Matrix 576 [hxVolumeMatrixOld4]
//   Matrix 640 [hxVolumeMatrixOld5]
//   Matrix 704 [hxVolumeMatrixOld6]
//   Matrix 768 [hxVolumeMatrixOld7]
//   Matrix 832 [hxVolumeMatrixOld8]
//   Matrix 896 [hxVolumeMatrixOld9]
//   Matrix 5216 [InverseProjectionMatrix]
//   Matrix 5568 [hxCameraToWorld]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityShadows" 416
//   Vector 96 [_LightSplitsNear]
//   Vector 112 [_LightSplitsFar]
//   Matrix 128 [unity_WorldToShadow0]
//   Matrix 192 [unity_WorldToShadow1]
//   Matrix 256 [unity_WorldToShadow2]
//   Matrix 320 [unity_WorldToShadow3]
//   SetTexture 0 [VolumetricDepth] 2D 1
//   SetTexture 1 [Tile5x5] 2D 3
//   SetTexture 2 [NoiseTexture3D] 3D 0
//   SetTexture 3 [_ShadowMapTexture] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityShadows" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:50:19 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[378], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[24], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_comparison
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed a294b4f0dfdde983-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s1, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
add r1.xy, -r1.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, r1.yyyy, cb0[327].xyzw
mad r1.xyzw, cb0[326].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[328].xyzw
add r1.xyzw, r1.xyzw, cb0[329].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, -r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb0[349].xyzx
mad r1.xyw, cb0[348].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb0[350].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb0[351].xyzx
add r2.xyz, -r1.xyzx, r17.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, cb0[369].xyzx, -r2.xyzx
mul r3.xyz, cb0[373].wwww, cb0[374].xyzx
div r1.w, cb1[5].y, r0.w
mad r2.xyz, -r2.xyzx, r1.wwww, r17.xyzx
mad r1.xyz, cb0[368].xyzx, cb0[362].xxxx, r1.xyzx
add r1.xyz, -r1.xyzx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r1.w, r1.w
div r1.xyz, r1.xyzx, r1.wwww
min r1.w, r1.w, cb0[373].z
min r2.w, r1.w, cb0[373].y
add r1.w, r1.w, -r2.w
min r3.w, cb0[18].y, l(128.000000)
ftoi r4.x, r3.w
round_z r3.w, r3.w
div r4.y, r2.w, r3.w
mul r4.zw, cb0[369].wwww, cb1[6].xxxy
mul r0.xy, r0.xyxx, r4.zwzz
div r0.xy, r0.xyxx, cb0[325].yyyy
ge r4.zw, r0.xxxy, -r0.xxxy
frc r0.xy, |r0.xyxx|
movc r0.xy, r4.zwzz, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[325].yyyy
div r0.xy, r0.xyxx, cb0[325].yyyy
sample_l r5.xyzw, r0.xyxx, t1.xyzw, s3, l(0.000000)
add r0.x, r5.x, cb0[325].x
frc r0.x, r0.x
mul r0.y, r0.x, r4.y
mad r2.xyz, -r0.yyyy, r1.xyzx, r2.xyzx
dp3 r0.y, cb0[368].xyzx, r1.xyzx
lt r0.z, l(0.990000), r0.z
and r0.z, r0.z, l(0x3f800000)
mad r4.z, -cb0[15].w, r0.y, cb0[15].z
log r4.z, r4.z
mul r4.z, r4.z, l(1.500000)
exp r4.z, r4.z
max r4.z, r4.z, l(0.000100)
div r4.z, cb0[15].y, r4.z
mul r4.z, r4.z, cb0[15].x
mul r4.z, r4.z, cb0[377].x
max r0.z, r0.z, cb0[377].y
mul r0.z, r0.z, r4.z
min r0.z, r0.z, l(100.000000)
mad r4.z, -cb0[14].w, r0.y, cb0[14].z
log r4.z, r4.z
mul r4.z, r4.z, l(1.500000)
exp r4.z, r4.z
div r4.z, cb0[14].y, r4.z
mul r4.z, r4.z, cb0[14].x
max r0.z, r0.z, r4.z
add r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, cb0[373].x
mul_sat r0.y, r0.y, l(0.500000)
add r5.xyz, cb0[370].yzwy, -cb0[371].xyzx
mad r5.xyz, r0.yyyy, r5.xyzx, cb0[371].xyzx
add r6.xyz, r2.xyzx, -r17.xyzx
dp3 r0.y, r6.xyzx, r6.xyzx
sqrt r0.y, r0.y
mul r4.z, r0.w, r0.y
div r0.w, r4.y, r0.w
max r4.w, cb0[13].x, l(0.000000)
ftoi r5.w, cb0[320].z
iadd r5.w, r5.w, l(-1)
itof r5.w, r5.w
mov r6.z, l(0)
mov r7.xyzw, l(0,0,0,0)
mov r8.xyzw, l(0,0,0,0)
mov r9.xyz, r2.xyzx
mov r6.w, l(0)
mov r9.w, l(0)
mov r10.y, r0.y
mov r10.z, r4.z
mov r10.xw, l(0,0,0,0)
loop
  ige r11.x, r10.w, r4.x
  breakc_nz r11.x
  ge r11.xyzw, r10.yyyy, cb2[6].xyzw
  and r11.xyzw, r11.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  lt r12.xyzw, r10.yyyy, cb2[7].xyzw
  and r12.xyzw, r12.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  mul r13.xyzw, r11.xyzw, r12.xyzw
  add r11.x, r13.y, r13.x
  mad r11.x, r11.z, r12.z, r11.x
  mad r11.x, r11.w, r12.w, r11.x
  lt r11.x, l(0.000000), r11.x
  mul r11.yzw, r9.yyyy, cb2[9].xxyz
  mad r11.yzw, cb2[8].xxyz, r9.xxxx, r11.yyzw
  mad r11.yzw, cb2[10].xxyz, r9.zzzz, r11.yyzw
  add r11.yzw, r11.yyzw, cb2[11].xxyz
  mul r12.xyz, r9.yyyy, cb2[13].xyzx
  mad r12.xyz, cb2[12].xyzx, r9.xxxx, r12.xyzx
  mad r12.xyz, cb2[14].xyzx, r9.zzzz, r12.xyzx
  add r12.xyz, r12.xyzx, cb2[15].xyzx
  mul r14.xyz, r9.yyyy, cb2[17].xyzx
  mad r14.xyz, cb2[16].xyzx, r9.xxxx, r14.xyzx
  mad r14.xyz, cb2[18].xyzx, r9.zzzz, r14.xyzx
  add r14.xyz, r14.xyzx, cb2[19].xyzx
  mul r15.xyz, r9.yyyy, cb2[21].xyzx
  mad r15.xyz, cb2[20].xyzx, r9.xxxx, r15.xyzx
  mad r15.xyz, cb2[22].xyzx, r9.zzzz, r15.xyzx
  add r15.xyz, r15.xyzx, cb2[23].xyzx
  mul r12.xyz, r13.yyyy, r12.xyzx
  mad r11.yzw, r11.yyzw, r13.xxxx, r12.xxyz
  mad r11.yzw, r14.xxyz, r13.zzzz, r11.yyzw
  mad r11.yzw, r15.xxyz, r13.wwww, r11.yyzw
  sample_c_lz r11.y, r11.yzyy, t3.xxxx, s2, r11.w
  movc r11.x, r11.x, r11.y, l(1.000000)
  add r11.yzw, r9.xxyz, cb0[16].xxyz
  mul r11.yzw, r11.yyzw, cb0[17].xxyz
  sample_l r12.xyzw, r11.yzwy, t2.xyzw, s0, l(1.000000)
  add r11.y, r12.w, l(-0.500000)
  mad r11.y, r11.y, r4.w, l(0.500000)
  dp2 r11.y, r11.yyyy, cb0[18].xxxx
  mov r12.x, r11.y
  mov r12.yz, l(0,0,0,0)
  mov r11.z, l(0)
  loop
    ige r11.w, r12.z, l(10)
    mov r11.z, l(0)
    breakc_nz r11.w
    eq r11.w, l(-1.000000), cb0[r12.z + 60].y
    if_nz r11.w
      mov r12.xy, r12.xxxx
      mov r11.z, l(-1)
      break
    endif
    ishl r12.w, r12.z, l(2)
    mul r13.xyz, r9.yyyy, cb0[r12.w + 21].xyzx
    mad r13.xyz, cb0[r12.w + 20].xyzx, r9.xxxx, r13.xyzx
    mad r13.xyz, cb0[r12.w + 22].xyzx, r9.zzzz, r13.xyzx
    add r13.xyz, r13.xyzx, cb0[r12.w + 23].xyzx
    lt r14.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r13.xyzx
    lt r15.xyz, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r12.w, r14.x, r15.x
    and r12.w, r14.y, r12.w
    and r12.w, r15.y, r12.w
    and r12.w, r14.z, r12.w
    and r12.w, r15.z, r12.w
    if_nz r12.w
      ge r12.w, l(3.000000), cb0[r12.z + 60].y
      if_nz r12.w
        max r12.w, r12.x, cb0[r12.z + 60].x
        add r13.w, r12.x, cb0[r12.z + 60].x
        min r14.x, r12.x, cb0[r12.z + 60].x
        eq r15.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r12.z + 60].yyyy
        add r14.y, r12.x, -cb0[r12.z + 60].x
        movc r14.y, r15.w, r14.y, r12.x
        movc r14.x, r15.z, r14.x, r14.y
        movc r13.w, r15.y, r13.w, r14.x
        movc r6.x, r15.x, r12.w, r13.w
      else
        ge r12.w, l(7.000000), cb0[r12.z + 60].y
        dp3 r13.y, r13.xyzx, r13.xyzx
        sqrt r13.y, r13.y
        lt r13.y, r13.y, l(0.500000)
        and r12.w, r12.w, r13.y
        if_nz r12.w
          max r12.w, r12.x, cb0[r12.z + 60].x
          add r13.y, r12.x, cb0[r12.z + 60].x
          min r13.w, r12.x, cb0[r12.z + 60].x
          eq r14.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r12.z + 60].yyyy
          add r15.x, r12.x, -cb0[r12.z + 60].x
          movc r14.w, r14.w, r15.x, r12.x
          movc r13.w, r14.z, r13.w, r14.w
          movc r13.y, r14.y, r13.y, r13.w
          movc r6.x, r14.x, r12.w, r13.y
        else
          ge r12.w, l(11.000000), cb0[r12.z + 60].y
          dp2 r13.x, r13.xzxx, r13.xzxx
          sqrt r13.x, r13.x
          lt r13.x, r13.x, l(0.500000)
          and r12.w, r12.w, r13.x
          max r13.x, r12.x, cb0[r12.z + 60].x
          add r13.y, r12.x, cb0[r12.z + 60].x
          min r13.z, r12.x, cb0[r12.z + 60].x
          eq r14.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r12.z + 60].yyyy
          add r13.w, r12.x, -cb0[r12.z + 60].x
          movc r13.w, r14.w, r13.w, r12.x
          movc r13.z, r14.z, r13.z, r13.w
          movc r13.y, r14.y, r13.y, r13.z
          movc r13.x, r14.x, r13.x, r13.y
          movc r6.x, r12.w, r13.x, r12.x
        endif
      endif
    else
      mov r6.x, r12.x
    endif
    iadd r6.y, r12.z, l(1)
    mov r12.xyz, r6.xzyx
    mov r11.z, r11.w
  endloop
  movc r6.x, r11.z, r12.y, r12.x
  mul r6.y, r6.x, cb0[18].w
  mad r10.x, r6.y, r4.y, r10.x
  mul r6.y, r10.x, l(-1.442695)
  exp r6.y, r6.y
  mul r6.x, r4.y, r6.x
  mul r6.x, r6.y, r6.x
  add r6.y, -r11.x, l(1.000000)
  mul r6.y, r6.y, cb0[362].z
  mad r6.y, r11.x, r0.z, r6.y
  mul r6.y, r6.x, r6.y
  max r6.y, r6.y, l(0.000000)
  add r6.w, r6.y, r6.w
  mad r9.w, r6.x, l(0.079580), r9.w
  mul r11.xyw, r3.xyxz, r9.wwww
  mad r11.xyw, r5.xyxz, r6.yyyy, r11.xyxw
  dp3 r6.x, r11.xywx, l(0.0396819152, 0.458021790, 0.00609653955, 0.000000)
  div r6.y, r10.z, cb0[320].x
  log r6.y, r6.y
  mul r6.y, r6.y, cb0[320].y
  exp r6.y, r6.y
  mul r11.x, r5.w, r6.y
  mov_sat r11.x, r11.x
  add r11.x, -r11.x, l(1.000000)
  mul_sat r13.x, r6.x, r11.x
  mad_sat r14.xyzw, r6.yyyy, r5.wwww, l(-1.000000, -2.000000, -3.000000, -4.000000)
  add r14.xyzw, -r14.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul_sat r14.xyzw, r6.xxxx, r14.wxyz
  mov r13.yzw, r14.yyzw
  add r7.xyzw, r7.xyzw, r13.xyzw
  mad_sat r11.xyw, r6.yyyy, r5.wwww, l(-5.000000, -6.000000, 0.000000, -7.000000)
  add r11.xyw, -r11.xyxw, l(1.000000, 1.000000, 0.000000, 1.000000)
  mul_sat r14.yzw, r6.xxxx, r11.xxyw
  add r8.xyzw, r8.xyzw, r14.xyzw
  mad r9.xyz, -r1.xyzx, r4.yyyy, r9.xyzx
  add r10.y, r4.y, r10.y
  add r10.z, r0.w, r10.z
  iadd r10.w, r10.w, l(1)
endloop
mov o1.xyzw, r7.xyzw
mov o2.xyzw, r8.xyzw
lt r0.y, l(0.000000), r1.w
if_nz r0.y
  add r0.y, r2.w, r4.y
  mad r2.xyz, -r1.xyzx, r0.yyyy, r17.xyzx
  div r0.y, r1.w, r3.w
  mul r0.x, r0.x, r0.y
  mad r2.xyz, -r0.xxxx, r1.xyzx, r2.xyzx
  mov r6.z, l(0)
  mov r7.xyz, r2.xyzx
  mov r0.x, r6.w
  mov r0.w, r9.w
  mov r1.w, r10.x
  mov r2.w, l(0)
  loop
    ige r3.w, r2.w, r4.x
    breakc_nz r3.w
    add r8.xyz, r7.xyzx, cb0[16].xyzx
    mul r8.xyz, r8.xyzx, cb0[17].xyzx
    sample_l r8.xyzw, r8.xyzx, t2.xyzw, s0, l(1.000000)
    add r3.w, r8.w, l(-0.500000)
    mad r3.w, r3.w, r4.w, l(0.500000)
    dp2 r3.w, r3.wwww, cb0[18].xxxx
    mov r8.x, r3.w
    mov r8.yz, l(0,0,0,0)
    mov r4.y, l(0)
    loop
      ige r4.z, r8.z, l(10)
      mov r4.y, l(0)
      breakc_nz r4.z
      eq r4.z, l(-1.000000), cb0[r8.z + 60].y
      if_nz r4.z
        mov r8.xy, r8.xxxx
        mov r4.y, l(-1)
        break
      endif
      ishl r5.w, r8.z, l(2)
      mul r9.xyz, r7.yyyy, cb0[r5.w + 21].xyzx
      mad r9.xyz, cb0[r5.w + 20].xyzx, r7.xxxx, r9.xyzx
      mad r9.xyz, cb0[r5.w + 22].xyzx, r7.zzzz, r9.xyzx
      add r9.xyz, r9.xyzx, cb0[r5.w + 23].xyzx
      lt r10.yzw, l(0.000000, -0.500000, -0.500000, -0.500000), r9.xxyz
      lt r11.xyz, r9.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      and r5.w, r10.y, r11.x
      and r5.w, r10.z, r5.w
      and r5.w, r11.y, r5.w
      and r5.w, r10.w, r5.w
      and r5.w, r11.z, r5.w
      if_nz r5.w
        ge r5.w, l(3.000000), cb0[r8.z + 60].y
        if_nz r5.w
          max r5.w, r8.x, cb0[r8.z + 60].x
          add r7.w, r8.x, cb0[r8.z + 60].x
          min r8.w, r8.x, cb0[r8.z + 60].x
          eq r11.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r8.z + 60].yyyy
          add r10.y, r8.x, -cb0[r8.z + 60].x
          movc r10.y, r11.w, r10.y, r8.x
          movc r8.w, r11.z, r8.w, r10.y
          movc r7.w, r11.y, r7.w, r8.w
          movc r6.x, r11.x, r5.w, r7.w
        else
          ge r5.w, l(7.000000), cb0[r8.z + 60].y
          dp3 r7.w, r9.xyzx, r9.xyzx
          sqrt r7.w, r7.w
          lt r7.w, r7.w, l(0.500000)
          and r5.w, r5.w, r7.w
          if_nz r5.w
            max r5.w, r8.x, cb0[r8.z + 60].x
            add r7.w, r8.x, cb0[r8.z + 60].x
            min r8.w, r8.x, cb0[r8.z + 60].x
            eq r11.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r8.z + 60].yyyy
            add r9.y, r8.x, -cb0[r8.z + 60].x
            movc r9.y, r11.w, r9.y, r8.x
            movc r8.w, r11.z, r8.w, r9.y
            movc r7.w, r11.y, r7.w, r8.w
            movc r6.x, r11.x, r5.w, r7.w
          else
            ge r5.w, l(11.000000), cb0[r8.z + 60].y
            dp2 r7.w, r9.xzxx, r9.xzxx
            sqrt r7.w, r7.w
            lt r7.w, r7.w, l(0.500000)
            and r5.w, r5.w, r7.w
            max r7.w, r8.x, cb0[r8.z + 60].x
            add r8.w, r8.x, cb0[r8.z + 60].x
            min r9.x, r8.x, cb0[r8.z + 60].x
            eq r11.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r8.z + 60].yyyy
            add r9.y, r8.x, -cb0[r8.z + 60].x
            movc r9.y, r11.w, r9.y, r8.x
            movc r9.x, r11.z, r9.x, r9.y
            movc r8.w, r11.y, r8.w, r9.x
            movc r7.w, r11.x, r7.w, r8.w
            movc r6.x, r5.w, r7.w, r8.x
          endif
        endif
      else
        mov r6.x, r8.x
      endif
      iadd r6.y, r8.z, l(1)
      mov r8.xyz, r6.xzyx
      mov r4.y, r4.z
    endloop
    movc r3.w, r4.y, r8.y, r8.x
    mul r4.z, r3.w, cb0[18].w
    mad r1.w, r4.z, r0.y, r1.w
    mul r4.z, r1.w, l(-1.442695)
    exp r4.z, r4.z
    mul r3.w, r0.y, r3.w
    mul r3.w, r4.z, r3.w
    mul r4.z, r0.z, r3.w
    max r4.z, r4.z, l(0.000000)
    add r0.x, r0.x, r4.z
    mad r7.xyz, -r1.xyzx, r0.yyyy, r7.xyzx
    mad r0.w, r3.w, l(0.079580), r0.w
    iadd r2.w, r2.w, l(1)
  endloop
  mov r6.w, r0.x
  mov r9.w, r0.w
  mov r10.x, r1.w
endif
mul r0.x, r10.x, l(-1.442695)
exp r0.x, r0.x
min r0.x, r0.x, l(1.000000)
mul r0.yzw, r3.xxyz, r9.wwww
mul r0.yzw, r0.yyzw, cb0[356].xxxx
mad o0.xyz, r5.xyzx, r6.wwww, r0.yzwy
add r0.y, -cb0[370].x, l(1.000000)
add r0.z, -r0.x, l(1.000000)
mad r0.x, r0.y, r0.z, r0.x
add r0.x, -r0.x, l(1.000000)
mul o0.w, r0.x, cb0[356].x
ret
// Approximately 0 instruction slots used