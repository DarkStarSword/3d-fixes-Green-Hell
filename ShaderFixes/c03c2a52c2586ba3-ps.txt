// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed c03c2a52c2586ba3-ps.txt
// 3DMigoto: c03c2a52c2586ba3 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 219 4 16
//   undeciphered1a: 28
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_POINT_LIGHT5" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 768
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogSkyColor]
//   Vector 304 [_FogOfWarSize] 3
//   Vector 320 [_FogOfWarCenterAdjusted] 3
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 400 [_FogPointLightPosition2] 3
//   Vector 416 [_FogPointLightColor2] 3
//   Vector 432 [_FogPointLightPosition3] 3
//   Vector 448 [_FogPointLightColor3] 3
//   Vector 464 [_FogPointLightPosition4] 3
//   Vector 480 [_FogPointLightColor4] 3
//   Vector 496 [_FogPointLightPosition5] 3
//   Vector 512 [_FogPointLightColor5] 3
//   Vector 528 [_SunPosition] 3
//   Vector 544 [_SunDir] 3
//   Vector 560 [_SunColor] 3
//   Vector 576 [_FogScatteringData]
//   Vector 592 [_FogScatteringData2]
//   Vector 688 [_VolumetricFogSunWorldPos]
//   Vector 704 [_VolumetricFogSunShadowsData]
//   Float 720 [_Jitter]
//   Matrix 624 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_FogOfWar] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 4 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:06:01 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[46], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 30
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r28.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed c03c2a52c2586ba3-ps.txt

mul r28.w, -r28.x, r28.y
mad r29.xyz, -r28.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r29.y
mov r1.xz, r29.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r3.xy, v1.xyxx, cb1[6].xyxx
dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xyxx
frc r0.w, r0.w
add r0.w, r0.w, l(-0.500000)
lt r1.w, cb0[13].y, r1.y
lt r3.x, cb0[13].y, r0.y
and r1.w, r1.w, r3.x
lt r3.x, r1.y, r0.z
lt r3.y, r0.y, r0.z
and r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
if_z r1.w
  lt r1.w, r0.x, cb0[16].w
  if_nz r1.w
    div r3.xy, r2.xzxx, cb0[19].xzxx
    add r3.xy, r3.xyxx, -cb0[20].xzxx
    sample r3.xyzw, r3.xyxx, t1.wxyz, s3
    ge r1.w, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r1.w, l(0)
  endif
  if_z r1.w
    add r2.w, r2.y, l(0.000010)
    add r3.yzw, -r1.xxyz, r2.xxwz
    dp3 r1.w, r3.yzwy, r3.yzwy
    sqrt r1.w, r1.w
    dp2 r2.y, r3.ywyy, r3.ywyy
    sqrt r2.y, r2.y
    div r4.xy, r3.ywyy, r2.yyyy
    div r2.y, r2.y, r3.z
    max r2.w, r0.z, r1.y
    min r5.z, r2.w, cb0[13].y
    add r2.w, r1.y, -r5.z
    mul r2.w, r2.w, r2.y
    mad r5.xy, -r4.xyxx, r2.wwww, r29.xzxx
    min r2.w, r1.w, cb0[12].z
    add r6.xyz, -r1.xyzx, r5.xzyx
    dp3 r1.x, r6.xyzx, r6.xyzx
    sqrt r1.x, r1.x
    lt r1.z, r1.x, r2.w
    if_nz r1.z
      lt r1.z, l(0.000000), r2.y
      lt r4.z, l(-0.500000), r0.y
      and r1.z, r1.z, r4.z
      lt r4.z, r2.y, l(0.000000)
      lt r4.w, r0.y, l(0.500000)
      and r4.z, r4.w, r4.z
      and r0.z, r0.z, r4.z
      movc r6.y, r1.z, cb0[13].y, r0.z
      add r0.z, -r1.y, r6.y
      mul r0.z, r0.z, r2.y
      mad r6.xz, -r4.xxyx, r0.zzzz, r29.xxzx
      add r4.xyz, r5.xzyx, -r6.xyzx
      dp3 r0.z, r4.xyzx, r4.xyzx
      sqrt r0.z, r0.z
      add r1.y, -r1.x, r2.w
      min r0.z, r0.z, r1.y
      lt r1.z, l(0.000000), r0.z
      if_nz r1.z
        log r1.z, r0.z
        mul r1.z, r1.z, l(0.693147182)
        max r1.z, r1.z, l(0.000000)
        mad r1.z, r1.z, cb0[15].x, l(0.100000)
        mul r1.z, r1.z, cb0[13].z
        mul_sat r2.y, r2.w, cb0[15].y
        mul r1.z, r1.z, r2.y
        max r1.z, r1.z, l(0.010000)
        mul r4.xyz, r1.zzzz, r3.yzwy
        div r4.xyz, r4.xyzx, r1.wwww
        div r1.z, r0.z, r1.z
        add r6.xyz, r5.xzyx, -cb0[21].xyzx
        add r7.xyz, r5.xzyx, -cb0[23].xyzx
        add r8.xyz, r5.xzyx, -cb0[25].xyzx
        add r9.xyz, r5.xzyx, -cb0[27].xyzx
        add r10.xyz, r5.xzyx, -cb0[29].xyzx
        add r11.xyz, r5.xzyx, -cb0[31].xyzx
        mul r12.xz, r4.xxzx, cb0[13].wwww
        mul r2.y, cb0[13].z, cb0[13].y
        div r12.y, r4.y, r2.y
        add r13.xy, r5.xyxx, cb0[14].xzxx
        mul r13.xy, r13.xyxx, cb0[13].wwww
        div r2.y, r5.z, r2.y
        add r13.zw, cb0[14].xxxz, r29.xxxz
        frc r2.w, r0.w
        mad r1.z, r2.w, cb0[45].x, r1.z
        add r5.w, r5.z, cb0[13].x
        mul r14.xyz, r5.wwww, cb0[40].xywx
        mad r14.xyz, cb0[39].xywx, r5.xxxx, r14.xyzx
        mad r14.xyz, cb0[41].xywx, r5.yyyy, r14.xyzx
        add r14.xyz, r14.xyzx, cb0[42].xywx
        div r14.xy, r14.xyxx, r14.zzzz
        mad r14.xy, r14.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        mad r2.w, r0.w, cb0[44].y, l(1.000000)
        mul r2.w, r0.z, r2.w
        mul r15.xyz, r3.yzwy, r2.wwww
        div r15.xyz, r15.xyzx, r1.wwww
        add r15.xyz, r5.xwyx, r15.xyzx
        mul r16.xyz, r15.yyyy, cb0[40].xywx
        mad r16.xyz, cb0[39].xywx, r15.xxxx, r16.xyzx
        mad r16.xyz, cb0[41].xywx, r15.zzzz, r16.xyzx
        add r16.xyz, r16.xyzx, cb0[42].xywx
        div r14.zw, r16.xxxy, r16.zzzz
        mad r14.zw, r14.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r2.w, -r1.x, cb0[43].w
        mul_sat r2.w, r2.w, l(0.0285714287)
        mul r2.w, r2.w, cb0[44].x
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
        ge r0.z, r0.z, r1.y
        and r0.z, r0.z, l(0x3f800000)
        add r14.xy, -r14.zwzz, r14.xyxx
        add r5.xyz, r5.xwyx, -r15.xyzx
        mov r16.xyzw, l(0,0,0,0)
        mov r17.xyz, r6.xyzx
        mov r18.xyz, r7.xyzx
        mov r19.xyz, r8.xyzx
        mov r20.xyz, r9.xyzx
        mov r21.xyz, r10.xyzx
        mov r22.xyz, r11.xyzx
        mov r24.xz, r13.xxyx
        mov r1.y, r1.z
        mov r24.y, r2.y
        mov r23.xyzw, l(0,0,0,0)
        loop
          ge r5.w, l(1.000000), r1.y
          breakc_nz r5.w
          sample_l r25.xyzw, r24.xzxx, t2.xyzw, s1, l(0.000000)
          add r5.w, -|r24.y|, r25.w
          mad r26.xy, r13.zwzz, cb0[13].wwww, -r24.xzxx
          dp2 r6.w, r26.xyxx, r26.xyxx
          add r6.w, -r6.w, cb0[12].x
          max r6.w, r6.w, l(0.000000)
          mad r5.w, -r6.w, cb0[12].y, r5.w
          lt r6.w, l(0.000000), r5.w
          if_nz r6.w
            add r6.w, -r5.w, l(1.000000)
            mul r26.xyz, r6.wwww, cb0[11].xyzx
            mul r26.w, r5.w, l(0.400000)
            mul r5.w, r4.w, r1.y
            mad r27.xy, r5.wwww, r14.xyxx, r14.zwzz
            sample_l r27.xyzw, r27.xyxx, t3.xyzw, s4, l(0.000000)
            dp4 r6.w, r27.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
            mad r27.xyz, r5.wwww, r5.xyzx, r15.xyzx
            add r27.xyz, r27.xyzx, -cb0[43].xyzx
            dp3 r5.w, r27.xyzx, r27.xyzx
            sqrt r5.w, r5.w
            add_sat r5.w, -r5.w, r6.w
            mul r6.w, r2.w, r23.w
            add r5.w, r5.w, l(-1.000000)
            mad r6.w, r6.w, r5.w, l(1.000000)
            mad r5.w, cb0[44].z, r5.w, l(1.000000)
            mul r26.xyzw, r5.wwww, r26.xyzw
            dp3 r5.w, r17.xyzx, r17.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            dp3 r7.w, r18.xyzx, r18.xyzx
            div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
            dp3 r8.w, r19.xyzx, r19.xyzx
            div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
            dp3 r9.w, r20.xyzx, r20.xyzx
            div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
            dp3 r10.w, r21.xyzx, r21.xyzx
            div r10.w, l(1.000000, 1.000000, 1.000000, 1.000000), r10.w
            dp3 r11.w, r22.xyzx, r22.xyzx
            div r11.w, l(1.000000, 1.000000, 1.000000, 1.000000), r11.w
            mul r27.xyz, r10.wwww, cb0[30].xyzx
            mad r27.xyz, cb0[32].xyzx, r11.wwww, r27.xyzx
            mad r27.xyz, cb0[28].xyzx, r9.wwww, r27.xyzx
            mad r27.xyz, cb0[26].xyzx, r8.wwww, r27.xyzx
            mad r27.xyz, cb0[24].xyzx, r7.wwww, r27.xyzx
            mad r27.xyz, cb0[22].xyzx, r5.wwww, r27.xyzx
            mul r27.xyz, r26.wwww, r27.xyzx
            mad r25.xyz, r25.xyzx, r6.wwww, r27.xyzx
            mul r25.xyz, r26.wwww, r25.xyzx
            mul r26.xyz, r25.xyzx, r26.xyzx
            add r5.w, -r23.w, l(1.000000)
            mad r25.xyzw, r26.xyzw, r5.wwww, r23.xyzw
            lt r5.w, l(0.990000), r25.w
            if_nz r5.w
              mov r16.xyzw, r26.xyzw
              mov r23.xyzw, r25.xyzw
              break
            endif
            mov r16.xyzw, r26.xyzw
            mov r23.xyzw, r25.xyzw
          endif
          add r17.xyz, r4.xyzx, r17.xyzx
          add r18.xyz, r4.xyzx, r18.xyzx
          add r19.xyz, r4.xyzx, r19.xyzx
          add r20.xyz, r4.xyzx, r20.xyzx
          add r21.xyz, r4.xyzx, r21.xyzx
          add r22.xyz, r4.xyzx, r22.xyzx
          add r1.y, r1.y, l(-1.000000)
          add r24.xyz, r12.xyzx, r24.xyzx
        endloop
        lt r1.z, r23.w, l(0.990000)
        and r1.z, r1.z, l(0x3f800000)
        add r2.y, -r23.w, l(1.000000)
        mul r0.z, r0.z, r1.y
        mul r1.y, r1.z, r2.y
        mul r0.z, r0.z, r1.y
        mad r4.xyzw, r16.xyzw, r0.zzzz, r23.xyzw
        div r1.yzw, r3.yyzw, r1.wwww
        dp3 r0.z, r1.yzwy, cb0[34].xyzx
        mul r0.z, r0.z, cb0[37].w
        max r0.z, r0.z, l(0.000000)
        mul r0.z, r0.z, r0.z
        mul r0.z, r0.z, r0.z
        mul r0.z, r0.z, r0.z
        mul r0.z, r4.w, r0.z
        add r1.yzw, -r4.xxyz, cb0[35].xxyz
        mad r4.xyz, r0.zzzz, r1.yzwy, r4.xyzx
        mul r4.xyzw, r4.xyzw, cb0[10].wwww
        add r0.z, -r1.x, cb0[12].z
        div_sat r0.z, r0.z, cb0[12].w
        mul r0.z, r0.z, r0.z
        mul r1.xyzw, r0.zzzz, r4.xyzw
        mul r1.xyzw, r3.xxxx, r1.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.z, r0.w, cb0[15].w
mad r2.y, r0.w, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r1.xy, r0.xxxx, r2.xzxx
  mad r1.xy, r1.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r5.xyzw, r1.xyxx, t2.xyzw, s1
  mad r0.y, r0.z, l(3.000000), r5.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[17].w
  add r1.xyz, -r4.xyzx, cb0[17].xyzx
  mad r4.xyz, r0.xxxx, r1.xyzx, r4.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyz, r4.xyzx, r0.xxxx, r3.xyzx
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[33].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[33].y
add r2.x, -v1.x, cb0[33].x
add r2.y, r1.x, -v1.y
mad r0.w, r0.w, cb0[37].z, l(1.000000)
mul r0.w, r0.w, cb0[36].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[37].x
mov r3.x, cb0[36].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.wwww, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[36].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[37].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[36].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used