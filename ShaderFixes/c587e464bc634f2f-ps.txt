// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed c587e464bc634f2f-ps.txt
// 3DMigoto: c587e464bc634f2f |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 129 2 12
//   undeciphered1a: 19
//   Keywords { "FOG_VOID_BOX" "FOG_POINT_LIGHT2" }
//   undeciphered2: 1 2 2 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 528
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 368 [_FogPointLightPosition2] 3
//   Vector 384 [_FogPointLightColor2] 3
//   Vector 416 [_SunDir] 3
//   Vector 432 [_SunColor] 3
//   Vector 464 [_FogScatteringData2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:08:26 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 21
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r19.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed c587e464bc634f2f-ps.txt

mul r19.w, -r19.x, r19.y
mad r20.xyz, -r19.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r20.y
mov r1.xz, r20.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.y, l(0.000010)
lt r0.y, cb0[13].y, r1.y
lt r0.w, cb0[13].y, r0.x
and r0.y, r0.w, r0.y
lt r0.w, r1.y, r0.z
lt r1.w, r0.x, r0.z
and r0.w, r0.w, r1.w
or r0.y, r0.w, r0.y
if_z r0.y
  add r2.w, r2.y, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.y, r2.xyzx, r2.xyzx
  dp2 r0.w, r2.xzxx, r2.xzxx
  sqrt r0.yw, r0.yyyw
  div r3.xy, r2.xzxx, r0.wwww
  div r0.w, r0.w, r2.y
  max r1.w, r0.z, r1.y
  min r4.y, r1.w, cb0[13].y
  add r1.w, r1.y, -r4.y
  mul r1.w, r0.w, r1.w
  mad r4.xz, -r3.xxyx, r1.wwww, r20.xxzx
  min r1.w, r0.y, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xyzx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.z, r1.x, r1.w
  if_nz r1.z
    lt r1.z, l(0.000000), r0.w
    lt r2.w, l(-0.500000), r0.x
    and r1.z, r1.z, r2.w
    lt r2.w, r0.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r2.w
    and r0.x, r0.z, r0.x
    movc r5.y, r1.z, cb0[13].y, r0.x
    add r0.x, -r1.y, r5.y
    mul r0.x, r0.x, r0.w
    mad r5.xz, -r3.xxyx, r0.xxxx, r20.xxzx
    add r0.xzw, r4.xxyz, -r5.xxyz
    dp3 r0.x, r0.xzwx, r0.xzwx
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r1.w
    min r0.x, r0.z, r0.x
    lt r0.w, l(0.000000), r0.x
    if_nz r0.w
      mul r3.xyz, r2.xyzx, r0.xxxx
      div r3.xyz, r3.xyzx, r0.yyyy
      add r3.xyz, r3.xyzx, r4.xyzx
      add r3.xyz, -r3.xyzx, cb0[17].xyzx
      mul r3.xyz, |r3.xyzx|, cb0[18].xyzx
      max r0.w, r3.y, r3.x
      max r0.w, r3.z, r0.w
      add r0.w, r0.w, l(-1.000000)
      mad_sat r0.w, cb0[18].w, r0.w, l(1.000000)
      lt r1.y, l(0.000000), r0.w
      if_nz r1.y
        log r1.y, r0.x
        mul r1.y, r1.y, l(0.693147182)
        max r1.y, r1.y, l(0.000000)
        mad r1.y, r1.y, cb0[15].x, l(0.100000)
        mul r1.y, r1.y, cb0[13].z
        mul_sat r1.z, r1.w, cb0[15].y
        mul r1.y, r1.z, r1.y
        max r1.y, r1.y, l(0.010000)
        mul r3.xyz, r1.yyyy, r2.xyzx
        div r3.xyz, r3.xyzx, r0.yyyy
        div r1.y, r0.x, r1.y
        add r5.xyz, r4.xyzx, -cb0[19].xyzx
        add r6.xyz, r4.xyzx, -cb0[21].xyzx
        add r7.xyz, r4.xyzx, -cb0[23].xyzx
        mul r8.xz, r3.xxzx, cb0[13].wwww
        mul r1.z, cb0[13].z, cb0[13].y
        div r8.y, r3.y, r1.z
        add r4.xz, r4.xxzx, cb0[14].xxzx
        mul r4.xz, r4.xxzx, cb0[13].wwww
        div r1.z, r4.y, r1.z
        ge r0.x, r0.x, r0.z
        and r0.x, r0.x, l(0x3f800000)
        mov r9.xyzw, l(0,0,0,0)
        mov r10.xyz, r5.xyzx
        mov r11.xyz, r6.xyzx
        mov r12.xyz, r7.xyzx
        mov r14.xz, r4.xxzx
        mov r0.z, r1.y
        mov r14.y, r1.z
        mov r13.xyzw, l(0,0,0,0)
        loop
          ge r1.w, l(1.000000), r0.z
          breakc_nz r1.w
          sample_l r15.xyzw, r14.xzxx, t1.xyzw, s0, l(0.000000)
          add r1.w, -|r14.y|, r15.w
          lt r2.w, l(0.000000), r1.w
          if_nz r2.w
            add r2.w, -r1.w, l(1.000000)
            mul r16.xyz, r2.wwww, cb0[11].xyzx
            mul r17.w, r1.w, l(0.400000)
            dp3 r1.w, r10.xyzx, r10.xyzx
            div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
            dp3 r2.w, r11.xyzx, r11.xyzx
            div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
            dp3 r3.w, r12.xyzx, r12.xyzx
            div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
            mul r18.xyz, r2.wwww, cb0[22].xyzx
            mad r18.xyz, cb0[24].xyzx, r3.wwww, r18.xyzx
            mad r18.xyz, cb0[20].xyzx, r1.wwww, r18.xyzx
            mad r15.xyz, r18.xyzx, r17.wwww, r15.xyzx
            mul r15.xyz, r17.wwww, r15.xyzx
            mul r17.xyz, r15.xyzx, r16.xyzx
            add r1.w, -r13.w, l(1.000000)
            mad r15.xyzw, r17.xyzw, r1.wwww, r13.xyzw
            lt r1.w, l(0.990000), r15.w
            if_nz r1.w
              mov r9.xyzw, r17.xyzw
              mov r13.xyzw, r15.xyzw
              break
            endif
            mov r9.xyzw, r17.xyzw
            mov r13.xyzw, r15.xyzw
          endif
          add r10.xyz, r3.xyzx, r10.xyzx
          add r11.xyz, r3.xyzx, r11.xyzx
          add r12.xyz, r3.xyzx, r12.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r14.xyz, r8.xyzx, r14.xyzx
        endloop
        lt r1.y, r13.w, l(0.990000)
        and r1.y, r1.y, l(0x3f800000)
        add r1.z, -r13.w, l(1.000000)
        mul r0.x, r0.z, r0.x
        mul r0.z, r1.z, r1.y
        mul r0.x, r0.x, r0.z
        mad r3.xyzw, r9.xyzw, r0.xxxx, r13.xyzw
        div r0.xyz, r2.xyzx, r0.yyyy
        dp3 r0.x, r0.xyzx, cb0[26].xyzx
        mul r0.x, r0.x, cb0[29].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r3.w, r0.x
        add r1.yzw, -r3.xxyz, cb0[27].xxyz
        mad r3.xyz, r0.xxxx, r1.yzwy, r3.xyzx
        mul r2.xyzw, r3.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r1.xyzw, r0.xxxx, r2.xyzw
        mul o0.xyzw, r0.wwww, r1.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used