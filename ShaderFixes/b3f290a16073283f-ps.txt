// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b3f290a16073283f-ps.txt
// 3DMigoto: b3f290a16073283f |    Unity headers extracted from DynamicFog_Image Effect_Desktop Plus
//    Shader "DynamicFog/Image Effect/Desktop Plus" {
//      SubShader 1/1 {
//        Pass 1/1 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from DynamicFog_Image Effect_Desktop Plus:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 108 4 12
//   undeciphered1a: 12
//   Keywords { "FOG_OF_WAR_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 352
//   Float 80 [_FogAlpha]
//   Vector 96 [_FogOfWarSize] 3
//   Vector 112 [_FogOfWarCenterAdjusted] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogHeightData]
//   Vector 224 [_FogNoiseData]
//   Vector 240 [_FogSkyData]
//   Float 256 [_FogSpeed]
//   Vector 272 [_FogColor]
//   Vector 288 [_FogColor2]
//   Vector 320 [_SunColor]
//   Vector 336 [_SunDir] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 0 [_Time]
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_MainTex] 2D 0
//   SetTexture 1 [_CameraDepthTexture] 2D 1
//   SetTexture 2 [_NoiseTex] 2D 3
//   SetTexture 3 [_FogOfWar] 2D 2
//   SetTexture 4 [_Noise2Tex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:00:23 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[22], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 14
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r12.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed b3f290a16073283f-ps.txt

mul r12.w, -r12.x, r12.y
mad r13.xyz, -r12.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s0
sample r1.xyzw, v1.zwzz, t1.xyzw, s1
mad r1.x, cb1[7].x, r1.x, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.y, -cb0[13].y, r13.y
mov r2.xz, r13.xxzx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.y, r3.y, l(0.000010)
lt r1.z, l(0.999000), r1.x
if_nz r1.z
  add r1.z, |r1.y|, l(2.000000)
  div r4.xy, r3.xzxx, r1.zzzz
  mul r1.w, cb0[15].y, cb1[0].x
  mad r4.xy, r4.xyxx, l(0.010000, 0.010000, 0.000000, 0.000000), r1.wwww
  sample r4.xyzw, r4.xyxx, t2.xyzw, s3
  div_sat r1.w, r1.z, cb0[13].x
  add r5.xyzw, -cb0[17].xyzw, cb0[18].xyzw
  mad r5.xyzw, r1.wwww, r5.xyzw, cb0[17].xyzw
  div r1.z, cb0[15].x, r1.z
  mad r1.w, -r4.y, cb0[15].z, l(1.000000)
  mul_sat r1.z, r1.w, r1.z
  mul r1.z, r1.z, cb0[15].w
  add r4.xyzw, -r0.xyzw, r5.xyzw
  mad r0.xyzw, r1.zzzz, r4.xyzw, r0.xyzw
endif
lt r1.z, cb0[13].x, r2.y
lt r1.w, cb0[13].x, r1.y
and r1.z, r1.w, r1.z
if_z r1.z
  add r3.w, r3.y, l(0.000010)
  add r3.xyz, -r2.xyzx, r3.xwzx
  dp2 r1.z, r3.xzxx, r3.xzxx
  sqrt r1.z, r1.z
  div r4.xy, r3.xzxx, r1.zzzz
  div r1.z, r1.z, r3.y
  min r5.y, r2.y, cb0[13].x
  add r1.w, r2.y, -r5.y
  mul r1.w, r1.w, r1.z
  mad r5.xz, -r4.xxyx, r1.wwww, r13.xxzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r1.w, r1.w
  min r2.w, r1.w, cb0[12].z
  add r6.xyz, -r2.xyzx, r5.xyzx
  dp3 r2.x, r6.xyzx, r6.xyzx
  sqrt r2.x, r2.x
  lt r2.z, r2.x, r2.w
  if_nz r2.z
    lt r2.z, l(0.000000), r1.z
    lt r3.w, l(-0.500000), r1.y
    and r2.z, r2.z, r3.w
    lt r3.w, r1.z, l(0.000000)
    lt r4.z, r1.y, l(0.500000)
    and r3.w, r3.w, r4.z
    and r1.y, r1.y, r3.w
    movc r6.y, r2.z, cb0[13].x, r1.y
    add r1.y, -r2.y, r6.y
    mul r1.y, r1.y, r1.z
    mad r6.xz, -r4.xxyx, r1.yyyy, r13.xxzx
    add r4.xyz, r5.xyzx, -r6.xyzx
    dp3 r1.y, r4.xyzx, r4.xyzx
    sqrt r1.y, r1.y
    add r1.z, -r2.x, r2.w
    min r1.y, r1.z, r1.y
    lt r1.z, l(0.000000), r1.y
    if_nz r1.z
      div r2.yzw, r3.xxyz, r1.wwww
      mul r3.xyz, r1.yyyy, r2.yzwy
      lt r1.x, r1.x, l(0.999000)
      if_nz r1.x
        mad r1.xz, r2.yywy, r1.yyyy, r5.xxzx
        div r1.xz, r1.xxzx, cb0[6].xxzx
        add r1.xz, r1.xxzx, -cb0[7].xxzx
        sample r4.xyzw, r1.xzxx, t3.wxyz, s2
        ge r1.x, l(0.000000), r4.x
      else
        mov r4.x, l(1.000000)
        mov r1.x, l(0)
      endif
      if_z r1.x
        mul r1.x, cb0[13].w, cb0[13].x
        mul r1.z, cb0[16].x, cb1[0].w
        add r6.xyzw, -cb0[17].xyzw, cb0[18].xyzw
        mov r1.w, r2.x
        mov r8.xyz, r5.xyzx
        mov r7.xyzw, l(0,0,0,0)
        mov r3.w, l(5)
        loop
          ilt r4.y, r3.w, l(0)
          breakc_nz r4.y
          add r4.y, -r8.y, cb0[13].x
          div r4.y, r4.y, r1.x
          add r4.y, r4.y, l(-0.100000)
          add r4.z, r1.w, -cb0[12].x
          div r4.z, r4.z, cb0[12].y
          min r4.y, r4.z, r4.y
          mad r9.xyz, r8.xyzx, cb0[14].wwww, r1.zzzz
          frc r10.xyz, r9.xyzx
          add r9.xyz, r9.xyzx, -r10.xyzx
          mul r11.xyz, r10.xyzx, r10.xyzx
          mad r10.xyz, -r10.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(3.000000, 3.000000, 3.000000, 0.000000)
          mul r4.z, r10.z, r11.z
          mad r9.xy, r9.zzzz, l(37.000000, 17.000000, 0.000000, 0.000000), r9.xyxx
          mad r9.xy, r11.xyxx, r10.xyxx, r9.xyxx
          add r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
          mul r9.xy, r9.xyxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000)
          sample_l r9.xyzw, r9.xyxx, t4.xyzw, s4, l(0.000000)
          add r4.w, -r9.y, r9.x
          mad r4.z, r4.z, r4.w, r9.y
          div_sat r4.w, r8.y, cb0[13].x
          mad r9.xyzw, r4.wwww, r6.xyzw, cb0[17].xyzw
          mad r4.z, -r4.z, cb0[14].x, l(1.000000)
          mul_sat r4.y, r4.z, r4.y
          mul r10.w, r4.y, r9.w
          mul r10.xyz, r9.xyzx, r10.wwww
          add r4.y, -r7.w, l(1.000000)
          mad r7.xyzw, r10.xyzw, r4.yyyy, r7.xyzw
          iadd r3.w, r3.w, l(-1)
          mad r8.xyz, r3.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r8.xyzx
          mad r1.w, r1.y, l(0.200000), r1.w
        endloop
        mul r1.x, r4.x, cb0[5].x
        mul r3.xyzw, r1.xxxx, r7.xyzw
        dp3 r1.y, r2.yzwy, cb0[21].xyzx
        mul r1.y, r1.y, cb0[20].w
        max r1.y, r1.y, l(0.000000)
        mul r1.y, r1.y, r1.y
        mul r1.y, r1.y, r1.y
        mul r1.y, r1.y, r1.y
        mul r1.y, r3.w, r1.y
        mad r2.xyz, -r7.xyzx, r1.xxxx, cb0[20].xyzx
        mad r3.xyz, r1.yyyy, r2.xyzx, r3.xyzx
        mad r1.x, -r7.w, r1.x, l(1.000000)
        mad o0.xyzw, r0.xyzw, r1.xxxx, r3.xyzw
      else
        mov o0.xyzw, r0.xyzw
      endif
    else
      mov o0.xyzw, r0.xyzw
    endif
  else
    mov o0.xyzw, r0.xyzw
  endif
else
  mov o0.xyzw, r0.xyzw
endif
ret
// Approximately 0 instruction slots used