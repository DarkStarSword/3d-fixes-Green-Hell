// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 73a9bb8d37f222d3-ps.txt
// 3DMigoto: 73a9bb8d37f222d3 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 212 4 14
//   undeciphered1a: 22
//   Keywords { "FOG_DISTANCE_ON" "FOG_VOID_BOX" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT2" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 656
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogSkyColor]
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_FogPointLightPosition2] 3
//   Vector 400 [_FogPointLightColor2] 3
//   Vector 416 [_SunPosition] 3
//   Vector 432 [_SunDir] 3
//   Vector 448 [_SunColor] 3
//   Vector 464 [_FogScatteringData]
//   Vector 480 [_FogScatteringData2]
//   Vector 576 [_VolumetricFogSunWorldPos]
//   Vector 592 [_VolumetricFogSunShadowsData]
//   Float 608 [_Jitter]
//   Matrix 512 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:22:24 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[39], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 24
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r22.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 73a9bb8d37f222d3-ps.txt

mul r22.w, -r22.x, r22.y
mad r23.xyz, -r22.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r23.y
mov r1.xz, r23.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r3.xy, v1.xyxx, cb1[6].xyxx
dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xyxx
frc r0.w, r0.w
add r0.w, r0.w, l(-0.500000)
lt r1.w, cb0[13].y, r1.y
lt r3.x, cb0[13].y, r0.y
and r1.w, r1.w, r3.x
lt r3.x, r1.y, r0.z
lt r3.y, r0.y, r0.z
and r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
if_z r1.w
  add r2.w, r2.y, l(0.000010)
  add r3.xyz, -r1.xyzx, r2.xwzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r1.w, r1.w
  dp2 r2.y, r3.xzxx, r3.xzxx
  sqrt r2.y, r2.y
  div r4.xy, r3.xzxx, r2.yyyy
  div r2.y, r2.y, r3.y
  max r2.w, r0.z, r1.y
  min r5.z, r2.w, cb0[13].y
  add r2.w, r1.y, -r5.z
  mul r2.w, r2.w, r2.y
  mad r5.xy, -r4.xyxx, r2.wwww, r23.xzxx
  min r2.w, r1.w, cb0[12].z
  add r6.xyz, -r1.xyzx, r5.xzyx
  dp3 r1.x, r6.xyzx, r6.xyzx
  sqrt r1.x, r1.x
  lt r1.z, r1.x, r2.w
  if_nz r1.z
    lt r1.z, l(0.000000), r2.y
    lt r3.w, l(-0.500000), r0.y
    and r1.z, r1.z, r3.w
    lt r3.w, r2.y, l(0.000000)
    lt r4.z, r0.y, l(0.500000)
    and r3.w, r3.w, r4.z
    and r0.z, r0.z, r3.w
    movc r6.y, r1.z, cb0[13].y, r0.z
    add r0.z, -r1.y, r6.y
    mul r0.z, r0.z, r2.y
    mad r6.xz, -r4.xxyx, r0.zzzz, r23.xxzx
    add r4.xyz, r5.xzyx, -r6.xyzx
    dp3 r0.z, r4.xyzx, r4.xyzx
    sqrt r0.z, r0.z
    add r1.y, -r1.x, r2.w
    min r0.z, r0.z, r1.y
    lt r1.z, l(0.000000), r0.z
    if_nz r1.z
      mul r4.xyz, r3.xyzx, r0.zzzz
      div r4.xyz, r4.xyzx, r1.wwww
      add r4.xyz, r4.xyzx, r5.xzyx
      add r4.xyz, -r4.xyzx, cb0[17].xyzx
      mul r4.xyz, |r4.xyzx|, cb0[18].xyzx
      max r1.z, r4.y, r4.x
      max r1.z, r4.z, r1.z
      add r1.z, r1.z, l(-1.000000)
      mad_sat r1.z, cb0[18].w, r1.z, l(1.000000)
      lt r2.y, l(0.000000), r1.z
      if_nz r2.y
        log r2.y, r0.z
        mul r2.y, r2.y, l(0.693147182)
        max r2.y, r2.y, l(0.000000)
        mad r2.y, r2.y, cb0[15].x, l(0.100000)
        mul r2.y, r2.y, cb0[13].z
        mul_sat r2.w, r2.w, cb0[15].y
        mul r2.y, r2.w, r2.y
        max r2.y, r2.y, l(0.010000)
        mul r4.xyz, r2.yyyy, r3.xyzx
        div r4.xyz, r4.xyzx, r1.wwww
        div r2.y, r0.z, r2.y
        add r6.xyz, r5.xzyx, -cb0[20].xyzx
        add r7.xyz, r5.xzyx, -cb0[22].xyzx
        add r8.xyz, r5.xzyx, -cb0[24].xyzx
        mul r9.xz, r4.xxzx, cb0[13].wwww
        mul r2.w, cb0[13].z, cb0[13].y
        div r9.y, r4.y, r2.w
        add r10.xy, r5.xyxx, cb0[14].xzxx
        mul r10.xy, r10.xyxx, cb0[13].wwww
        div r2.w, r5.z, r2.w
        add r10.zw, cb0[14].xxxz, r23.xxxz
        frc r3.w, r0.w
        mad r2.y, r3.w, cb0[38].x, r2.y
        add r5.w, r5.z, cb0[13].x
        mul r11.xyz, r5.wwww, cb0[33].xywx
        mad r11.xyz, cb0[32].xywx, r5.xxxx, r11.xyzx
        mad r11.xyz, cb0[34].xywx, r5.yyyy, r11.xyzx
        add r11.xyz, r11.xyzx, cb0[35].xywx
        div r11.xy, r11.xyxx, r11.zzzz
        mad r11.xy, r11.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        mad r3.w, r0.w, cb0[37].y, l(1.000000)
        mul r3.w, r0.z, r3.w
        mul r12.xyz, r3.xyzx, r3.wwww
        div r12.xyz, r12.xyzx, r1.wwww
        add r12.xyz, r5.xwyx, r12.xyzx
        mul r13.xyz, r12.yyyy, cb0[33].xywx
        mad r13.xyz, cb0[32].xywx, r12.xxxx, r13.xyzx
        mad r13.xyz, cb0[34].xywx, r12.zzzz, r13.xyzx
        add r13.xyz, r13.xyzx, cb0[35].xywx
        div r11.zw, r13.xxxy, r13.zzzz
        mad r11.zw, r11.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r3.w, -r1.x, cb0[36].w
        mul_sat r3.w, r3.w, l(0.0285714287)
        mul r3.w, r3.w, cb0[37].x
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
        ge r0.z, r0.z, r1.y
        and r0.z, r0.z, l(0x3f800000)
        add r11.xy, -r11.zwzz, r11.xyxx
        add r5.xyz, r5.xwyx, -r12.xyzx
        mov r13.xyzw, l(0,0,0,0)
        mov r14.xyz, r6.xyzx
        mov r15.xyz, r7.xyzx
        mov r16.xyz, r8.xyzx
        mov r18.xz, r10.xxyx
        mov r1.y, r2.y
        mov r18.y, r2.w
        mov r17.xyzw, l(0,0,0,0)
        loop
          ge r5.w, l(1.000000), r1.y
          breakc_nz r5.w
          sample_l r19.xyzw, r18.xzxx, t1.xyzw, s1, l(0.000000)
          add r5.w, -|r18.y|, r19.w
          mad r20.xy, r10.zwzz, cb0[13].wwww, -r18.xzxx
          dp2 r6.w, r20.xyxx, r20.xyxx
          add r6.w, -r6.w, cb0[12].x
          max r6.w, r6.w, l(0.000000)
          mad r5.w, -r6.w, cb0[12].y, r5.w
          lt r6.w, l(0.000000), r5.w
          if_nz r6.w
            add r6.w, -r5.w, l(1.000000)
            mul r20.xyz, r6.wwww, cb0[11].xyzx
            mul r20.w, r5.w, l(0.400000)
            mul r5.w, r4.w, r1.y
            mad r21.xy, r5.wwww, r11.xyxx, r11.zwzz
            sample_l r21.xyzw, r21.xyxx, t2.xyzw, s4, l(0.000000)
            dp4 r6.w, r21.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
            mad r21.xyz, r5.wwww, r5.xyzx, r12.xyzx
            add r21.xyz, r21.xyzx, -cb0[36].xyzx
            dp3 r5.w, r21.xyzx, r21.xyzx
            sqrt r5.w, r5.w
            add_sat r5.w, -r5.w, r6.w
            mul r6.w, r3.w, r17.w
            add r5.w, r5.w, l(-1.000000)
            mad r6.w, r6.w, r5.w, l(1.000000)
            mad r5.w, cb0[37].z, r5.w, l(1.000000)
            mul r20.xyzw, r5.wwww, r20.xyzw
            dp3 r5.w, r14.xyzx, r14.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            dp3 r7.w, r15.xyzx, r15.xyzx
            div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
            dp3 r8.w, r16.xyzx, r16.xyzx
            div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
            mul r21.xyz, r7.wwww, cb0[23].xyzx
            mad r21.xyz, cb0[25].xyzx, r8.wwww, r21.xyzx
            mad r21.xyz, cb0[21].xyzx, r5.wwww, r21.xyzx
            mul r21.xyz, r20.wwww, r21.xyzx
            mad r19.xyz, r19.xyzx, r6.wwww, r21.xyzx
            mul r19.xyz, r20.wwww, r19.xyzx
            mul r20.xyz, r19.xyzx, r20.xyzx
            add r5.w, -r17.w, l(1.000000)
            mad r19.xyzw, r20.xyzw, r5.wwww, r17.xyzw
            lt r5.w, l(0.990000), r19.w
            if_nz r5.w
              mov r13.xyzw, r20.xyzw
              mov r17.xyzw, r19.xyzw
              break
            endif
            mov r13.xyzw, r20.xyzw
            mov r17.xyzw, r19.xyzw
          endif
          add r14.xyz, r4.xyzx, r14.xyzx
          add r15.xyz, r4.xyzx, r15.xyzx
          add r16.xyz, r4.xyzx, r16.xyzx
          add r1.y, r1.y, l(-1.000000)
          add r18.xyz, r9.xyzx, r18.xyzx
        endloop
        lt r2.y, r17.w, l(0.990000)
        and r2.y, r2.y, l(0x3f800000)
        add r2.w, -r17.w, l(1.000000)
        mul r0.z, r0.z, r1.y
        mul r1.y, r2.w, r2.y
        mul r0.z, r0.z, r1.y
        mad r4.xyzw, r13.xyzw, r0.zzzz, r17.xyzw
        div r3.xyz, r3.xyzx, r1.wwww
        dp3 r0.z, r3.xyzx, cb0[27].xyzx
        mul r0.z, r0.z, cb0[30].w
        max r0.z, r0.z, l(0.000000)
        mul r0.z, r0.z, r0.z
        mul r0.z, r0.z, r0.z
        mul r0.z, r0.z, r0.z
        mul r0.z, r4.w, r0.z
        add r3.xyz, -r4.xyzx, cb0[28].xyzx
        mad r4.xyz, r0.zzzz, r3.xyzx, r4.xyzx
        mul r3.xyzw, r4.xyzw, cb0[10].wwww
        add r0.z, -r1.x, cb0[12].z
        div_sat r0.z, r0.z, cb0[12].w
        mul r0.z, r0.z, r0.z
        mul r3.xyzw, r0.zzzz, r3.xyzw
        mul r1.xyzw, r1.zzzz, r3.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.z, r0.w, cb0[15].w
mad r2.y, r0.w, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t3.xyzw, s0
sample r5.xyzw, v1.zwzz, t4.xyzw, s3
add r1.xyz, -r4.xyzx, r5.xyzx
mad r1.xyz, r3.wwww, r1.xyzx, r4.xyzx
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r2.xz, r0.xxxx, r2.xxzx
  mad r2.xz, r2.xxzx, cb0[13].wwww, cb0[16].zzzz
  sample r4.xyzw, r2.xzxx, t1.xyzw, s1
  mad r0.y, r0.z, l(3.000000), r4.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r2.xzw, -r1.xxyz, cb0[19].xxyz
  mad r1.xyz, r0.xxxx, r2.xzwx, r1.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyz, r1.xyzx, r0.xxxx, r3.xyzx
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[26].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[26].y
add r2.x, -v1.x, cb0[26].x
add r2.y, r1.x, -v1.y
mad r0.w, r0.w, cb0[30].z, l(1.000000)
mul r0.w, r0.w, cb0[29].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[30].x
mov r3.x, cb0[29].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.wwww, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[29].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[30].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[29].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used