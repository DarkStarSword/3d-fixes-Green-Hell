// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e2127b743914723a-ps.txt
// 3DMigoto: e2127b743914723a |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 134 4 10
//   undeciphered1a: 21
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_VOID_SPHERE" "FOG_BLUR_ON" "FOG_POINT_LIGHT3" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 496
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 400 [_FogPointLightPosition2] 3
//   Vector 416 [_FogPointLightColor2] 3
//   Vector 432 [_FogPointLightPosition3] 3
//   Vector 448 [_FogPointLightColor3] 3
//   Float 460 [_Jitter]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:21:44 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[29], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 23
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r21.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e2127b743914723a-ps.txt

mul r21.w, -r21.x, r21.y
mad r22.xyz, -r21.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r22.y
mov r1.xz, r22.xxzx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.y, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.yywy
and r2.y, r2.z, r2.y
lt r2.z, r1.y, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.y, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xwzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r5.xyz, -r2.yzwy, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.yzw, -r2.yyzw, r4.xxyz
  mul r2.yzw, r2.yyzw, r3.xxyz
  min r4.xyz, r5.xyzx, r2.yzwy
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.yzw, r5.xxyz, r2.yyzw
  min r2.yz, r2.zzwz, r2.yyyy
  min r2.y, r2.z, r2.y
  min r2.z, r0.w, cb0[12].z
  min r2.y, r2.z, r2.y
  add r2.y, -r1.w, r2.y
  lt r2.w, l(0.000000), r2.y
  if_nz r2.w
    div r3.xyz, r1.wwww, r3.xyzx
    add r1.xyz, r1.xyzx, r3.xyzx
    mul r3.xyz, r0.xyzx, r2.yyyy
    div r3.xyz, r3.xyzx, r0.wwww
    add r3.xyz, r1.xyzx, r3.xyzx
    add r3.xyz, -r3.xyzx, cb0[17].xyzx
    dp3 r2.w, r3.xyzx, r3.xyzx
    sqrt r2.w, r2.w
    mad r2.w, r2.w, cb0[18].x, l(-1.000000)
    mad_sat r2.w, cb0[18].w, r2.w, l(1.000000)
    lt r3.x, l(0.000000), r2.w
    if_nz r3.x
      div r3.xy, cb0[20].xzxx, cb0[13].wwww
      log r3.z, r2.y
      mul r3.z, r3.z, l(0.693147182)
      max r3.z, r3.z, l(0.000000)
      mad r3.z, r3.z, cb0[15].x, l(0.100000)
      mul r3.z, r3.z, cb0[13].z
      mul_sat r3.w, r2.z, cb0[15].y
      mul r3.z, r3.w, r3.z
      add r1.w, -r1.w, r2.z
      max r2.z, r3.z, l(0.010000)
      mul r0.xyz, r0.xyzx, r2.zzzz
      div r0.xyz, r0.xyzx, r0.wwww
      div r0.w, r2.y, r2.z
      add r4.xyz, r1.xyzx, -cb0[21].xyzx
      add r5.xyz, r1.xyzx, -cb0[23].xyzx
      add r6.xyz, r1.xyzx, -cb0[25].xyzx
      add r7.xyz, r1.xyzx, -cb0[27].xyzx
      mul r8.xz, r0.xxzx, cb0[13].wwww
      mul r2.z, cb0[13].z, cb0[13].y
      div r8.y, r0.y, r2.z
      add r1.xz, r1.xxzx, cb0[14].xxzx
      mul r1.xz, r1.xxzx, cb0[13].wwww
      div r1.y, r1.y, r2.z
      add r3.zw, cb0[14].xxxz, cb0[19].xxxz
      add r9.xy, cb0[14].xzxx, r22.xzxx
      frc r2.z, r2.x
      mad r0.w, r2.z, cb0[28].w, r0.w
      ge r1.w, r2.y, r1.w
      and r1.w, r1.w, l(0x3f800000)
      mov r10.xyzw, l(0,0,0,0)
      mov r11.xyz, r4.xyzx
      mov r12.xyz, r5.xyzx
      mov r13.xyz, r6.xyzx
      mov r14.xyz, r7.xyzx
      mov r2.y, r0.w
      mov r16.xyz, r1.xyzx
      mov r15.xyzw, l(0,0,0,0)
      loop
        ge r2.z, l(1.000000), r2.y
        breakc_nz r2.z
        mad r9.zw, r3.zzzw, cb0[13].wwww, -r16.xxxz
        mul r9.zw, r3.xxxy, |r9.zzzw|
        max r2.z, r9.w, r9.z
        sample_l r17.xyzw, r16.xzxx, t2.xyzw, s1, l(0.000000)
        mad r2.z, r2.z, cb0[20].w, |r16.y|
        add r2.z, -r2.z, r17.w
        mad r9.zw, r9.xxxy, cb0[13].wwww, -r16.xxxz
        dp2 r4.w, r9.zwzz, r9.zwzz
        add r4.w, -r4.w, cb0[12].x
        max r4.w, r4.w, l(0.000000)
        mad r2.z, -r4.w, cb0[12].y, r2.z
        lt r4.w, l(0.000000), r2.z
        if_nz r4.w
          add r4.w, -r2.z, l(1.000000)
          mul r18.xyz, r4.wwww, cb0[11].xyzx
          mul r19.w, r2.z, l(0.400000)
          dp3 r2.z, r11.xyzx, r11.xyzx
          div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
          dp3 r4.w, r12.xyzx, r12.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          dp3 r5.w, r13.xyzx, r13.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r6.w, r14.xyzx, r14.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          mul r20.xyz, r5.wwww, cb0[26].xyzx
          mad r20.xyz, cb0[28].xyzx, r6.wwww, r20.xyzx
          mad r20.xyz, cb0[24].xyzx, r4.wwww, r20.xyzx
          mad r20.xyz, cb0[22].xyzx, r2.zzzz, r20.xyzx
          mad r17.xyz, r20.xyzx, r19.wwww, r17.xyzx
          mul r17.xyz, r19.wwww, r17.xyzx
          mul r19.xyz, r17.xyzx, r18.xyzx
          add r2.z, -r15.w, l(1.000000)
          mad r17.xyzw, r19.xyzw, r2.zzzz, r15.xyzw
          lt r2.z, l(0.990000), r17.w
          if_nz r2.z
            mov r10.xyzw, r19.xyzw
            mov r15.xyzw, r17.xyzw
            break
          endif
          mov r10.xyzw, r19.xyzw
          mov r15.xyzw, r17.xyzw
        endif
        add r11.xyz, r0.xyzx, r11.xyzx
        add r12.xyz, r0.xyzx, r12.xyzx
        add r13.xyz, r0.xyzx, r13.xyzx
        add r14.xyz, r0.xyzx, r14.xyzx
        add r2.y, r2.y, l(-1.000000)
        add r16.xyz, r8.xyzx, r16.xyzx
      endloop
      lt r0.x, r15.w, l(0.990000)
      and r0.x, r0.x, l(0x3f800000)
      add r0.y, -r15.w, l(1.000000)
      mul r0.z, r1.w, r2.y
      mul r0.x, r0.y, r0.x
      mul r0.x, r0.z, r0.x
      mad r0.xyzw, r10.xyzw, r0.xxxx, r15.xyzw
      mul r0.xyzw, r0.xyzw, cb0[10].wwww
      mul r0.xyzw, r2.wwww, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xyzw, r1.xxxx
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
sample r4.xyzw, v1.zwzz, t4.xyzw, s4
add r0.xyz, -r3.xyzx, r4.xyzx
mad r0.xyz, r2.wwww, r0.xyzx, r3.xyzx
mad_sat r0.w, -r0.w, r1.x, l(1.000000)
mad o0.xyz, r0.xyzx, r0.wwww, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used