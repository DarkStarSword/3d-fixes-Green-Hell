// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 6f008225aae572b0-ps.txt
// 3DMigoto: 6f008225aae572b0 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 121 4 14
//   undeciphered1a: 17
//   Keywords { "FOG_OF_WAR_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT2" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 448
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 288 [_FogOfWarSize] 3
//   Vector 304 [_FogOfWarCenterAdjusted] 3
//   Vector 320 [_FogPointLightPosition0] 3
//   Vector 336 [_FogPointLightColor0] 3
//   Vector 352 [_FogPointLightPosition1] 3
//   Vector 368 [_FogPointLightColor1] 3
//   Vector 384 [_FogPointLightPosition2] 3
//   Vector 400 [_FogPointLightColor2] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_FogOfWar] 2D 4
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:19:44 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[26], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 19
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r17.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 6f008225aae572b0-ps.txt

mul r17.w, -r17.x, r17.y
mad r18.xyz, -r17.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r18.y
mov r1.xz, r18.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r3.xy, v1.xyxx, cb1[6].xyxx
dp2 r0.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r3.xyxx
frc r0.w, r0.w
add r0.w, r0.w, l(-0.500000)
lt r1.w, cb0[13].y, r1.y
lt r3.x, cb0[13].y, r0.y
and r1.w, r1.w, r3.x
lt r3.x, r1.y, r0.z
lt r3.y, r0.y, r0.z
and r3.x, r3.y, r3.x
or r1.w, r1.w, r3.x
if_z r1.w
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r3.xy, r2.xzxx, cb0[18].xzxx
    add r3.xy, r3.xyxx, -cb0[19].xzxx
    sample r3.xyzw, r3.xyxx, t1.wxyz, s4
    ge r0.x, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.x, l(0)
  endif
  if_z r0.x
    add r2.w, r2.y, l(0.000010)
    add r2.xyz, -r1.xyzx, r2.xwzx
    dp3 r0.x, r2.xyzx, r2.xyzx
    sqrt r0.x, r0.x
    dp2 r1.w, r2.xzxx, r2.xzxx
    sqrt r1.w, r1.w
    div r3.yz, r2.xxzx, r1.wwww
    div r1.w, r1.w, r2.y
    max r2.w, r0.z, r1.y
    min r4.y, r2.w, cb0[13].y
    add r2.w, r1.y, -r4.y
    mul r2.w, r1.w, r2.w
    mad r4.xz, -r3.yyzy, r2.wwww, r18.xxzx
    min r2.w, r0.x, cb0[12].z
    add r5.xyz, -r1.xyzx, r4.xyzx
    dp3 r1.x, r5.xyzx, r5.xyzx
    sqrt r1.x, r1.x
    lt r1.z, r1.x, r2.w
    if_nz r1.z
      lt r1.z, l(0.000000), r1.w
      lt r3.w, l(-0.500000), r0.y
      and r1.z, r1.z, r3.w
      lt r3.w, r1.w, l(0.000000)
      lt r0.y, r0.y, l(0.500000)
      and r0.y, r0.y, r3.w
      and r0.y, r0.z, r0.y
      movc r5.y, r1.z, cb0[13].y, r0.y
      add r0.y, -r1.y, r5.y
      mul r0.y, r0.y, r1.w
      mad r5.xz, -r3.yyzy, r0.yyyy, r18.xxzx
      add r1.yzw, r4.xxyz, -r5.xxyz
      dp3 r0.y, r1.yzwy, r1.yzwy
      sqrt r0.y, r0.y
      add r0.z, -r1.x, r2.w
      min r0.y, r0.z, r0.y
      lt r1.y, l(0.000000), r0.y
      if_nz r1.y
        log r1.y, r0.y
        mul r1.y, r1.y, l(0.693147182)
        max r1.y, r1.y, l(0.000000)
        mad r1.y, r1.y, cb0[15].x, l(0.100000)
        mul r1.y, r1.y, cb0[13].z
        mul_sat r1.z, r2.w, cb0[15].y
        mul r1.y, r1.z, r1.y
        max r1.y, r1.y, l(0.010000)
        mul r2.xyz, r1.yyyy, r2.xyzx
        div r2.xyz, r2.xyzx, r0.xxxx
        div r0.x, r0.y, r1.y
        add r1.yzw, r4.xxyz, -cb0[20].xxyz
        add r3.yzw, r4.xxyz, -cb0[22].xxyz
        add r5.xyz, r4.xyzx, -cb0[24].xyzx
        mul r6.xz, r2.xxzx, cb0[13].wwww
        mul r2.w, cb0[13].z, cb0[13].y
        div r6.y, r2.y, r2.w
        add r4.xz, r4.xxzx, cb0[14].xxzx
        mul r4.xz, r4.xxzx, cb0[13].wwww
        div r2.w, r4.y, r2.w
        ge r0.y, r0.y, r0.z
        mov r7.xyzw, l(0,0,0,0)
        mov r8.xyz, r1.yzwy
        mov r9.xyz, r3.yzwy
        mov r10.xyz, r5.xyzx
        mov r12.xz, r4.xxzx
        mov r0.z, r0.x
        mov r12.y, r2.w
        mov r11.xyzw, l(0,0,0,0)
        loop
          ge r4.y, l(1.000000), r0.z
          breakc_nz r4.y
          sample_l r13.xyzw, r12.xzxx, t2.xyzw, s1, l(0.000000)
          add r4.y, -|r12.y|, r13.w
          lt r4.w, l(0.000000), r4.y
          if_nz r4.w
            add r4.w, -r4.y, l(1.000000)
            mul r14.xyz, r4.wwww, cb0[11].xyzx
            mul r15.w, r4.y, l(0.400000)
            dp3 r4.y, r8.xyzx, r8.xyzx
            div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r4.y
            dp3 r4.w, r9.xyzx, r9.xyzx
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            dp3 r5.w, r10.xyzx, r10.xyzx
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            mul r16.xyz, r4.wwww, cb0[23].xyzx
            mad r16.xyz, cb0[25].xyzx, r5.wwww, r16.xyzx
            mad r16.xyz, cb0[21].xyzx, r4.yyyy, r16.xyzx
            mad r13.xyz, r16.xyzx, r15.wwww, r13.xyzx
            mul r13.xyz, r15.wwww, r13.xyzx
            mul r15.xyz, r13.xyzx, r14.xyzx
            add r4.y, -r11.w, l(1.000000)
            mad r13.xyzw, r15.xyzw, r4.yyyy, r11.xyzw
            lt r4.y, l(0.990000), r13.w
            if_nz r4.y
              mov r7.xyzw, r15.xyzw
              mov r11.xyzw, r13.xyzw
              break
            endif
            mov r7.xyzw, r15.xyzw
            mov r11.xyzw, r13.xyzw
          endif
          add r8.xyz, r2.xyzx, r8.xyzx
          add r9.xyz, r2.xyzx, r9.xyzx
          add r10.xyz, r2.xyzx, r10.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r12.xyz, r6.xyzx, r12.xyzx
        endloop
        lt r0.x, r11.w, l(0.990000)
        and r0.xy, r0.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
        add r1.y, -r11.w, l(1.000000)
        mul r0.y, r0.z, r0.y
        mul r0.x, r0.x, r1.y
        mul r0.x, r0.y, r0.x
        mad r2.xyzw, r7.xyzw, r0.xxxx, r11.xyzw
        mul r2.xyzw, r2.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r1.xyzw, r0.xxxx, r2.xyzw
        mul r1.xyzw, r3.xxxx, r1.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.w, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
sample r4.xyzw, v1.zwzz, t4.xyzw, s3
add r0.yzw, -r3.xxyz, r4.xxyz
mad r0.yzw, r2.wwww, r0.yyzw, r3.xxyz
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r0.yzwy, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used