// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9ff8695c768b6611-ps.txt
// 3DMigoto: 9ff8695c768b6611 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 198 5 14
//   undeciphered1a: 23
//   Keywords { "FOG_OF_WAR_ON" "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT2" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 704
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogSkyColor]
//   Vector 336 [_FogOfWarSize] 3
//   Vector 352 [_FogOfWarCenterAdjusted] 3
//   Vector 368 [_FogPointLightPosition0] 3
//   Vector 384 [_FogPointLightColor0] 3
//   Vector 400 [_FogPointLightPosition1] 3
//   Vector 416 [_FogPointLightColor1] 3
//   Vector 432 [_FogPointLightPosition2] 3
//   Vector 448 [_FogPointLightColor2] 3
//   Vector 464 [_SunPosition] 3
//   Vector 480 [_SunDir] 3
//   Vector 496 [_SunColor] 3
//   Vector 512 [_FogScatteringData]
//   Vector 528 [_FogScatteringData2]
//   Vector 624 [_VolumetricFogSunWorldPos]
//   Vector 640 [_VolumetricFogSunShadowsData]
//   Float 656 [_Jitter]
//   Matrix 560 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_FogOfWar] 2D 4
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:48:46 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[42], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 25
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r23.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9ff8695c768b6611-ps.txt

mul r23.w, -r23.x, r23.y
mad r24.xyz, -r23.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r24.y
mov r1.xz, r24.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
mul r0.zw, v1.xxxy, cb1[6].xxxy
dp2 r0.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.zwzz
frc r0.z, r0.z
add r0.z, r0.z, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.y
and r0.w, r0.w, r1.w
lt r1.w, r1.y, -cb0[13].y
lt r3.x, r0.y, -cb0[13].y
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  lt r0.w, r0.x, cb0[16].w
  if_nz r0.w
    div r3.xy, r2.xzxx, cb0[21].xzxx
    add r3.xy, r3.xyxx, -cb0[22].xzxx
    sample r3.xyzw, r3.xyxx, t1.wxyz, s4
    ge r0.w, l(0.000000), r3.x
  else
    mov r3.x, l(1.000000)
    mov r0.w, l(0)
  endif
  if_z r0.w
    add r2.w, r2.y, l(0.000010)
    add r3.yzw, -r1.xxyz, r2.xxwz
    dp3 r0.w, r3.yzwy, r3.yzwy
    sqrt r0.w, r0.w
    add r4.xyz, r1.xyzx, -cb0[17].xyzx
    div r5.xyz, r0.wwww, r3.yzwy
    div r6.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r7.xyz, -r4.xyzx, -r6.xyzx
    mul r7.xyz, r5.xyzx, r7.xyzx
    add r4.xyz, -r4.xyzx, r6.xyzx
    mul r4.xyz, r4.xyzx, r5.xyzx
    min r6.xyz, r7.xyzx, r4.xyzx
    max r2.yw, r6.yyyz, r6.xxxx
    max r1.w, r2.w, r2.y
    max r1.w, r1.w, l(0.000000)
    max r4.xyz, r7.xyzx, r4.xyzx
    min r2.yw, r4.yyyz, r4.xxxx
    min r2.y, r2.w, r2.y
    min r2.w, r0.w, cb0[12].z
    min r2.y, r2.w, r2.y
    add r2.y, -r1.w, r2.y
    lt r4.x, l(0.000000), r2.y
    if_nz r4.x
      div r4.xyz, r1.wwww, r5.xyzx
      add r4.xyz, r1.xyzx, r4.xyzx
      div r1.xy, cb0[18].xzxx, cb0[13].wwww
      log r1.z, r2.y
      mul r1.z, r1.z, l(0.693147182)
      max r1.z, r1.z, l(0.000000)
      mad r1.z, r1.z, cb0[15].x, l(0.100000)
      mul r1.z, r1.z, cb0[13].z
      mul_sat r5.x, r2.w, cb0[15].y
      mul r1.z, r1.z, r5.x
      add r2.w, -r1.w, r2.w
      max r1.z, r1.z, l(0.010000)
      mul r5.xyz, r1.zzzz, r3.yzwy
      div r5.xyz, r5.xyzx, r0.wwww
      div r1.z, r2.y, r1.z
      add r6.xyz, r4.xyzx, -cb0[23].xyzx
      add r7.xyz, r4.xyzx, -cb0[25].xyzx
      add r8.xyz, r4.xyzx, -cb0[27].xyzx
      mul r9.xz, r5.xxzx, cb0[13].wwww
      mul r5.w, cb0[13].z, cb0[13].y
      div r9.y, r5.y, r5.w
      add r10.xy, r4.xzxx, cb0[14].xzxx
      mul r10.xy, r10.xyxx, cb0[13].wwww
      div r5.w, r4.y, r5.w
      add r10.zw, cb0[14].xxxz, cb0[17].xxxz
      add r11.xy, cb0[14].xzxx, r24.xzxx
      frc r6.w, r0.z
      mad r1.z, r6.w, cb0[41].x, r1.z
      add r4.w, r4.y, cb0[13].x
      mul r12.xyz, r4.wwww, cb0[36].xywx
      mad r12.xyz, cb0[35].xywx, r4.xxxx, r12.xyzx
      mad r12.xyz, cb0[37].xywx, r4.zzzz, r12.xyzx
      add r12.xyz, r12.xyzx, cb0[38].xywx
      div r11.zw, r12.xxxy, r12.zzzz
      mad r11.zw, r11.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r4.y, r0.z, cb0[40].y, l(1.000000)
      mul r4.y, r2.y, r4.y
      mul r12.xyz, r3.yzwy, r4.yyyy
      div r12.xyz, r12.xyzx, r0.wwww
      add r12.xyz, r4.xwzx, r12.xyzx
      mul r13.xyz, r12.yyyy, cb0[36].xywx
      mad r13.xyz, cb0[35].xywx, r12.xxxx, r13.xyzx
      mad r13.xyz, cb0[37].xywx, r12.zzzz, r13.xyzx
      add r13.xyz, r13.xyzx, cb0[38].xywx
      div r13.xy, r13.xyxx, r13.zzzz
      mad r13.xy, r13.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r1.w, -r1.w, cb0[39].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[40].x
      div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
      ge r2.y, r2.y, r2.w
      and r2.y, r2.y, l(0x3f800000)
      add r11.zw, r11.zzzw, -r13.xxxy
      add r4.xzw, r4.xxwz, -r12.xxyz
      mov r14.xyzw, l(0,0,0,0)
      mov r15.xyz, r6.xyzx
      mov r16.xyz, r7.xyzx
      mov r17.xyz, r8.xyzx
      mov r19.xz, r10.xxyx
      mov r2.w, r1.z
      mov r19.y, r5.w
      mov r18.xyzw, l(0,0,0,0)
      loop
        ge r6.w, l(1.000000), r2.w
        breakc_nz r6.w
        mad r13.zw, r10.zzzw, cb0[13].wwww, -r19.xxxz
        mul r13.zw, r1.xxxy, |r13.zzzw|
        max r6.w, r13.w, r13.z
        sample_l r20.xyzw, r19.xzxx, t2.xyzw, s1, l(0.000000)
        mad r6.w, r6.w, cb0[18].w, |r19.y|
        add r6.w, -r6.w, r20.w
        mad r13.zw, r11.xxxy, cb0[13].wwww, -r19.xxxz
        dp2 r7.w, r13.zwzz, r13.zwzz
        add r7.w, -r7.w, cb0[12].x
        max r7.w, r7.w, l(0.000000)
        mad r6.w, -r7.w, cb0[12].y, r6.w
        lt r7.w, l(0.000000), r6.w
        if_nz r7.w
          add r7.w, -r6.w, l(1.000000)
          mul r21.xyz, r7.wwww, cb0[11].xyzx
          mul r21.w, r6.w, l(0.400000)
          mul r6.w, r4.y, r2.w
          mad r13.zw, r6.wwww, r11.zzzw, r13.xxxy
          sample_l r22.xyzw, r13.zwzz, t3.xyzw, s5, l(0.000000)
          dp4 r7.w, r22.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          mad r22.xyz, r6.wwww, r4.xzwx, r12.xyzx
          add r22.xyz, r22.xyzx, -cb0[39].xyzx
          dp3 r6.w, r22.xyzx, r22.xyzx
          sqrt r6.w, r6.w
          add_sat r6.w, -r6.w, r7.w
          mul r7.w, r1.w, r18.w
          add r6.w, r6.w, l(-1.000000)
          mad r7.w, r7.w, r6.w, l(1.000000)
          mad r6.w, cb0[40].z, r6.w, l(1.000000)
          mul r21.xyzw, r6.wwww, r21.xyzw
          dp3 r6.w, r15.xyzx, r15.xyzx
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          dp3 r8.w, r16.xyzx, r16.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          dp3 r9.w, r17.xyzx, r17.xyzx
          div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
          mul r22.xyz, r8.wwww, cb0[26].xyzx
          mad r22.xyz, cb0[28].xyzx, r9.wwww, r22.xyzx
          mad r22.xyz, cb0[24].xyzx, r6.wwww, r22.xyzx
          mul r22.xyz, r21.wwww, r22.xyzx
          mad r20.xyz, r20.xyzx, r7.wwww, r22.xyzx
          mul r20.xyz, r21.wwww, r20.xyzx
          mul r21.xyz, r20.xyzx, r21.xyzx
          add r6.w, -r18.w, l(1.000000)
          mad r20.xyzw, r21.xyzw, r6.wwww, r18.xyzw
          lt r6.w, l(0.990000), r20.w
          if_nz r6.w
            mov r14.xyzw, r21.xyzw
            mov r18.xyzw, r20.xyzw
            break
          endif
          mov r14.xyzw, r21.xyzw
          mov r18.xyzw, r20.xyzw
        endif
        add r15.xyz, r5.xyzx, r15.xyzx
        add r16.xyz, r5.xyzx, r16.xyzx
        add r17.xyz, r5.xyzx, r17.xyzx
        add r2.w, r2.w, l(-1.000000)
        add r19.xyz, r9.xyzx, r19.xyzx
      endloop
      lt r1.x, r18.w, l(0.990000)
      and r1.x, r1.x, l(0x3f800000)
      add r1.y, -r18.w, l(1.000000)
      mul r1.z, r2.w, r2.y
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r1.xyzw, r14.xyzw, r1.xxxx, r18.xyzw
      div r3.yzw, r3.yyzw, r0.wwww
      dp3 r0.w, r3.yzwy, cb0[30].xyzx
      mul r0.w, r0.w, cb0[33].w
      max r0.w, r0.w, l(0.000000)
      mul r0.w, r0.w, r0.w
      mul r0.w, r0.w, r0.w
      mul r0.w, r0.w, r0.w
      mul r0.w, r1.w, r0.w
      add r3.yzw, -r1.xxyz, cb0[31].xxyz
      mad r1.xyz, r0.wwww, r3.yzwy, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul r1.xyzw, r3.xxxx, r1.xyzw
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mul r0.w, r0.z, cb0[15].w
mad r2.y, r0.z, cb0[15].w, l(1.000000)
mul r3.xyzw, r1.xyzw, r2.yyyy
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
sample r5.xyzw, v1.zwzz, t5.xyzw, s3
add r1.xyz, -r4.xyzx, r5.xyzx
mad r1.xyz, r3.wwww, r1.xyzx, r4.xyzx
ge r0.x, r0.x, cb0[16].w
if_nz r0.x
  add r0.x, r0.y, cb0[13].x
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r2.xz, r0.xxxx, r2.xxzx
  mad r2.xz, r2.xxzx, cb0[13].wwww, cb0[16].zzzz
  sample r4.xyzw, r2.xzxx, t2.xyzw, s1
  mad r0.y, r0.w, l(3.000000), r4.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.y, -r0.y, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.y, r0.x
  mul r0.x, r0.x, cb0[19].w
  add r2.xzw, -r1.xxyz, cb0[19].xxyz
  mad r1.xyz, r0.xxxx, r2.xzwx, r1.xyzx
endif
mad_sat r0.x, -r1.w, r2.y, l(1.000000)
mad r0.xyw, r1.xyxz, r0.xxxx, r3.xyxz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[29].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[29].y
add r2.x, -v1.x, cb0[29].x
add r2.y, r1.x, -v1.y
mad r0.z, r0.z, cb0[33].z, l(1.000000)
mul r0.z, r0.z, cb0[32].x
mov r1.xyz, l(0,0,0,0)
mov r2.zw, v1.xxxy
mov r1.w, cb0[33].x
mov r3.x, cb0[32].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r2.zw, r2.xxxy, r0.zzzz, r2.zzzw
  sample_l r4.xyzw, r2.zwzz, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[32].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[33].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[32].zzzz, r0.xywx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used