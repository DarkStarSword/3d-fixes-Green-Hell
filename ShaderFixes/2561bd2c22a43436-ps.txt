// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 2561bd2c22a43436-ps.txt
// 3DMigoto: 2561bd2c22a43436 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 148 4 12
//   undeciphered1a: 15
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_BOX" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 592
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 368 [_SunDir] 3
//   Vector 384 [_SunColor] 3
//   Vector 416 [_FogScatteringData2]
//   Vector 512 [_VolumetricFogSunWorldPos]
//   Vector 528 [_VolumetricFogSunShadowsData]
//   Float 544 [_Jitter]
//   Matrix 448 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_FogOfWar] 2D 3
//   SetTexture 3 [_NoiseTex] 2D 0
//   SetTexture 4 [_VolumetricFogSunDepthTexture] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:40:53 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 17
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 2561bd2c22a43436-ps.txt

mul r15.w, -r15.x, r15.y
mad r16.xyz, -r15.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s2
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.y, -cb0[13].x, r16.y
mov r1.xz, r16.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
lt r0.z, cb0[13].y, r1.y
lt r0.w, cb0[13].y, r0.y
and r0.z, r0.w, r0.z
lt r0.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r0.w
or r0.y, r0.y, r0.z
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r0.xyzw, r0.xyxx, t2.wxyz, s3
    ge r0.y, l(0.000000), r0.x
  else
    mov r0.xy, l(1.000000,0,0,0)
  endif
  if_z r0.y
    add r2.w, r2.y, l(0.000010)
    add r0.yzw, -r1.xxyz, r2.xxwz
    dp3 r1.w, r0.yzwy, r0.yzwy
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.xyz, r1.wwww, r0.yzwy
    div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
    add r5.xyz, -r2.xyzx, -r4.xyzx
    mul r5.xyz, r3.xyzx, r5.xyzx
    add r2.xyz, -r2.xyzx, r4.xyzx
    mul r2.xyz, r2.xyzx, r3.xyzx
    min r4.xyz, r5.xyzx, r2.xyzx
    max r4.xy, r4.yzyy, r4.xxxx
    max r2.w, r4.y, r4.x
    max r2.w, r2.w, l(0.000000)
    max r2.xyz, r5.xyzx, r2.xyzx
    min r2.xy, r2.yzyy, r2.xxxx
    min r2.x, r2.y, r2.x
    min r2.y, r1.w, cb0[12].z
    min r2.x, r2.y, r2.x
    add r2.x, -r2.w, r2.x
    lt r2.z, l(0.000000), r2.x
    if_nz r2.z
      mul r4.xy, v1.xyxx, cb1[6].xyxx
      dp2 r2.z, l(2.40845060, 3.25352120, 0.000000, 0.000000), r4.xyxx
      frc r2.z, r2.z
      add r2.z, r2.z, l(-0.500000)
      div r3.xyz, r2.wwww, r3.xyzx
      add r3.xyz, r1.xyzx, r3.xyzx
      div r1.xy, cb0[18].xzxx, cb0[13].wwww
      log r1.z, r2.x
      mul r1.z, r1.z, l(0.693147182)
      max r1.z, r1.z, l(0.000000)
      mad r1.z, r1.z, cb0[15].x, l(0.100000)
      mul r1.z, r1.z, cb0[13].z
      mul_sat r4.x, r2.y, cb0[15].y
      mul r1.z, r1.z, r4.x
      add r2.y, -r2.w, r2.y
      max r1.z, r1.z, l(0.010000)
      mul r4.xyz, r0.yzwy, r1.zzzz
      div r4.xyz, r4.xyzx, r1.wwww
      div r1.z, r2.x, r1.z
      mul r5.xz, r4.xxzx, cb0[13].wwww
      mul r4.x, cb0[13].z, cb0[13].y
      div r5.y, r4.y, r4.x
      add r4.yz, r3.xxzx, cb0[14].xxzx
      mul r4.yz, r4.yyzy, cb0[13].wwww
      div r4.x, r3.y, r4.x
      add r6.xy, cb0[14].xzxx, cb0[17].xzxx
      frc r4.w, r2.z
      mad r1.z, r4.w, cb0[34].x, r1.z
      add r3.w, r3.y, cb0[13].x
      mul r7.xyz, r3.wwww, cb0[29].xywx
      mad r7.xyz, cb0[28].xywx, r3.xxxx, r7.xyzx
      mad r7.xyz, cb0[30].xywx, r3.zzzz, r7.xyzx
      add r7.xyz, r7.xyzx, cb0[31].xywx
      div r6.zw, r7.xxxy, r7.zzzz
      mad r6.zw, r6.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r2.z, r2.z, cb0[33].y, l(1.000000)
      mul r2.z, r2.z, r2.x
      mul r7.xyz, r0.yzwy, r2.zzzz
      div r7.xyz, r7.xyzx, r1.wwww
      add r7.xyz, r3.xwzx, r7.xyzx
      mul r8.xyz, r7.yyyy, cb0[29].xywx
      mad r8.xyz, cb0[28].xywx, r7.xxxx, r8.xyzx
      mad r8.xyz, cb0[30].xywx, r7.zzzz, r8.xyzx
      add r8.xyz, r8.xyzx, cb0[31].xywx
      div r8.xy, r8.xyxx, r8.zzzz
      mad r8.xy, r8.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r2.z, -r2.w, cb0[32].w
      mul_sat r2.z, r2.z, l(0.0285714287)
      mul r2.z, r2.z, cb0[33].x
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
      ge r2.x, r2.x, r2.y
      and r2.x, r2.x, l(0x3f800000)
      add r6.zw, r6.zzzw, -r8.xxxy
      add r3.xyz, r3.xwzx, -r7.xyzx
      mov r9.xyzw, l(0,0,0,0)
      mov r2.y, r1.z
      mov r11.xyz, r4.yxzy
      mov r10.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r2.y
        breakc_nz r3.w
        mad r8.zw, r6.xxxy, cb0[13].wwww, -r11.xxxz
        mul r8.zw, r1.xxxy, |r8.zzzw|
        max r3.w, r8.w, r8.z
        sample_l r12.xyzw, r11.xzxx, t3.xyzw, s0, l(0.000000)
        mad r3.w, r3.w, cb0[18].w, |r11.y|
        add r3.w, -r3.w, r12.w
        lt r4.w, l(0.000000), r3.w
        if_nz r4.w
          add r4.w, -r3.w, l(1.000000)
          mul r13.xyz, r4.wwww, cb0[11].xyzx
          mul r13.w, r3.w, l(0.400000)
          mul r3.w, r2.w, r2.y
          mad r8.zw, r3.wwww, r6.zzzw, r8.xxxy
          sample_l r14.xyzw, r8.zwzz, t4.xyzw, s4, l(0.000000)
          dp4 r4.w, r14.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mad r14.xyz, r3.wwww, r3.xyzx, r7.xyzx
          add r14.xyz, r14.xyzx, -cb0[32].xyzx
          dp3 r3.w, r14.xyzx, r14.xyzx
          sqrt r3.w, r3.w
          add_sat r3.w, -r3.w, r4.w
          mul r4.w, r2.z, r10.w
          add r3.w, r3.w, l(-1.000000)
          mad r4.w, r4.w, r3.w, l(1.000000)
          mul r12.xyz, r4.wwww, r12.xyzx
          mad r3.w, cb0[33].z, r3.w, l(1.000000)
          mul r13.xyzw, r3.wwww, r13.xyzw
          mul r12.xyz, r12.xyzx, r13.wwww
          mul r13.xyz, r12.xyzx, r13.xyzx
          add r3.w, -r10.w, l(1.000000)
          mad r12.xyzw, r13.xyzw, r3.wwww, r10.xyzw
          lt r3.w, l(0.990000), r12.w
          if_nz r3.w
            mov r9.xyzw, r13.xyzw
            mov r10.xyzw, r12.xyzw
            break
          endif
          mov r9.xyzw, r13.xyzw
          mov r10.xyzw, r12.xyzw
        endif
        add r2.y, r2.y, l(-1.000000)
        add r11.xyz, r5.xyzx, r11.xyzx
      endloop
      lt r1.x, r10.w, l(0.990000)
      and r1.x, r1.x, l(0x3f800000)
      add r1.y, -r10.w, l(1.000000)
      mul r1.z, r2.y, r2.x
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r2.xyzw, r9.xyzw, r1.xxxx, r10.xyzw
      div r0.yzw, r0.yyzw, r1.wwww
      dp3 r0.y, r0.yzwy, cb0[23].xyzx
      mul r0.y, r0.y, cb0[26].w
      max r0.y, r0.y, l(0.000000)
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r2.w, r0.y
      add r1.xyz, -r2.xyzx, cb0[24].xyzx
      mad r2.xyz, r0.yyyy, r1.xyzx, r2.xyzx
      mul r1.xyzw, r2.xyzw, cb0[10].wwww
      mul o0.xyzw, r0.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used