// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4b49bbf7e601642f-ps.txt
// 3DMigoto: 4b49bbf7e601642f |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 129 3 12
//   undeciphered1a: 16
//   Keywords { "FOG_DISTANCE_ON" "FOG_VOID_BOX" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT1" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 400
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:59:16 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[23], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4b49bbf7e601642f-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
mov r0.yz, -cb0[13].xxyx
add r1.z, r0.y, r17.z
mov r1.xy, r17.xyxx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.z, l(0.000010)
mul r0.yw, v1.xxxy, cb1[6].xxxy
dp2 r0.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.ywyy
frc r0.y, r0.y
add r0.y, r0.y, l(-0.500000)
lt r0.w, cb0[13].y, r1.z
lt r1.w, cb0[13].y, r0.x
and r0.w, r0.w, r1.w
lt r1.w, r1.z, r0.z
lt r3.x, r0.x, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.z, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xywx
  dp3 r0.w, r2.xyzx, r2.xyzx
  sqrt r0.w, r0.w
  dp2 r1.w, r2.xyxx, r2.xyxx
  sqrt r1.w, r1.w
  div r3.xy, r2.xyxx, r1.wwww
  div r1.w, r1.w, r2.z
  max r2.w, r0.z, r1.z
  min r4.z, r2.w, cb0[13].y
  add r2.w, r1.z, -r4.z
  mul r2.w, r1.w, r2.w
  mad r4.xy, -r3.xyxx, r2.wwww, r17.xyxx
  min r2.w, r0.w, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xyzx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.y, r1.x, r2.w
  if_nz r1.y
    lt r1.y, l(0.000000), r1.w
    lt r3.z, l(-0.500000), r0.x
    and r1.y, r1.y, r3.z
    lt r3.z, r1.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r3.z
    and r0.x, r0.z, r0.x
    movc r5.z, r1.y, cb0[13].y, r0.x
    add r0.x, -r1.z, r5.z
    mul r0.x, r0.x, r1.w
    mad r5.xy, -r3.xyxx, r0.xxxx, r17.xyxx
    add r1.yzw, r4.xxyz, -r5.xxyz
    dp3 r0.x, r1.yzwy, r1.yzwy
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r2.w
    min r0.x, r0.z, r0.x
    lt r1.y, l(0.000000), r0.x
    if_nz r1.y
      mul r1.yzw, r2.xxyz, r0.xxxx
      div r1.yzw, r1.yyzw, r0.wwww
      add r1.yzw, r1.yyzw, r4.xxyz
      add r1.yzw, -r1.yyzw, cb0[17].xxyz
      mul r1.yzw, |r1.yyzw|, cb0[18].xxyz
      max r1.y, r1.z, r1.y
      max r1.y, r1.w, r1.y
      add r1.y, r1.y, l(-1.000000)
      mad_sat r1.y, cb0[18].w, r1.y, l(1.000000)
      lt r1.z, l(0.000000), r1.y
      if_nz r1.z
        log r1.z, r0.x
        mul r1.z, r1.z, l(0.693147182)
        max r1.z, r1.z, l(0.000000)
        mad r1.z, r1.z, cb0[15].x, l(0.100000)
        mul r1.z, r1.z, cb0[13].z
        mul_sat r1.w, r2.w, cb0[15].y
        mul r1.z, r1.w, r1.z
        max r1.z, r1.z, l(0.010000)
        mul r2.xyz, r1.zzzz, r2.xyzx
        div r2.xyz, r2.xyzx, r0.wwww
        div r0.w, r0.x, r1.z
        add r3.xyz, r4.xyzx, -cb0[19].xyzx
        add r5.xyz, r4.xyzx, -cb0[21].xyzx
        mul r6.xy, r2.xyxx, cb0[13].wwww
        mul r1.z, cb0[13].z, cb0[13].y
        div r6.z, r2.z, r1.z
        add r4.xy, r4.xyxx, cb0[14].xzxx
        mul r4.xy, r4.xyxx, cb0[13].wwww
        div r1.z, r4.z, r1.z
        add r4.zw, cb0[14].xxxy, r17.xxxy
        ge r0.x, r0.x, r0.z
        mov r7.xyzw, l(0,0,0,0)
        mov r8.xyz, r3.xyzx
        mov r9.xyz, r5.xyzx
        mov r11.xy, r4.xyxx
        mov r0.z, r0.w
        mov r11.z, r1.z
        mov r10.xyzw, l(0,0,0,0)
        loop
          ge r1.w, l(1.000000), r0.z
          breakc_nz r1.w
          sample_l r12.xyzw, r11.xyxx, t2.xyzw, s1, l(0.000000)
          add r1.w, -|r11.z|, r12.w
          mad r13.xy, r4.zwzz, cb0[13].wwww, -r11.xyxx
          dp2 r2.w, r13.xyxx, r13.xyxx
          add r2.w, -r2.w, cb0[12].x
          max r2.w, r2.w, l(0.000000)
          mad r1.w, -r2.w, cb0[12].y, r1.w
          lt r2.w, l(0.000000), r1.w
          if_nz r2.w
            add r2.w, -r1.w, l(1.000000)
            mul r13.xyz, r2.wwww, cb0[11].xyzx
            mul r14.w, r1.w, l(0.400000)
            dp3 r1.w, r8.xyzx, r8.xyzx
            div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
            dp3 r2.w, r9.xyzx, r9.xyzx
            div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
            mul r15.xyz, r1.wwww, cb0[20].xyzx
            mad r15.xyz, cb0[22].xyzx, r2.wwww, r15.xyzx
            mad r12.xyz, r15.xyzx, r14.wwww, r12.xyzx
            mul r12.xyz, r14.wwww, r12.xyzx
            mul r14.xyz, r12.xyzx, r13.xyzx
            add r1.w, -r10.w, l(1.000000)
            mad r12.xyzw, r14.xyzw, r1.wwww, r10.xyzw
            lt r1.w, l(0.990000), r12.w
            if_nz r1.w
              mov r7.xyzw, r14.xyzw
              mov r10.xyzw, r12.xyzw
              break
            endif
            mov r7.xyzw, r14.xyzw
            mov r10.xyzw, r12.xyzw
          endif
          add r8.xyz, r2.xyzx, r8.xyzx
          add r9.xyz, r2.xyzx, r9.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r11.xyz, r6.xyzx, r11.xyzx
        endloop
        lt r0.w, r10.w, l(0.990000)
        and r0.xw, r0.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
        add r1.z, -r10.w, l(1.000000)
        mul r0.x, r0.z, r0.x
        mul r0.z, r0.w, r1.z
        mul r0.x, r0.x, r0.z
        mad r2.xyzw, r7.xyzw, r0.xxxx, r10.xyzw
        mul r2.xyzw, r2.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r2.xyzw, r0.xxxx, r2.xyzw
        mul r1.xyzw, r1.yyyy, r2.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.y, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad o0.xyz, r3.xyzx, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used