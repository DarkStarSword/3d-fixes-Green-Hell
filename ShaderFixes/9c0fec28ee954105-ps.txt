// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9c0fec28ee954105-ps.txt
// 3DMigoto: 9c0fec28ee954105 |    Unity headers extracted from Hidden_HxVolumetricProjector
//    Shader "Hidden/HxVolumetricProjector" {
//      SubShader 1/1 {
// 1:     Pass 1/2 {
// 2:     Pass 2/2 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Hidden_HxVolumetricProjector:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 233 0 10
//   undeciphered1a: 16
//   Keywords { "HEIGHTFOG_ON" }
//   undeciphered2: 1 4 3 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 6016
//   Vector 224 [Phase]
//   Vector 256 [Density]
//   Vector 272 [FogHeights] 3
//   Vector 928 [hxVolumeSettingsOld0] 2
//   Vector 936 [hxVolumeSettingsOld1] 2
//   Vector 944 [hxVolumeSettingsOld2] 2
//   Vector 952 [hxVolumeSettingsOld3] 2
//   Vector 960 [hxVolumeSettingsOld4] 2
//   Vector 968 [hxVolumeSettingsOld5] 2
//   Vector 976 [hxVolumeSettingsOld6] 2
//   Vector 984 [hxVolumeSettingsOld7] 2
//   Vector 992 [hxVolumeSettingsOld8] 2
//   Vector 1000 [hxVolumeSettingsOld9] 2
//   Float 5152 [OrthoLight]
//   Float 5312 [hxNearPlane]
//   Vector 5328 [_SpotLightParams]
//   Float 5344 [hxRayOffset]
//   Vector 5348 [LightColour] 3
//   Vector 5360 [LightColour2] 3
//   Float 5372 [TintPercent]
//   Vector 5392 [_LightParams]
//   Vector 5408 [_CustomLightPosition]
//   Float 5424 [HxTileSize]
//   Float 5824 [VolumeScale]
//   Vector 5920 [TopFrustumNormal] 3
//   Vector 5936 [BottomFrustumNormal] 3
//   Vector 5952 [LeftFrustumNormal] 3
//   Vector 5968 [RightFrustumNormal] 3
//   Vector 5984 [UpFrustumOffset] 3
//   Vector 6000 [RightFrustumOffset] 3
//   Matrix 288 [hxVolumeMatrixOld0]
//   Matrix 352 [hxVolumeMatrixOld1]
//   Matrix 416 [hxVolumeMatrixOld2]
//   Matrix 480 [hxVolumeMatrixOld3]
//   Matrix 544 [hxVolumeMatrixOld4]
//   Matrix 608 [hxVolumeMatrixOld5]
//   Matrix 672 [hxVolumeMatrixOld6]
//   Matrix 736 [hxVolumeMatrixOld7]
//   Matrix 800 [hxVolumeMatrixOld8]
//   Matrix 864 [hxVolumeMatrixOld9]
//   Matrix 5184 [hxCameraToWorld]
//   Matrix 5440 [InverseProjectionMatrix]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 96 [_ScreenParams]
//   ConstBuffer "UnityPerDraw" 176
//   Matrix 64 [unity_WorldToObject]
//   SetTexture 0 [VolumetricDepth] 2D 1
//   SetTexture 1 [Tile5x5] 2D 0
//   SetTexture 2 [_FalloffTex] 2D 3
//   SetTexture 3 [_ShadowTex] 2D 2
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:46:12 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[376], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 9c0fec28ee954105-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s1, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
add r1.xy, -r1.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, r1.yyyy, cb0[341].xyzw
mad r1.xyzw, cb0[340].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[342].xyzw
add r1.xyzw, r1.xyzw, cb0[343].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, -r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb0[325].xyzx
mad r1.xyw, cb0[324].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb0[326].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb0[327].xyzx
add r1.xyz, r1.xyzx, -r17.xyzx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.w, r0.z
mul r1.xyz, r0.wwww, r1.xyzx
sqrt r0.z, r0.z
add r0.z, r0.z, l(-0.050000)
dp3 r0.w, cb0[333].xyzx, r1.xyzx
mad r2.xyz, cb0[333].xyzx, cb0[337].zzzz, cb0[338].xyzx
add r2.xyz, r2.xyzx, -r17.xyzx
dp3 r1.w, r2.xyzx, cb0[333].xyzx
dp3 r2.x, cb0[371].xyzx, r1.xyzx
add r2.yzw, cb0[338].xxyz, -r17.xxyz
add r3.xyz, r2.yzwy, -cb0[374].xyzx
dp3 r3.x, r3.xyzx, cb0[371].xyzx
dp3 r3.y, cb0[372].xyzx, r1.xyzx
add r4.xyz, r2.yzwy, -cb0[375].xyzx
dp3 r3.z, r4.xyzx, cb0[372].xyzx
dp3 r3.w, -cb0[333].xyzx, r1.xyzx
mad r4.xyz, cb0[333].xyzx, cb0[332].xxxx, cb0[338].xyzx
add r5.xyz, r4.xyzx, -r17.xyzx
dp3 r4.w, r5.xyzx, -cb0[333].xyzx
dp3 r5.w, cb0[370].xyzx, r1.xyzx
add r6.xyz, r2.yzwy, cb0[374].xyzx
dp3 r6.x, r6.xyzx, cb0[370].xyzx
dp3 r6.y, cb0[373].xyzx, r1.xyzx
add r2.yzw, r2.yyzw, cb0[375].xxyz
dp3 r2.y, r2.yzwy, cb0[373].xyzx
lt r2.z, l(0.000000), r3.w
div r2.w, r4.w, r3.w
min r7.z, r2.w, l(100000.000000)
lt r4.w, r3.w, l(0.000000)
max r6.z, r2.w, l(0.000000)
and r8.y, r4.w, r6.z
mov r7.y, l(0)
mov r8.z, l(100000.000000)
movc r7.yz, r2.zzzz, r7.yyzy, r8.yyzy
lt r2.z, l(0.000000), r5.w
div r4.w, r6.x, r5.w
min r7.w, r4.w, r7.z
lt r5.w, r5.w, l(0.000000)
max r4.w, r4.w, r7.y
movc r7.x, r5.w, r4.w, r7.y
movc r7.yz, r2.zzzz, r7.yywy, r7.xxzx
lt r2.z, l(0.000000), r6.y
div r2.y, r2.y, r6.y
min r7.w, r2.y, r7.z
lt r4.w, r6.y, l(0.000000)
max r2.y, r2.y, r7.y
movc r7.x, r4.w, r2.y, r7.y
movc r6.yz, r2.zzzz, r7.yywy, r7.xxzx
lt r2.y, l(0.000000), r0.w
div r1.w, r1.w, r0.w
min r6.w, r1.w, r6.z
lt r2.z, r0.w, l(0.000000)
max r1.w, r1.w, r6.y
movc r6.x, r2.z, r1.w, r6.y
movc r6.yz, r2.yyyy, r6.yywy, r6.xxzx
lt r1.w, l(0.000000), r2.x
div r2.y, r3.x, r2.x
min r6.w, r2.y, r6.z
lt r2.x, r2.x, l(0.000000)
max r2.y, r2.y, r6.y
movc r6.x, r2.x, r2.y, r6.y
movc r6.yz, r1.wwww, r6.yywy, r6.xxzx
lt r1.w, l(0.000000), r3.y
div r2.x, r3.z, r3.y
min r6.w, r2.x, r6.z
lt r2.y, r3.y, l(0.000000)
max r2.x, r2.x, r6.y
movc r6.x, r2.y, r2.x, r6.y
movc r2.xy, r1.wwww, r6.ywyy, r6.xzxx
min r0.z, r0.z, r2.y
ge r1.w, r2.x, r0.z
discard_nz r1.w
mad r2.xyz, r1.xyzx, r2.xxxx, r17.xyzx
mad r3.xyz, r1.xyzx, r0.zzzz, r17.xyzx
add r6.xyz, -r4.xyzx, r2.xyzx
dp3 r0.z, r6.xyzx, cb0[333].xyzx
add r4.xyz, -r4.xyzx, r3.xyzx
dp3 r1.w, r4.xyzx, cb0[333].xyzx
ge r4.x, l(0.000000), r0.z
ge r4.y, l(0.000000), r1.w
and r4.z, r4.y, r4.x
discard_nz r4.z
lt r0.z, l(0.000000), r0.z
and r0.z, r4.y, r0.z
lt r3.w, l(0.000001), r3.w
mad r4.yzw, r1.xxyz, r2.wwww, r17.xxyz
movc r4.yzw, r3.wwww, r4.yyzw, r3.xxyz
movc r3.xyz, r0.zzzz, r4.yzwy, r3.xyzx
lt r0.z, l(0.000000), r1.w
and r0.z, r0.z, r4.x
lt r1.w, l(0.000001), r0.w
dp3 r2.w, r5.xyzx, cb0[333].xyzx
div r0.w, r2.w, r0.w
mad r1.xyz, r1.xyzx, r0.wwww, r17.xyzx
movc r1.xyz, r1.wwww, r1.xyzx, r2.xyzx
movc r1.xyz, r0.zzzz, r1.xyzx, r2.xyzx
mul r0.zw, cb0[364].xxxx, cb1[6].xxxy
mul r0.xy, r0.xyxx, r0.zwzz
div r0.xy, r0.xyxx, cb0[339].xxxx
ge r0.zw, r0.xxxy, -r0.xxxy
frc r0.xy, |r0.xyxx|
movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[339].xxxx
add r2.xyz, r1.xyzx, -r17.xyzx
dp3 r0.z, r2.xyzx, r2.xyzx
sqrt r0.z, r0.z
add r2.xyz, -r1.xyzx, r3.xyzx
min r0.w, cb0[16].y, l(128.000000)
ftoi r1.w, r0.w
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r3.w, r2.w
mul r2.xyz, r2.xyzx, r3.wwww
sqrt r2.w, r2.w
round_z r0.w, r0.w
div r2.w, r2.w, r0.w
mul r4.xyz, r2.wwww, r2.xyzx
add r5.xyz, r1.xyzx, -cb0[338].xyzx
mul r6.xyz, r5.yyyy, cb2[5].xyzx
mad r5.xyw, cb2[4].xyxz, r5.xxxx, r6.xyxz
mad r5.xyz, cb2[6].xyzx, r5.zzzz, r5.xywx
add r3.xyz, r3.xyzx, -cb0[338].xyzx
mul r6.xyz, r3.yyyy, cb2[5].xyzx
mad r3.xyw, cb2[4].xyxz, r3.xxxx, r6.xyxz
mad r3.xyz, cb2[6].xyzx, r3.zzzz, r3.xywx
add r3.xyz, -r5.xyzx, r3.xyzx
dp3 r3.w, r3.xyzx, r3.xyzx
sqrt r4.w, r3.w
div r0.w, r4.w, r0.w
rsq r3.w, r3.w
mul r3.xyz, r3.wwww, r3.xyzx
mul r6.xyz, r0.wwww, r3.xyzx
div r0.xy, r0.xyxx, cb0[339].xxxx
sample_l r7.xyzw, r0.xyxx, t1.xyzw, s0, l(0.000000)
add r0.x, r7.x, cb0[334].x
frc r0.x, r0.x
mad r5.xyz, r6.xyzx, r0.xxxx, r5.xyzx
mad r1.xyz, r4.xyzx, r0.xxxx, r1.xyzx
mul r0.x, r0.z, cb0[16].x
mul r0.x, r0.x, cb0[16].w
mul r0.y, r2.w, cb0[16].w
add r0.z, -cb0[17].y, cb0[17].x
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r3.w, -cb0[17].z, l(1.000000)
mul r4.x, cb0[337].z, cb0[337].z
div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
add r4.yzw, cb0[334].yyzw, -cb0[335].xxyz
mov r6.z, l(0)
mov r7.xyz, l(0,0,0,0)
mov r8.xyz, r5.xyzx
mov r9.xyz, r1.xyzx
mov r5.w, r0.x
mov r6.w, l(0)
loop
  ige r7.w, r6.w, r1.w
  breakc_nz r7.w
  mul r7.w, r8.z, l(0.500000)
  div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
  mul r10.xy, r8.xyxx, r7.wwww
  mul r10.zw, r10.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
  mad r10.xy, r10.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  add r11.xyz, r9.xyzx, -cb0[338].xyzx
  add r7.w, r9.y, -cb0[17].y
  mul_sat r7.w, r0.z, r7.w
  mad r8.w, r7.w, l(-2.000000), l(3.000000)
  mul r7.w, r7.w, r7.w
  mul r7.w, r7.w, r8.w
  mad r7.w, r7.w, r3.w, cb0[17].z
  mul r7.w, r7.w, cb0[16].x
  mov r12.x, r7.w
  mov r12.yz, l(0,0,0,0)
  mov r8.w, l(0)
  loop
    ige r9.w, r12.z, l(10)
    mov r8.w, l(0)
    breakc_nz r9.w
    eq r9.w, l(-1.000000), cb0[r12.z + 58].y
    if_nz r9.w
      mov r12.xy, r12.xxxx
      mov r8.w, l(-1)
      break
    endif
    ishl r11.w, r12.z, l(2)
    mul r13.xyz, r9.yyyy, cb0[r11.w + 19].xyzx
    mad r13.xyz, cb0[r11.w + 18].xyzx, r9.xxxx, r13.xyzx
    mad r13.xyz, cb0[r11.w + 20].xyzx, r9.zzzz, r13.xyzx
    add r13.xyz, r13.xyzx, cb0[r11.w + 21].xyzx
    lt r14.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r13.xyzx
    lt r15.xyz, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    and r11.w, r14.x, r15.x
    and r11.w, r14.y, r11.w
    and r11.w, r15.y, r11.w
    and r11.w, r14.z, r11.w
    and r11.w, r15.z, r11.w
    if_nz r11.w
      ge r11.w, l(3.000000), cb0[r12.z + 58].y
      if_nz r11.w
        max r11.w, r12.x, cb0[r12.z + 58].x
        add r12.w, r12.x, cb0[r12.z + 58].x
        min r13.w, r12.x, cb0[r12.z + 58].x
        eq r14.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), cb0[r12.z + 58].yyyy
        add r15.x, r12.x, -cb0[r12.z + 58].x
        movc r14.w, r14.w, r15.x, r12.x
        movc r13.w, r14.z, r13.w, r14.w
        movc r12.w, r14.y, r12.w, r13.w
        movc r6.x, r14.x, r11.w, r12.w
      else
        ge r11.w, l(7.000000), cb0[r12.z + 58].y
        dp3 r12.w, r13.xyzx, r13.xyzx
        sqrt r12.w, r12.w
        lt r12.w, r12.w, l(0.500000)
        and r11.w, r11.w, r12.w
        if_nz r11.w
          max r11.w, r12.x, cb0[r12.z + 58].x
          add r12.w, r12.x, cb0[r12.z + 58].x
          min r13.y, r12.x, cb0[r12.z + 58].x
          eq r14.xyzw, l(4.000000, 5.000000, 6.000000, 7.000000), cb0[r12.z + 58].yyyy
          add r13.w, r12.x, -cb0[r12.z + 58].x
          movc r13.w, r14.w, r13.w, r12.x
          movc r13.y, r14.z, r13.y, r13.w
          movc r12.w, r14.y, r12.w, r13.y
          movc r6.x, r14.x, r11.w, r12.w
        else
          ge r11.w, l(11.000000), cb0[r12.z + 58].y
          dp2 r12.w, r13.xzxx, r13.xzxx
          sqrt r12.w, r12.w
          lt r12.w, r12.w, l(0.500000)
          and r11.w, r11.w, r12.w
          max r12.w, r12.x, cb0[r12.z + 58].x
          add r13.x, r12.x, cb0[r12.z + 58].x
          min r13.y, r12.x, cb0[r12.z + 58].x
          eq r14.xyzw, l(8.000000, 9.000000, 10.000000, 11.000000), cb0[r12.z + 58].yyyy
          add r13.z, r12.x, -cb0[r12.z + 58].x
          movc r13.z, r14.w, r13.z, r12.x
          movc r13.y, r14.z, r13.y, r13.z
          movc r13.x, r14.y, r13.x, r13.y
          movc r12.w, r14.x, r12.w, r13.x
          movc r6.x, r11.w, r12.w, r12.x
        endif
      endif
    else
      mov r6.x, r12.x
    endif
    iadd r6.y, r12.z, l(1)
    mov r12.xyz, r6.xzyx
    mov r8.w, r9.w
  endloop
  movc r6.x, r8.w, r12.y, r12.x
  dp3 r6.y, r11.xyzx, r11.xyzx
  rsq r7.w, r6.y
  mul r11.xyz, r7.wwww, r11.xyzx
  dp3 r7.w, r11.xyzx, -r2.xyzx
  mad r7.w, -cb0[14].w, r7.w, cb0[14].z
  log r7.w, r7.w
  mul r7.w, r7.w, l(1.500000)
  exp r7.w, r7.w
  div r7.w, cb0[14].y, r7.w
  mul r7.w, r7.w, cb0[14].x
  mul r9.w, r4.x, r6.y
  sample_l r11.xyzw, r9.wwww, t2.xyzw, s3, l(0.000000)
  add r11.xy, r8.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  add r11.xy, -r10.xyxx, r11.xyxx
  mad r10.xy, cb0[322].xxxx, r11.xyxx, r10.xyxx
  sample_l r13.xyzw, r10.xyxx, t3.xyzw, s2, l(0.000000)
  mul r9.w, r11.w, r13.w
  mad r6.y, -r6.y, r4.x, l(1.000000)
  dp2 r10.x, r10.zwzz, r10.zwzz
  sqrt r10.x, r10.x
  mad r10.x, -r10.x, l(2.000000), l(1.000000)
  min r6.y, r6.y, r10.x
  mul r6.y, r6.y, cb0[335].w
  mul_sat r6.y, r6.y, l(0.500000)
  mad r10.xyz, r6.yyyy, r4.yzwy, cb0[335].xyzx
  mul r10.xyz, r10.xyzx, r13.xyzx
  mul r6.y, r7.w, r9.w
  mul r7.w, r5.w, l(-1.442695)
  exp r7.w, r7.w
  mul r6.y, r6.y, r7.w
  mul r6.y, r6.x, r6.y
  mul r6.y, r2.w, r6.y
  max r6.y, r6.y, l(0.000000)
  mad r7.xyz, r10.xyzx, r6.yyyy, r7.xyzx
  mad r5.w, r0.y, r6.x, r5.w
  mad r8.xyz, r3.xyzx, r0.wwww, r8.xyzx
  mad r9.xyz, r2.xyzx, r2.wwww, r9.xyzx
  iadd r6.w, r6.w, l(1)
endloop
mov o0.xyz, r7.xyzx
mov o0.w, l(0)
ret
// Approximately 0 instruction slots used