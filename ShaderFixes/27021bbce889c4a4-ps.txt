// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 27021bbce889c4a4-ps.txt
// 3DMigoto: 27021bbce889c4a4 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 115 3 10
//   undeciphered1a: 16
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_SPHERE" "FOG_VOID_SPHERE" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT0" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 3 2 3 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 496
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 384 [_SunDir] 3
//   Vector 400 [_SunColor] 3
//   Vector 432 [_FogScatteringData2]
//   Float 448 [_Jitter]
//   Float 464 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:41:46 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 18
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r16.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 27021bbce889c4a4-ps.txt

mul r16.w, -r16.x, r16.y
mad r17.xyz, -r16.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
sample r2.xyzw, v1.zwzz, t1.xyzw, s2
mad r1.y, cb1[7].x, r2.x, cb1[7].y
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
min r1.x, r1.y, r1.x
add r2.z, -cb0[13].x, r17.z
mov r2.xy, r17.xyxx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.z, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.zwzz
and r3.x, r3.y, r3.x
lt r3.y, r2.z, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.z, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xywx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[19].xyzx
  div r4.xyz, r1.xyzx, r1.wwww
  dp3 r2.w, r4.xyzx, r3.xyzx
  dp3 r3.x, r3.xyzx, r3.xyzx
  add r3.x, r3.x, -cb0[20].y
  mad r3.x, r2.w, r2.w, -r3.x
  ge r3.y, r3.x, l(0.000000)
  sqrt r3.z, r3.x
  movc r3.x, r3.y, r3.z, r3.x
  add r3.y, -r2.w, -r3.x
  max r3.y, r3.y, l(0.000000)
  min r3.z, r1.w, cb0[12].z
  add r2.w, -r2.w, r3.x
  min r2.w, r3.z, r2.w
  add r2.w, -r3.y, r2.w
  ge r3.x, r2.w, l(0.000000)
  if_nz r3.x
    mad r2.xyz, r4.xyzx, r3.yyyy, r2.xyzx
    mul r5.xyz, r1.xyzx, r2.wwww
    div r5.xyz, r5.xyzx, r1.wwww
    add r5.xyz, r2.xyzx, r5.xyzx
    add r5.xyz, -r5.xyzx, cb0[17].xyzx
    dp3 r3.x, r5.xyzx, r5.xyzx
    sqrt r3.x, r3.x
    mad r3.x, r3.x, cb0[18].x, l(-1.000000)
    mad_sat r3.x, cb0[18].w, r3.x, l(1.000000)
    lt r3.w, l(0.000000), r3.x
    if_nz r3.w
      log r3.w, r2.w
      mul r3.w, r3.w, l(0.693147182)
      max r3.w, r3.w, l(0.000000)
      mad r3.w, r3.w, cb0[15].x, l(0.100000)
      mul r3.w, r3.w, cb0[13].z
      mul_sat r4.w, r3.z, cb0[15].y
      mul r3.w, r3.w, r4.w
      add r3.y, -r3.y, r3.z
      max r3.z, r3.w, l(0.010000)
      mul r1.xyz, r1.xyzx, r3.zzzz
      div r1.xyz, r1.xyzx, r1.wwww
      div r1.w, r2.w, r3.z
      add r5.xyz, r2.xyzx, -cb0[21].xyzx
      mul r6.xy, r1.xyxx, cb0[13].wwww
      mul r3.z, cb0[13].z, cb0[13].y
      div r6.z, r1.z, r3.z
      add r2.xy, r2.xyxx, cb0[14].xzxx
      mul r2.xy, r2.xyxx, cb0[13].wwww
      div r2.z, r2.z, r3.z
      add r3.zw, cb0[14].xxxy, cb0[19].xxxy
      add r7.xy, cb0[14].xyxx, r17.xyxx
      frc r4.w, cb0[29].x
      mad r1.w, r4.w, cb0[28].x, r1.w
      ge r2.w, r2.w, r3.y
      and r2.w, r2.w, l(0x3f800000)
      mov r8.xyzw, l(0,0,0,0)
      mov r9.xyz, r5.xyzx
      mov r3.y, r1.w
      mov r11.xyz, r2.xyzx
      mov r10.xyzw, l(0,0,0,0)
      loop
        ge r4.w, l(1.000000), r3.y
        breakc_nz r4.w
        mad r7.zw, r3.zzzw, cb0[13].wwww, -r11.xxxy
        mul r7.zw, r7.zzzw, cb0[20].xxxx
        dp2 r4.w, r7.zwzz, r7.zwzz
        sample_l r12.xyzw, r11.xyxx, t2.xyzw, s0, l(0.000000)
        mad r4.w, r4.w, cb0[20].w, |r11.z|
        add r4.w, -r4.w, r12.w
        mad r7.zw, r7.xxxy, cb0[13].wwww, -r11.xxxy
        dp2 r5.w, r7.zwzz, r7.zwzz
        add r5.w, -r5.w, cb0[12].x
        max r5.w, r5.w, l(0.000000)
        mad r4.w, -r5.w, cb0[12].y, r4.w
        lt r5.w, l(0.000000), r4.w
        if_nz r5.w
          add r5.w, -r4.w, l(1.000000)
          mul r13.xyz, r5.wwww, cb0[11].xyzx
          mul r14.w, r4.w, l(0.400000)
          dp3 r4.w, r9.xyzx, r9.xyzx
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mul r15.xyz, r4.wwww, cb0[22].xyzx
          mad r12.xyz, r15.xyzx, r14.wwww, r12.xyzx
          mul r12.xyz, r14.wwww, r12.xyzx
          mul r14.xyz, r12.xyzx, r13.xyzx
          add r4.w, -r10.w, l(1.000000)
          mad r12.xyzw, r14.xyzw, r4.wwww, r10.xyzw
          lt r4.w, l(0.990000), r12.w
          if_nz r4.w
            mov r8.xyzw, r14.xyzw
            mov r10.xyzw, r12.xyzw
            break
          endif
          mov r8.xyzw, r14.xyzw
          mov r10.xyzw, r12.xyzw
        endif
        add r9.xyz, r1.xyzx, r9.xyzx
        add r3.y, r3.y, l(-1.000000)
        add r11.xyz, r6.xyzx, r11.xyzx
      endloop
      lt r1.x, r10.w, l(0.990000)
      and r1.x, r1.x, l(0x3f800000)
      add r1.y, -r10.w, l(1.000000)
      mul r1.z, r2.w, r3.y
      mul r1.x, r1.y, r1.x
      mul r1.x, r1.z, r1.x
      mad r1.xyzw, r8.xyzw, r1.xxxx, r10.xyzw
      dp3 r2.x, r4.xyzx, cb0[24].xyzx
      mul r2.x, r2.x, cb0[27].w
      max r2.x, r2.x, l(0.000000)
      mul r2.x, r2.x, r2.x
      mul r2.x, r2.x, r2.x
      mul r2.x, r2.x, r2.x
      mul r2.x, r1.w, r2.x
      add r2.yzw, -r1.xxyz, cb0[25].xxyz
      mad r1.xyz, r2.xxxx, r2.yzwy, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul o0.xyzw, r3.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used