// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 0a04ed0ddc1b855c-ps.txt
// 3DMigoto: 0a04ed0ddc1b855c |    Unity headers extracted from Standard (Specular setup)
//    Shader "Standard (Specular setup)" {
//      CustomEditor "StandardShaderGUI"
//      Fallback "VertexLit"
//      SubShader 1/2 {
//        LOD 300
//        Tags { "PerformanceChecks"="False" "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDBASE" "PerformanceChecks"="False" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          ZWrite [_ZWrite]
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Standard (Specular setup):
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 135 7 4
//   undeciphered1a: 9
//   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTPROBE_SH" "FOG_LINEAR" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" }
//   undeciphered2: 1 4 9 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 176
//   Vector 32 [_LightColor0]
//   Vector 48 [_SpecColor]
//   Vector 64 [_Color]
//   Float 140 [_Glossiness]
//   Float 148 [_OcclusionStrength]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityShadows" 416
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   ConstBuffer "UnityPerFrame" 368
//   Vector 64 [unity_IndirectSpecColor]
//   Matrix 144 [unity_MatrixV]
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   ConstBuffer "UnityDrawCallInfo" 16
//   ScalarInt 0 [unity_BaseInstanceID]
//   ConstBuffer "UnityInstancing_PerDraw2" 224
//   Struct 0 [unity_Builtins2Array] 2 112
//   Vector 0 [unity_SHArArray]
//   Vector 16 [unity_SHAgArray]
//   Vector 32 [unity_SHAbArray]
//   Vector 48 [unity_SHBrArray]
//   Vector 64 [unity_SHBgArray]
//   Vector 80 [unity_SHBbArray]
//   Vector 96 [unity_SHCArray]
//   SetTexture 0 [_MainTex] 2D 1
//   SetTexture 1 [_ShadowMapTexture] 2D 3
//   SetTexture 2 [_OcclusionMap] 2D 2
//   SetTexture 3 [unity_ProbeVolumeSH] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityShadows" 3
//   BindCB "UnityPerFrame" 4
//   BindCB "UnityFog" 5
//   BindCB "UnityProbeVolume" 6
//   BindCB "UnityDrawCallInfo" 7
//   BindCB "UnityInstancing_PerDraw2" 8
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:28:11 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float      w
// TEXCOORD                 3   xyzw        4     NONE   float      w
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyz
// TEXCOORD                 7   xyzw        7     NONE   float   xy w
// SV_InstanceID            0   x           8     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[26], immediateIndexed
dcl_constantbuffer cb4[12], immediateIndexed
dcl_constantbuffer cb5[2], immediateIndexed
dcl_constantbuffer cb6[7], immediateIndexed
dcl_constantbuffer cb7[1], immediateIndexed
dcl_constantbuffer cb8[14], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture3d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.w
dcl_input_ps linear v4.w
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyw
dcl_input_ps constant v8.x
dcl_output o0.xyzw
dcl_temps 11
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r9.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 0a04ed0ddc1b855c-ps.txt

mul r9.w, -r9.x, r9.y
mad r10.xyz, -r9.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.xyxx, t0.xyzw, s1
mul r0.xyz, r0.xyzx, cb0[4].xyzx
max r0.w, cb0[3].y, cb0[3].x
max r0.w, r0.w, cb0[3].z
add r0.w, -r0.w, l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r1.x, v5.xyzx, v5.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v5.xyzx
dp3 r2.x, v2.xyzx, v2.xyzx
rsq r2.x, r2.x
mul r2.yzw, r2.xxxx, v2.xxyz
iadd r3.x, v8.x, cb7[0].x
mov r3.y, v3.w
mov r3.z, v4.w
mov r3.w, v5.w
add r4.xyz, -r3.yzwy, r10.xyzx
mov r5.x, cb4[9].z
mov r5.y, cb4[10].z
mov r5.z, cb4[11].z
dp3 r4.x, r4.xyzx, r5.xyzx
add r4.yzw, r3.yyzw, -cb3[25].xxyz
dp3 r4.y, r4.yzwy, r4.yzwy
sqrt r4.y, r4.y
add r4.y, -r4.x, r4.y
mad r4.x, cb3[25].w, r4.y, r4.x
mad_sat r4.x, r4.x, cb3[24].z, cb3[24].w
imul null, r3.x, r3.x, l(7)
eq r4.y, cb6[0].x, l(1.000000)
if_nz r4.y
  eq r4.z, cb6[0].y, l(1.000000)
  mul r5.xyz, v4.wwww, cb6[2].xyzx
  mad r5.xyz, cb6[1].xyzx, v3.wwww, r5.xyzx
  mad r5.xyz, cb6[3].xyzx, v5.wwww, r5.xyzx
  add r5.xyz, r5.xyzx, cb6[4].xyzx
  movc r5.xyz, r4.zzzz, r5.xyzx, r3.yzwy
  add r5.xyz, r5.xyzx, -cb6[6].xyzx
  mul r5.yzw, r5.xxyz, cb6[5].xxyz
  mad r4.z, r5.y, l(0.250000), l(0.750000)
  mad r4.w, cb6[0].z, l(0.500000), l(0.750000)
  max r5.x, r4.w, r4.z
  sample r5.xyzw, r5.xzwx, t3.xyzw, s0
else
  mov r5.xyzw, cb8[r3.x + 6].wwww
endif
dp4_sat r4.z, r5.xyzw, cb2[46].xyzw
div r5.xy, v7.xyxx, v7.wwww
sample r5.xyzw, r5.xyxx, t1.xyzw, s3
add r4.z, r4.z, -r5.x
mad r4.x, r4.x, r4.z, r5.x
sample r5.xyzw, v1.xyxx, t2.xyzw, s2
add r4.z, -cb0[9].y, l(1.000000)
mad r4.z, r5.y, cb0[9].y, r4.z
mul r5.xyz, r4.xxxx, cb0[2].xyzx
if_nz r4.y
  eq r4.x, cb6[0].y, l(1.000000)
  mul r6.xyz, v4.wwww, cb6[2].xyzx
  mad r6.xyz, cb6[1].xyzx, v3.wwww, r6.xyzx
  mad r6.xyz, cb6[3].xyzx, v5.wwww, r6.xyzx
  add r6.xyz, r6.xyzx, cb6[4].xyzx
  movc r3.yzw, r4.xxxx, r6.xxyz, r3.yyzw
  add r3.yzw, r3.yyzw, -cb6[6].xxyz
  mul r6.yzw, r3.yyzw, cb6[5].xxyz
  mul r3.y, r6.y, l(0.250000)
  mul r3.z, cb6[0].z, l(0.500000)
  mad r3.w, -cb6[0].z, l(0.500000), l(0.250000)
  max r3.y, r3.z, r3.y
  min r6.x, r3.w, r3.y
  sample r7.xyzw, r6.xzwx, t3.xyzw, s0
  add r3.yzw, r6.xxzw, l(0.000000, 0.250000, 0.000000, 0.000000)
  sample r8.xyzw, r3.yzwy, t3.xyzw, s0
  add r3.yzw, r6.xxzw, l(0.000000, 0.500000, 0.000000, 0.000000)
  sample r6.xyzw, r3.yzwy, t3.xyzw, s0
  mov r1.w, l(1.000000)
  dp4 r7.x, r7.xyzw, r1.xyzw
  dp4 r7.y, r8.xyzw, r1.xyzw
  dp4 r7.z, r6.xyzw, r1.xyzw
else
  mov r1.w, l(1.000000)
  dp4 r7.x, cb8[r3.x + 0].xyzw, r1.xyzw
  dp4 r7.y, cb8[r3.x + 1].xyzw, r1.xyzw
  dp4 r7.z, cb8[r3.x + 2].xyzw, r1.xyzw
endif
add r3.xyz, r7.xyzx, v6.xyzx
max r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r4.xyw, r4.zzzz, cb4[4].xyxz
add r1.w, -cb0[8].w, l(1.000000)
mad r6.xyz, -v2.xyzx, r2.xxxx, cb2[0].xyzx
dp3 r2.x, r6.xyzx, r6.xyzx
max r2.x, r2.x, l(0.001000)
rsq r2.x, r2.x
mul r6.xyz, r2.xxxx, r6.xyzx
dp3 r2.x, r1.xyzx, -r2.yzwy
dp3_sat r2.y, r1.xyzx, cb2[0].xyzx
dp3_sat r1.x, r1.xyzx, r6.xyzx
dp3_sat r1.y, cb2[0].xyzx, r6.xyzx
mul r1.z, r1.y, r1.y
dp2 r1.z, r1.zzzz, r1.wwww
add r1.z, r1.z, l(-0.500000)
add r2.z, -r2.y, l(1.000000)
mul r2.w, r2.z, r2.z
mul r2.w, r2.w, r2.w
mul r2.z, r2.z, r2.w
mad r2.z, r1.z, r2.z, l(1.000000)
add r2.w, -|r2.x|, l(1.000000)
mul r3.w, r2.w, r2.w
mul r3.w, r3.w, r3.w
mul r2.w, r2.w, r3.w
mad r1.z, r1.z, r2.w, l(1.000000)
mul r1.z, r1.z, r2.z
mul r1.w, r1.w, r1.w
max r1.w, r1.w, l(0.002000)
add r2.z, -r1.w, l(1.000000)
mad r3.w, |r2.x|, r2.z, r1.w
mad r2.z, r2.y, r2.z, r1.w
mul r2.x, r2.z, |r2.x|
mad r2.x, r2.y, r3.w, r2.x
add r2.x, r2.x, l(0.000010)
div r2.x, l(0.500000), r2.x
mul r2.z, r1.w, r1.w
mad r3.w, r1.x, r2.z, -r1.x
mad r1.x, r3.w, r1.x, l(1.000000)
mul r2.z, r2.z, l(0.318309873)
mad r1.x, r1.x, r1.x, l(1.000000012E-007)
div r1.x, r2.z, r1.x
mul r1.x, r1.x, r2.x
mul r1.x, r1.x, l(3.14159274)
mul r1.xz, r2.yyyy, r1.xxzx
max r1.x, r1.x, l(0.000000)
mad r1.w, r1.w, r1.w, l(1.000000)
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
dp3 r2.x, cb0[3].xyzx, cb0[3].xyzx
ne r2.x, r2.x, l(0.000000)
and r2.x, r2.x, l(0x3f800000)
mul r1.x, r1.x, r2.x
add r0.w, -r0.w, l(1.000000)
add_sat r0.w, r0.w, cb0[8].w
mul r2.xyz, r1.zzzz, r5.xyzx
mad r2.xyz, r3.xyzx, r4.zzzz, r2.xyzx
mul r3.xyz, r5.xyzx, r1.xxxx
add r1.x, -r1.y, l(1.000000)
mul r1.y, r1.x, r1.x
mul r1.y, r1.y, r1.y
mul r1.x, r1.x, r1.y
add r5.xyz, -cb0[3].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r1.xyz, r5.xyzx, r1.xxxx, cb0[3].xyzx
mul r1.xyz, r1.xyzx, r3.xyzx
mad r0.xyz, r0.xyzx, r2.xyzx, r1.xyzx
mul r1.xyz, r4.xywx, r1.wwww
add r2.xyz, r0.wwww, -cb0[3].xyzx
mad r2.xyz, r2.wwww, r2.xyzx, cb0[3].xyzx
mad r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
div r0.w, v2.w, cb1[5].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, cb1[5].z
max r0.w, r0.w, l(0.000000)
mad_sat r0.w, r0.w, cb5[1].z, cb5[1].w
add r0.xyz, r0.xyzx, -cb5[0].xyzx
mad o0.xyz, r0.wwww, r0.xyzx, cb5[0].xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used