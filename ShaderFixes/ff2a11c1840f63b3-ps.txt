// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ff2a11c1840f63b3-ps.txt
// 3DMigoto: ff2a11c1840f63b3 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 172 3 12
//   undeciphered1a: 18
//   Keywords { "FOG_DISTANCE_ON" "FOG_VOID_SPHERE" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT0" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 576
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 352 [_SunDir] 3
//   Vector 368 [_SunColor] 3
//   Vector 400 [_FogScatteringData2]
//   Vector 496 [_VolumetricFogSunWorldPos]
//   Vector 512 [_VolumetricFogSunShadowsData]
//   Float 528 [_Jitter]
//   Matrix 432 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:35:25 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[34], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 20
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r18.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed ff2a11c1840f63b3-ps.txt

mul r18.w, -r18.x, r18.y
mad r19.xyz, -r18.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
sample r2.xyzw, v1.zwzz, t1.xyzw, s2
mad r1.y, cb1[7].x, r2.x, cb1[7].y
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
min r1.x, r1.y, r1.x
mov r1.yz, -cb0[13].xxyx
add r2.z, r1.y, r19.z
mov r2.xy, r19.xyxx
mad r3.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r1.x, r3.z, l(0.000010)
lt r1.y, cb0[13].y, r2.z
lt r1.w, cb0[13].y, r1.x
and r1.y, r1.w, r1.y
lt r1.w, r2.z, r1.z
lt r2.w, r1.x, r1.z
and r1.w, r1.w, r2.w
or r1.y, r1.w, r1.y
if_z r1.y
  add r3.w, r3.z, l(0.000010)
  add r3.xyz, -r2.xyzx, r3.xywx
  dp3 r1.y, r3.xyzx, r3.xyzx
  dp2 r1.w, r3.xyxx, r3.xyxx
  sqrt r1.yw, r1.yyyw
  div r4.xy, r3.xyxx, r1.wwww
  div r1.w, r1.w, r3.z
  max r2.w, r1.z, r2.z
  min r5.z, r2.w, cb0[13].y
  add r2.w, r2.z, -r5.z
  mul r2.w, r1.w, r2.w
  mad r5.xy, -r4.xyxx, r2.wwww, r19.xyxx
  min r2.w, r1.y, cb0[12].z
  add r6.xyz, -r2.xyzx, r5.xyzx
  dp3 r2.x, r6.xyzx, r6.xyzx
  sqrt r2.x, r2.x
  lt r2.y, r2.x, r2.w
  if_nz r2.y
    lt r2.y, l(0.000000), r1.w
    lt r3.w, l(-0.500000), r1.x
    and r2.y, r2.y, r3.w
    lt r3.w, r1.w, l(0.000000)
    lt r1.x, r1.x, l(0.500000)
    and r1.x, r1.x, r3.w
    and r1.x, r1.z, r1.x
    movc r6.z, r2.y, cb0[13].y, r1.x
    add r1.x, -r2.z, r6.z
    mul r1.x, r1.x, r1.w
    mad r6.xy, -r4.xyxx, r1.xxxx, r19.xyxx
    add r1.xzw, r5.xxyz, -r6.xxyz
    dp3 r1.x, r1.xzwx, r1.xzwx
    sqrt r1.x, r1.x
    add r1.z, -r2.x, r2.w
    min r1.x, r1.z, r1.x
    lt r1.w, l(0.000000), r1.x
    if_nz r1.w
      mul r4.xyz, r3.xyzx, r1.xxxx
      div r4.xyz, r4.xyzx, r1.yyyy
      add r4.xyz, r4.xyzx, r5.xyzx
      add r4.xyz, -r4.xyzx, cb0[17].xyzx
      dp3 r1.w, r4.xyzx, r4.xyzx
      sqrt r1.w, r1.w
      mad r1.w, r1.w, cb0[18].x, l(-1.000000)
      mad_sat r1.w, cb0[18].w, r1.w, l(1.000000)
      lt r2.y, l(0.000000), r1.w
      if_nz r2.y
        mul r2.yz, v1.xxyx, cb1[6].xxyx
        dp2 r2.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.yzyy
        frc r2.y, r2.y
        add r2.y, r2.y, l(-0.500000)
        log r2.z, r1.x
        mul r2.z, r2.z, l(0.693147182)
        max r2.z, r2.z, l(0.000000)
        mad r2.z, r2.z, cb0[15].x, l(0.100000)
        mul r2.z, r2.z, cb0[13].z
        mul_sat r2.w, r2.w, cb0[15].y
        mul r2.z, r2.w, r2.z
        max r2.z, r2.z, l(0.010000)
        mul r4.xyz, r2.zzzz, r3.xyzx
        div r4.xyz, r4.xyzx, r1.yyyy
        div r2.z, r1.x, r2.z
        add r6.xyz, r5.xyzx, -cb0[19].xyzx
        mul r7.xy, r4.xyxx, cb0[13].wwww
        mul r2.w, cb0[13].z, cb0[13].y
        div r7.z, r4.z, r2.w
        add r8.xy, r5.xyxx, cb0[14].xzxx
        mul r8.xy, r8.xyxx, cb0[13].wwww
        div r2.w, r5.z, r2.w
        add r8.zw, cb0[14].xxxy, r19.xxxy
        frc r3.w, r2.y
        mad r2.z, r3.w, cb0[33].x, r2.z
        add r5.w, r5.z, cb0[13].x
        mul r9.xyz, r5.yyyy, cb0[28].xywx
        mad r9.xyz, cb0[27].xywx, r5.xxxx, r9.xyzx
        mad r9.xyz, cb0[29].xywx, r5.wwww, r9.xyzx
        add r9.xyz, r9.xyzx, cb0[30].xywx
        div r9.xy, r9.xyxx, r9.zzzz
        mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        mad r2.y, r2.y, cb0[32].y, l(1.000000)
        mul r2.y, r1.x, r2.y
        mul r10.xyz, r3.xyzx, r2.yyyy
        div r10.xyz, r10.xyzx, r1.yyyy
        add r10.xyz, r5.xywx, r10.xyzx
        mul r11.xyz, r10.yyyy, cb0[28].xywx
        mad r11.xyz, cb0[27].xywx, r10.xxxx, r11.xyzx
        mad r11.xyz, cb0[29].xywx, r10.zzzz, r11.xyzx
        add r11.xyz, r11.xyzx, cb0[30].xywx
        div r9.zw, r11.xxxy, r11.zzzz
        mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r2.y, -r2.x, cb0[31].w
        mul_sat r2.y, r2.y, l(0.0285714287)
        mul r2.y, r2.y, cb0[32].x
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
        ge r1.x, r1.x, r1.z
        and r1.x, r1.x, l(0x3f800000)
        add r9.xy, -r9.zwzz, r9.xyxx
        add r5.xyz, r5.xywx, -r10.xyzx
        mov r11.xyzw, l(0,0,0,0)
        mov r12.xyz, r6.xyzx
        mov r14.xy, r8.xyxx
        mov r1.z, r2.z
        mov r14.z, r2.w
        mov r13.xyzw, l(0,0,0,0)
        loop
          ge r4.w, l(1.000000), r1.z
          breakc_nz r4.w
          sample_l r15.xyzw, r14.xyxx, t2.xyzw, s0, l(0.000000)
          add r4.w, -|r14.z|, r15.w
          mad r16.xy, r8.zwzz, cb0[13].wwww, -r14.xyxx
          dp2 r5.w, r16.xyxx, r16.xyxx
          add r5.w, -r5.w, cb0[12].x
          max r5.w, r5.w, l(0.000000)
          mad r4.w, -r5.w, cb0[12].y, r4.w
          lt r5.w, l(0.000000), r4.w
          if_nz r5.w
            add r5.w, -r4.w, l(1.000000)
            mul r16.xyz, r5.wwww, cb0[11].xyzx
            mul r16.w, r4.w, l(0.400000)
            mul r4.w, r3.w, r1.z
            mad r17.xy, r4.wwww, r9.xyxx, r9.zwzz
            sample_l r17.xyzw, r17.xyxx, t3.xyzw, s3, l(0.000000)
            dp4 r5.w, r17.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            mad r17.xyz, r4.wwww, r5.xyzx, r10.xyzx
            add r17.xyz, r17.xyzx, -cb0[31].xyzx
            dp3 r4.w, r17.xyzx, r17.xyzx
            sqrt r4.w, r4.w
            add_sat r4.w, -r4.w, r5.w
            mul r5.w, r2.y, r13.w
            add r4.w, r4.w, l(-1.000000)
            mad r5.w, r5.w, r4.w, l(1.000000)
            mad r4.w, cb0[32].z, r4.w, l(1.000000)
            mul r16.xyzw, r4.wwww, r16.xyzw
            dp3 r4.w, r12.xyzx, r12.xyzx
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            mul r17.xyz, r4.wwww, cb0[20].xyzx
            mul r17.xyz, r16.wwww, r17.xyzx
            mad r15.xyz, r15.xyzx, r5.wwww, r17.xyzx
            mul r15.xyz, r16.wwww, r15.xyzx
            mul r16.xyz, r15.xyzx, r16.xyzx
            add r4.w, -r13.w, l(1.000000)
            mad r15.xyzw, r16.xyzw, r4.wwww, r13.xyzw
            lt r4.w, l(0.990000), r15.w
            if_nz r4.w
              mov r11.xyzw, r16.xyzw
              mov r13.xyzw, r15.xyzw
              break
            endif
            mov r11.xyzw, r16.xyzw
            mov r13.xyzw, r15.xyzw
          endif
          add r12.xyz, r4.xyzx, r12.xyzx
          add r1.z, r1.z, l(-1.000000)
          add r14.xyz, r7.xyzx, r14.xyzx
        endloop
        lt r2.y, r13.w, l(0.990000)
        and r2.y, r2.y, l(0x3f800000)
        add r2.z, -r13.w, l(1.000000)
        mul r1.x, r1.z, r1.x
        mul r1.z, r2.z, r2.y
        mul r1.x, r1.x, r1.z
        mad r4.xyzw, r11.xyzw, r1.xxxx, r13.xyzw
        div r1.xyz, r3.xyzx, r1.yyyy
        dp3 r1.x, r1.xyzx, cb0[22].xyzx
        mul r1.x, r1.x, cb0[25].w
        max r1.x, r1.x, l(0.000000)
        mul r1.x, r1.x, r1.x
        mul r1.x, r1.x, r1.x
        mul r1.x, r1.x, r1.x
        mul r1.x, r4.w, r1.x
        add r2.yzw, -r4.xxyz, cb0[23].xxyz
        mad r4.xyz, r1.xxxx, r2.yzwy, r4.xyzx
        mul r3.xyzw, r4.xyzw, cb0[10].wwww
        add r1.x, -r2.x, cb0[12].z
        div_sat r1.x, r1.x, cb0[12].w
        mul r1.x, r1.x, r1.x
        mul r2.xyzw, r1.xxxx, r3.xyzw
        mul o0.xyzw, r1.wwww, r2.xyzw
      else
        mov o0.xyzw, l(0,0,0,0)
      endif
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used