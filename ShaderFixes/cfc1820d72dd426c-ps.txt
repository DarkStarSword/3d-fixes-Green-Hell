// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed cfc1820d72dd426c-ps.txt
// 3DMigoto: cfc1820d72dd426c |    Unity headers extracted from AVP_POM
//    Shader "AVP/POM" {
//      CustomEditor "ASEMaterialInspector"
//      Fallback "Diffuse"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Geometry+0" "RenderType"="Opaque" }
//        Pass 2/4 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="FORWARDADD" "QUEUE"="Geometry+0" "RenderType"="Opaque" "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from AVP_POM:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 131 1 4
//   undeciphered1a: 12
//   Keywords { "DIRECTIONAL" }
//   undeciphered2: 1 5 4 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 176
//   Vector 32 [_LightColor0]
//   Float 64 [_NormalScale]
//   Vector 80 [_Albedo_ST]
//   Float 96 [_Scale]
//   Float 100 [_RefPlane]
//   Float 104 [_CurvFix]
//   Float 108 [_CurvatureU]
//   Float 112 [_CurvatureV]
//   Float 144 [_Metallic_Power]
//   Float 148 [_SmoothnessPower]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityLighting" 768
//   Vector 0 [_WorldSpaceLightPos0]
//   Vector 736 [unity_OcclusionMaskSelector]
//   ConstBuffer "UnityProbeVolume" 112
//   Vector 0 [unity_ProbeVolumeParams]
//   Vector 80 [unity_ProbeVolumeSizeInv] 3
//   Vector 96 [unity_ProbeVolumeMin] 3
//   Matrix 16 [unity_ProbeVolumeWorldToObject]
//   SetTexture 0 [_HeightMap] 2D 3
//   SetTexture 1 [_Normal] 2D 1
//   SetTexture 2 [_Albedo] 2D 2
//   SetTexture 3 [_Metallic] 2D 4
//   SetTexture 4 [unity_ProbeVolumeSH] 3D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityLighting" 2
//   BindCB "UnityProbeVolume" 3
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:13:11 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyz         3     NONE   float   xyz
// TEXCOORD                 3   xyz         4     NONE   float   xyz
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyzw        6     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[47], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture3d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 14
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r12.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed cfc1820d72dd426c-ps.txt

mul r12.w, -r12.x, r12.y
mad r13.xyz, -r12.wwww, cb10[0].xyzw, cb1[4].xyzw

add r0.xyz, -v5.xyzx, r13.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r0.xyzx
mul r2.xyz, r1.yyyy, v3.xyzx
mad r2.xyz, v2.xyzx, r1.xxxx, r2.xyzx
mad r2.xyz, v4.xyzx, r1.zzzz, r2.xyzx
mad r3.xy, v1.xyxx, cb0[5].xyxx, cb0[5].zwzz
deriv_rtx r3.zw, r3.xxxy
deriv_rty r4.xy, r3.xyxx
div r2.xy, r2.xyxx, r2.zzzz
mul r2.xy, r2.xyxx, cb0[6].xxxx
mad r2.zw, cb0[6].yyyy, r2.xxxy, r3.xxxy
mul r3.xy, r2.xyxx, l(-0.00781250000, -0.00781250000, 0.000000, 0.000000)
add r1.w, cb0[6].z, l(1.000000)
mov r5.x, cb0[6].w
mov r5.y, cb0[7].x
mov r6.x, l(129)
mov r4.zw, l(0,0,0,0)
mov r5.zw, r3.xxxy
mov r7.x, l(0)
mov r8.xyzw, l(0,1.000000,0,0.992187500)
mov r9.x, l(0)
loop
  ige r7.y, r8.x, l(129)
  breakc_nz r7.y
  mul r7.yz, r5.zzwz, r5.zzwz
  dp2 r7.x, r5.xyxx, r7.yzyy
  add r7.yz, r2.zzwz, r5.zzwz
  sample_d r10.xyzw, r7.yzyy, t0.xyzw, s3, r3.zwzz, r4.xyxx
  add r7.y, -r7.x, l(1.000000)
  mul r9.x, r7.y, r10.x
  lt r7.z, r8.w, r9.x
  iadd r9.y, r8.x, l(1)
  mad r10.xy, r2.xyxx, l(-0.00781250000, -0.00781250000, 0.000000, 0.000000), r5.zwzz
  mul r7.y, r1.w, r7.y
  mad r9.w, -r7.y, l(0.00781250000), r8.w
  movc r4.zw, r7.zzzz, r4.zzzw, r5.zzzw
  movc r5.zw, r7.zzzz, r5.zzzw, r10.xxxy
  mov r6.yzw, r8.yyzw
  mov r9.z, r6.w
  movc r8.xyzw, r7.zzzz, r6.xyzw, r9.yzxw
endloop
mov r2.xy, r3.xyxx
mov r5.xy, r4.zwzz
mov r5.zw, l(0,0,0,0)
mov r1.w, l(0.00781250000)
mov r6.xyz, r8.yzwy
mov r6.w, r9.x
mov r7.y, l(0)
loop
  ige r7.z, r7.y, l(10)
  breakc_nz r7.z
  add r7.zw, -r6.xxxw, r6.yyyy
  add r7.w, r6.z, r7.w
  add r7.w, -r6.x, r7.w
  div r7.z, r7.z, r7.w
  mul r9.yz, r2.xxyx, r7.zzzz
  mad r5.zw, r7.zzzz, r2.xxxy, r5.xxxy
  mul r7.w, r1.w, r7.z
  mad r10.z, -r7.z, r1.w, r6.x
  add r11.xy, r2.zwzz, r5.zwzz
  sample_d r11.xyzw, r11.xyxx, t0.xyzw, s3, r3.zwzz, r4.xyxx
  lt r8.x, r10.z, r11.x
  add r7.z, -r7.z, l(1.000000)
  mul r11.yz, r2.xxyx, r7.zzzz
  mul r7.z, r1.w, r7.z
  movc r2.xy, r8.xxxx, r9.yzyy, r11.yzyy
  movc r5.xy, r8.xxxx, r5.xyxx, r5.zwzz
  movc r1.w, r8.x, r7.w, r7.z
  mov r10.xy, r6.xyxx
  mov r10.w, r11.x
  mov r6.xy, r10.zwzz
  movc r6.xyzw, r8.xxxx, r10.xyzw, r6.xyzw
  iadd r7.y, r7.y, l(1)
endloop
lt r1.w, l(1.000000), r7.x
discard_nz r1.w
add r2.xy, r2.zwzz, r5.zwzz
sample_d r5.xyzw, r2.xyxx, t1.xyzw, s1, r3.zwzz, r4.xyxx
mul r5.x, r5.w, r5.x
mad r2.zw, r5.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r5.xy, r2.zwzz, cb0[4].xxxx
dp2 r1.w, r5.xyxx, r5.xyxx
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
sqrt r5.z, r1.w
sample_d r6.xyzw, r2.xyxx, t2.xyzw, s2, r3.zwzz, r4.xyxx
sample_d r2.xyzw, r2.xyxx, t3.xyzw, s4, r3.zwzz, r4.xyxx
mul r1.w, r2.x, cb0[9].x
eq r2.x, cb3[0].x, l(1.000000)
if_nz r2.x
  eq r2.x, cb3[0].y, l(1.000000)
  mul r3.xyz, v5.yyyy, cb3[2].xyzx
  mad r3.xyz, cb3[1].xyzx, v5.xxxx, r3.xyzx
  mad r3.xyz, cb3[3].xyzx, v5.zzzz, r3.xyzx
  add r3.xyz, r3.xyzx, cb3[4].xyzx
  movc r2.xyz, r2.xxxx, r3.xyzx, v5.xyzx
  add r2.xyz, r2.xyzx, -cb3[6].xyzx
  mul r3.yzw, r2.xxyz, cb3[5].xxyz
  mad r2.x, r3.y, l(0.250000), l(0.750000)
  mad r2.y, cb3[0].z, l(0.500000), l(0.750000)
  max r3.x, r2.y, r2.x
  sample r3.xyzw, r3.xzwx, t4.xyzw, s0
else
  mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)
endif
dp4_sat r2.x, r3.xyzw, cb2[46].xyzw
dp3 r3.x, v2.xyzx, r5.xyzx
dp3 r3.y, v3.xyzx, r5.xyzx
dp3 r3.z, v4.xyzx, r5.xyzx
dp3 r2.y, r3.xyzx, r3.xyzx
rsq r2.y, r2.y
mul r3.xyz, r2.yyyy, r3.xyzx
mul r2.xyz, r2.xxxx, cb0[2].xyzx
add r4.xyz, r6.xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
mad r4.xyz, r1.wwww, r4.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
mad r1.w, -r1.w, l(0.960000), l(0.960000)
mul r5.xyz, r1.wwww, r6.xyzx
mad r1.w, -r2.w, cb0[9].y, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, cb2[0].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
max r0.w, r0.w, l(0.001000)
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r3.xyzx, r1.xyzx
dp3_sat r1.x, r3.xyzx, cb2[0].xyzx
dp3_sat r1.y, r3.xyzx, r0.xyzx
dp3_sat r0.x, cb2[0].xyzx, r0.xyzx
mul r0.y, r0.x, r0.x
dp2 r0.y, r0.yyyy, r1.wwww
add r0.y, r0.y, l(-0.500000)
add r0.z, -r1.x, l(1.000000)
mul r1.z, r0.z, r0.z
mul r1.z, r1.z, r1.z
mul r0.z, r0.z, r1.z
mad r0.z, r0.y, r0.z, l(1.000000)
add r1.z, -|r0.w|, l(1.000000)
mul r2.w, r1.z, r1.z
mul r2.w, r2.w, r2.w
mul r1.z, r1.z, r2.w
mad r0.y, r0.y, r1.z, l(1.000000)
mul r0.y, r0.y, r0.z
mul r0.z, r1.w, r1.w
max r0.z, r0.z, l(0.002000)
add r1.z, -r0.z, l(1.000000)
mad r1.w, |r0.w|, r1.z, r0.z
mad r1.z, r1.x, r1.z, r0.z
mul r0.w, |r0.w|, r1.z
mad r0.w, r1.x, r1.w, r0.w
add r0.w, r0.w, l(0.000010)
div r0.w, l(0.500000), r0.w
mul r0.z, r0.z, r0.z
mad r1.z, r1.y, r0.z, -r1.y
mad r1.y, r1.z, r1.y, l(1.000000)
mul r0.z, r0.z, l(0.318309873)
mad r1.y, r1.y, r1.y, l(1.000000012E-007)
div r0.z, r0.z, r1.y
mul r0.z, r0.z, r0.w
mul r0.z, r0.z, l(3.14159274)
mul r0.yz, r1.xxxx, r0.yyzy
max r0.z, r0.z, l(0.000000)
dp3 r0.w, r4.xyzx, r4.xyzx
ne r0.w, r0.w, l(0.000000)
and r0.w, r0.w, l(0x3f800000)
mul r0.z, r0.w, r0.z
mul r1.xyz, r0.yyyy, r2.xyzx
mul r0.yzw, r2.xxyz, r0.zzzz
add r0.x, -r0.x, l(1.000000)
mul r1.w, r0.x, r0.x
mul r1.w, r1.w, r1.w
mul r0.x, r0.x, r1.w
add r2.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, r2.xyzx, r0.xxxx, r4.xyzx
mul r0.xyz, r0.yzwy, r2.xyzx
mad o0.xyz, r5.xyzx, r1.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used