// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 01657972fe50e38f-ps.txt
// 3DMigoto: 01657972fe50e38f |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 142 2 8
//   undeciphered1a: 18
//   Keywords { "FOG_AREA_BOX" "FOG_POINT_LIGHT1" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 528
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 448 [_VolumetricFogSunWorldPos]
//   Vector 464 [_VolumetricFogSunShadowsData]
//   Float 480 [_Jitter]
//   Matrix 384 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 3
//   SetTexture 3 [_MainTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:23:57 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[31], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 20
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r18.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 01657972fe50e38f-ps.txt

mul r18.w, -r18.x, r18.y
mad r19.xyz, -r18.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r19.y
mov r1.xz, r19.xxzx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.y, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.yywy
and r2.y, r2.z, r2.y
lt r2.z, r1.y, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.y, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xwzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[17].xxyz
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r5.xyz, -r2.yzwy, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.yzw, -r2.yyzw, r4.xxyz
  mul r2.yzw, r2.yyzw, r3.xxyz
  min r4.xyz, r5.xyzx, r2.yzwy
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.yzw, r5.xxyz, r2.yyzw
  min r2.yz, r2.zzwz, r2.yyyy
  min r2.y, r2.z, r2.y
  min r2.z, r0.w, cb0[12].z
  min r2.y, r2.z, r2.y
  add r2.y, -r1.w, r2.y
  lt r2.w, l(0.000000), r2.y
  if_nz r2.w
    div r3.xyz, r1.wwww, r3.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    div r1.xy, cb0[18].xzxx, cb0[13].wwww
    log r1.z, r2.y
    mul r1.z, r1.z, l(0.693147182)
    max r1.z, r1.z, l(0.000000)
    mad r1.z, r1.z, cb0[15].x, l(0.100000)
    mul r1.z, r1.z, cb0[13].z
    mul_sat r2.w, r2.z, cb0[15].y
    mul r1.z, r1.z, r2.w
    add r2.z, -r1.w, r2.z
    max r1.z, r1.z, l(0.010000)
    mul r4.xyz, r0.xyzx, r1.zzzz
    div r4.xyz, r4.xyzx, r0.wwww
    div r1.z, r2.y, r1.z
    add r5.xyz, r3.xyzx, -cb0[19].xyzx
    add r6.xyz, r3.xyzx, -cb0[21].xyzx
    mul r7.xz, r4.xxzx, cb0[13].wwww
    mul r2.w, cb0[13].z, cb0[13].y
    div r7.y, r4.y, r2.w
    add r8.xy, r3.xzxx, cb0[14].xzxx
    mul r8.xy, r8.xyxx, cb0[13].wwww
    div r2.w, r3.y, r2.w
    add r8.zw, cb0[14].xxxz, cb0[17].xxxz
    frc r4.w, r2.x
    mad r1.z, r4.w, cb0[30].x, r1.z
    add r3.w, r3.y, cb0[13].x
    mul r9.xyz, r3.wwww, cb0[25].xywx
    mad r9.xyz, cb0[24].xywx, r3.xxxx, r9.xyzx
    mad r9.xyz, cb0[26].xywx, r3.zzzz, r9.xyzx
    add r9.xyz, r9.xyzx, cb0[27].xywx
    div r9.xy, r9.xyxx, r9.zzzz
    mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r3.y, r2.x, cb0[29].y, l(1.000000)
    mul r3.y, r2.y, r3.y
    mul r0.xyz, r0.xyzx, r3.yyyy
    div r0.xyz, r0.xyzx, r0.wwww
    add r0.xyz, r0.xyzx, r3.xwzx
    mul r10.xyz, r0.yyyy, cb0[25].xywx
    mad r10.xyz, cb0[24].xywx, r0.xxxx, r10.xyzx
    mad r10.xyz, cb0[26].xywx, r0.zzzz, r10.xyzx
    add r10.xyz, r10.xyzx, cb0[27].xywx
    div r9.zw, r10.xxxy, r10.zzzz
    mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    add r0.w, -r1.w, cb0[28].w
    mul_sat r0.w, r0.w, l(0.0285714287)
    mul r0.w, r0.w, cb0[29].x
    div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
    ge r2.y, r2.y, r2.z
    and r2.y, r2.y, l(0x3f800000)
    add r9.xy, -r9.zwzz, r9.xyxx
    add r3.xyz, -r0.xyzx, r3.xwzx
    mov r10.xyzw, l(0,0,0,0)
    mov r11.xyz, r5.xyzx
    mov r12.xyz, r6.xyzx
    mov r14.xz, r8.xxyx
    mov r2.z, r1.z
    mov r14.y, r2.w
    mov r13.xyzw, l(0,0,0,0)
    loop
      ge r3.w, l(1.000000), r2.z
      breakc_nz r3.w
      mad r15.xy, r8.zwzz, cb0[13].wwww, -r14.xzxx
      mul r15.xy, r1.xyxx, |r15.xyxx|
      max r3.w, r15.y, r15.x
      sample_l r15.xyzw, r14.xzxx, t1.xyzw, s1, l(0.000000)
      mad r3.w, r3.w, cb0[18].w, |r14.y|
      add r3.w, -r3.w, r15.w
      lt r4.w, l(0.000000), r3.w
      if_nz r4.w
        add r4.w, -r3.w, l(1.000000)
        mul r16.xyz, r4.wwww, cb0[11].xyzx
        mul r16.w, r3.w, l(0.400000)
        mul r3.w, r1.w, r2.z
        mad r17.xy, r3.wwww, r9.xyxx, r9.zwzz
        sample_l r17.xyzw, r17.xyxx, t2.xyzw, s3, l(0.000000)
        dp4 r4.w, r17.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        mad r17.xyz, r3.wwww, r3.xyzx, r0.xyzx
        add r17.xyz, r17.xyzx, -cb0[28].xyzx
        dp3 r3.w, r17.xyzx, r17.xyzx
        sqrt r3.w, r3.w
        add_sat r3.w, -r3.w, r4.w
        mul r4.w, r0.w, r13.w
        add r3.w, r3.w, l(-1.000000)
        mad r4.w, r4.w, r3.w, l(1.000000)
        mad r3.w, cb0[29].z, r3.w, l(1.000000)
        mul r16.xyzw, r3.wwww, r16.xyzw
        dp3 r3.w, r11.xyzx, r11.xyzx
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
        dp3 r5.w, r12.xyzx, r12.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        mul r17.xyz, r3.wwww, cb0[20].xyzx
        mad r17.xyz, cb0[22].xyzx, r5.wwww, r17.xyzx
        mul r17.xyz, r16.wwww, r17.xyzx
        mad r15.xyz, r15.xyzx, r4.wwww, r17.xyzx
        mul r15.xyz, r16.wwww, r15.xyzx
        mul r16.xyz, r15.xyzx, r16.xyzx
        add r3.w, -r13.w, l(1.000000)
        mad r15.xyzw, r16.xyzw, r3.wwww, r13.xyzw
        lt r3.w, l(0.990000), r15.w
        if_nz r3.w
          mov r10.xyzw, r16.xyzw
          mov r13.xyzw, r15.xyzw
          break
        endif
        mov r10.xyzw, r16.xyzw
        mov r13.xyzw, r15.xyzw
      endif
      add r11.xyz, r4.xyzx, r11.xyzx
      add r12.xyz, r4.xyzx, r12.xyzx
      add r2.z, r2.z, l(-1.000000)
      add r14.xyz, r7.xyzx, r14.xyzx
    endloop
    lt r0.x, r13.w, l(0.990000)
    and r0.x, r0.x, l(0x3f800000)
    add r0.y, -r13.w, l(1.000000)
    mul r0.z, r2.z, r2.y
    mul r0.x, r0.y, r0.x
    mul r0.x, r0.z, r0.x
    mad r0.xyzw, r10.xyzw, r0.xxxx, r13.xyzw
    mul r0.xyzw, r0.xyzw, cb0[10].wwww
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xyzw, r1.xxxx
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
mad_sat r0.x, -r0.w, r1.x, l(1.000000)
mad o0.xyz, r3.xyzx, r0.xxxx, r2.xyzx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used