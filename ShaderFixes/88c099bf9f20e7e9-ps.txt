// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 88c099bf9f20e7e9-ps.txt
// 3DMigoto: 88c099bf9f20e7e9 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 2/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 127 2 8
//   undeciphered1a: 24
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_USE_XY_PLANE" "FOG_POINT_LIGHT4" }
//   undeciphered2: 1 2 2 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 592
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_FogPointLightPosition1] 3
//   Vector 352 [_FogPointLightColor1] 3
//   Vector 368 [_FogPointLightPosition2] 3
//   Vector 384 [_FogPointLightColor2] 3
//   Vector 400 [_FogPointLightPosition3] 3
//   Vector 416 [_FogPointLightColor3] 3
//   Vector 432 [_FogPointLightPosition4] 3
//   Vector 448 [_FogPointLightColor4] 3
//   Vector 480 [_SunDir] 3
//   Vector 496 [_SunColor] 3
//   Vector 528 [_FogScatteringData2]
//   Float 544 [_Jitter]
//   Float 560 [dither]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_NoiseTex] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:34:51 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 26
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r24.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 88c099bf9f20e7e9-ps.txt

mul r24.w, -r24.x, r24.y
mad r25.xyz, -r24.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.xyzw, r0.xxxx, r1.xxxx
mad r1.x, cb1[7].x, r0.w, cb1[7].y
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r2.z, -cb0[13].x, r25.z
mov r2.xy, r25.xyxx
mad r1.xyz, v2.xyzx, r1.xxxx, r2.xyzx
add r2.w, r1.z, l(0.000010)
lt r3.xy, cb0[13].yyyy, r2.zwzz
and r3.x, r3.y, r3.x
lt r3.y, r2.z, -cb0[13].y
lt r2.w, r2.w, -cb0[13].y
and r2.w, r2.w, r3.y
or r2.w, r2.w, r3.x
if_z r2.w
  add r1.w, r1.z, l(0.000010)
  add r1.xyz, -r2.xyzx, r1.xywx
  dp3 r1.w, r1.xyzx, r1.xyzx
  sqrt r1.w, r1.w
  add r3.xyz, r2.xyzx, -cb0[17].xyzx
  div r4.xyz, r1.wwww, r1.xyzx
  div r5.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[18].xyzx
  add r6.xyz, -r3.xyzx, -r5.xyzx
  mul r6.xyz, r4.xyzx, r6.xyzx
  add r3.xyz, -r3.xyzx, r5.xyzx
  mul r3.xyz, r3.xyzx, r4.xyzx
  min r5.xyz, r6.xyzx, r3.xyzx
  max r5.xy, r5.yzyy, r5.xxxx
  max r2.w, r5.y, r5.x
  max r2.w, r2.w, l(0.000000)
  max r3.xyz, r6.xyzx, r3.xyzx
  min r3.xy, r3.yzyy, r3.xxxx
  min r3.x, r3.y, r3.x
  min r3.y, r1.w, cb0[12].z
  min r3.x, r3.y, r3.x
  add r3.x, -r2.w, r3.x
  lt r3.z, l(0.000000), r3.x
  if_nz r3.z
    div r4.xyz, r2.wwww, r4.xyzx
    add r2.xyz, r2.xyzx, r4.xyzx
    div r3.zw, cb0[18].xxxy, cb0[13].wwww
    log r4.x, r3.x
    mul r4.x, r4.x, l(0.693147182)
    max r4.x, r4.x, l(0.000000)
    mad r4.x, r4.x, cb0[15].x, l(0.100000)
    mul r4.x, r4.x, cb0[13].z
    mul_sat r4.y, r3.y, cb0[15].y
    mul r4.x, r4.y, r4.x
    add r2.w, -r2.w, r3.y
    max r3.y, r4.x, l(0.010000)
    mul r4.xyz, r1.xyzx, r3.yyyy
    div r4.xyz, r4.xyzx, r1.wwww
    div r3.y, r3.x, r3.y
    add r5.xyz, r2.xyzx, -cb0[19].xyzx
    add r6.xyz, r2.xyzx, -cb0[21].xyzx
    add r7.xyz, r2.xyzx, -cb0[23].xyzx
    add r8.xyz, r2.xyzx, -cb0[25].xyzx
    add r9.xyz, r2.xyzx, -cb0[27].xyzx
    mul r10.xy, r4.xyxx, cb0[13].wwww
    mul r4.w, cb0[13].z, cb0[13].y
    div r10.z, r4.z, r4.w
    add r2.xy, r2.xyxx, cb0[14].xzxx
    mul r2.xy, r2.xyxx, cb0[13].wwww
    div r2.z, r2.z, r4.w
    add r11.xy, cb0[14].xyxx, cb0[17].xyxx
    add r11.zw, cb0[14].xxxy, r25.xxxy
    frc r4.w, cb0[35].x
    mad r3.y, r4.w, cb0[34].x, r3.y
    ge r2.w, r3.x, r2.w
    mov r12.xyzw, l(0,0,0,0)
    mov r13.xyz, r5.xyzx
    mov r14.xyz, r6.xyzx
    mov r15.xyz, r7.xyzx
    mov r16.xyz, r8.xyzx
    mov r17.xyz, r9.xyzx
    mov r3.x, r3.y
    mov r19.xyz, r2.xyzx
    mov r18.xyzw, l(0,0,0,0)
    loop
      ge r4.w, l(1.000000), r3.x
      breakc_nz r4.w
      mad r20.xy, r11.xyxx, cb0[13].wwww, -r19.xyxx
      mul r20.xy, r3.zwzz, |r20.xyxx|
      max r4.w, r20.y, r20.x
      sample_l r20.xyzw, r19.xyxx, t1.xyzw, s0, l(0.000000)
      mad r4.w, r4.w, cb0[18].w, |r19.z|
      add r4.w, -r4.w, r20.w
      mad r21.xy, r11.zwzz, cb0[13].wwww, -r19.xyxx
      dp2 r5.w, r21.xyxx, r21.xyxx
      add r5.w, -r5.w, cb0[12].x
      max r5.w, r5.w, l(0.000000)
      mad r4.w, -r5.w, cb0[12].y, r4.w
      lt r5.w, l(0.000000), r4.w
      if_nz r5.w
        add r5.w, -r4.w, l(1.000000)
        mul r21.xyz, r5.wwww, cb0[11].xyzx
        mul r22.w, r4.w, l(0.400000)
        dp3 r4.w, r13.xyzx, r13.xyzx
        div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
        dp3 r5.w, r14.xyzx, r14.xyzx
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        dp3 r6.w, r15.xyzx, r15.xyzx
        div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
        dp3 r7.w, r16.xyzx, r16.xyzx
        div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
        dp3 r8.w, r17.xyzx, r17.xyzx
        div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
        mul r23.xyz, r7.wwww, cb0[26].xyzx
        mad r23.xyz, cb0[28].xyzx, r8.wwww, r23.xyzx
        mad r23.xyz, cb0[24].xyzx, r6.wwww, r23.xyzx
        mad r23.xyz, cb0[22].xyzx, r5.wwww, r23.xyzx
        mad r23.xyz, cb0[20].xyzx, r4.wwww, r23.xyzx
        mad r20.xyz, r23.xyzx, r22.wwww, r20.xyzx
        mul r20.xyz, r22.wwww, r20.xyzx
        mul r22.xyz, r20.xyzx, r21.xyzx
        add r4.w, -r18.w, l(1.000000)
        mad r20.xyzw, r22.xyzw, r4.wwww, r18.xyzw
        lt r4.w, l(0.990000), r20.w
        if_nz r4.w
          mov r12.xyzw, r22.xyzw
          mov r18.xyzw, r20.xyzw
          break
        endif
        mov r12.xyzw, r22.xyzw
        mov r18.xyzw, r20.xyzw
      endif
      add r13.xyz, r4.xyzx, r13.xyzx
      add r14.xyz, r4.xyzx, r14.xyzx
      add r15.xyz, r4.xyzx, r15.xyzx
      add r16.xyz, r4.xyzx, r16.xyzx
      add r17.xyz, r4.xyzx, r17.xyzx
      add r3.x, r3.x, l(-1.000000)
      add r19.xyz, r10.xyzx, r19.xyzx
    endloop
    lt r2.x, r18.w, l(0.990000)
    and r2.xw, r2.xxxw, l(0x3f800000, 0, 0, 0x3f800000)
    add r2.y, -r18.w, l(1.000000)
    mul r2.z, r3.x, r2.w
    mul r2.x, r2.y, r2.x
    mul r2.x, r2.z, r2.x
    mad r2.xyzw, r12.xyzw, r2.xxxx, r18.xyzw
    div r1.xyz, r1.xyzx, r1.wwww
    dp3 r1.x, r1.xyzx, cb0[30].xyzx
    mul r1.x, r1.x, cb0[33].w
    max r1.x, r1.x, l(0.000000)
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.x, r1.x
    mul r1.x, r2.w, r1.x
    add r1.yzw, -r2.xxyz, cb0[31].xxyz
    mad r2.xyz, r1.xxxx, r1.yzwy, r2.xyzx
    mul o0.xyzw, r2.xyzw, cb0[10].wwww
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
mov o1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used