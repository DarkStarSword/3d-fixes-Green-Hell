// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4bcfccff5962ff04-ps.txt
// 3DMigoto: 4bcfccff5962ff04 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 181 3 13
//   undeciphered1a: 17
//   Keywords { "FOG_VOID_SPHERE" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT0" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 5 2 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 576
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogPointLightPosition0] 3
//   Vector 320 [_FogPointLightColor0] 3
//   Vector 336 [_SunPosition] 3
//   Vector 352 [_SunDir] 3
//   Vector 368 [_SunColor] 3
//   Vector 384 [_FogScatteringData]
//   Vector 400 [_FogScatteringData2]
//   Vector 496 [_VolumetricFogSunWorldPos]
//   Vector 512 [_VolumetricFogSunShadowsData]
//   Float 528 [_Jitter]
//   Matrix 432 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_NoiseTex] 2D 1
//   SetTexture 2 [_VolumetricFogSunDepthTexture] 2D 4
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:59:30 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[34], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 19
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r17.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 4bcfccff5962ff04-ps.txt

mul r17.w, -r17.x, r17.y
mad r18.xyz, -r17.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mov r0.yz, -cb0[13].xxyx
add r1.y, r0.y, r18.y
mov r1.xz, r18.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.x, r2.y, l(0.000010)
mul r0.yw, v1.xxxy, cb1[6].xxxy
dp2 r0.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.ywyy
frc r0.y, r0.y
add r0.y, r0.y, l(-0.500000)
lt r0.w, cb0[13].y, r1.y
lt r1.w, cb0[13].y, r0.x
and r0.w, r0.w, r1.w
lt r1.w, r1.y, r0.z
lt r3.x, r0.x, r0.z
and r1.w, r1.w, r3.x
or r0.w, r0.w, r1.w
if_z r0.w
  add r2.w, r2.y, l(0.000010)
  add r2.xyz, -r1.xyzx, r2.xwzx
  dp3 r0.w, r2.xyzx, r2.xyzx
  sqrt r0.w, r0.w
  dp2 r1.w, r2.xzxx, r2.xzxx
  sqrt r1.w, r1.w
  div r3.xy, r2.xzxx, r1.wwww
  div r1.w, r1.w, r2.y
  max r2.w, r0.z, r1.y
  min r4.z, r2.w, cb0[13].y
  add r2.w, r1.y, -r4.z
  mul r2.w, r1.w, r2.w
  mad r4.xy, -r3.xyxx, r2.wwww, r18.xzxx
  min r2.w, r0.w, cb0[12].z
  add r5.xyz, -r1.xyzx, r4.xzyx
  dp3 r1.x, r5.xyzx, r5.xyzx
  sqrt r1.x, r1.x
  lt r1.z, r1.x, r2.w
  if_nz r1.z
    lt r1.z, l(0.000000), r1.w
    lt r3.z, l(-0.500000), r0.x
    and r1.z, r1.z, r3.z
    lt r3.z, r1.w, l(0.000000)
    lt r0.x, r0.x, l(0.500000)
    and r0.x, r0.x, r3.z
    and r0.x, r0.z, r0.x
    movc r5.y, r1.z, cb0[13].y, r0.x
    add r0.x, -r1.y, r5.y
    mul r0.x, r0.x, r1.w
    mad r5.xz, -r3.xxyx, r0.xxxx, r18.xxzx
    add r1.yzw, r4.xxzy, -r5.xxyz
    dp3 r0.x, r1.yzwy, r1.yzwy
    sqrt r0.x, r0.x
    add r0.z, -r1.x, r2.w
    min r0.x, r0.z, r0.x
    lt r1.y, l(0.000000), r0.x
    if_nz r1.y
      mul r1.yzw, r2.xxyz, r0.xxxx
      div r1.yzw, r1.yyzw, r0.wwww
      add r1.yzw, r1.yyzw, r4.xxzy
      add r1.yzw, -r1.yyzw, cb0[17].xxyz
      dp3 r1.y, r1.yzwy, r1.yzwy
      sqrt r1.y, r1.y
      mad r1.y, r1.y, cb0[18].x, l(-1.000000)
      mad_sat r1.y, cb0[18].w, r1.y, l(1.000000)
      lt r1.z, l(0.000000), r1.y
      if_nz r1.z
        log r1.z, r0.x
        mul r1.z, r1.z, l(0.693147182)
        max r1.z, r1.z, l(0.000000)
        mad r1.z, r1.z, cb0[15].x, l(0.100000)
        mul r1.z, r1.z, cb0[13].z
        mul_sat r1.w, r2.w, cb0[15].y
        mul r1.z, r1.w, r1.z
        max r1.z, r1.z, l(0.010000)
        mul r3.xyz, r1.zzzz, r2.xyzx
        div r3.xyz, r3.xyzx, r0.wwww
        div r1.z, r0.x, r1.z
        add r5.xyz, r4.xzyx, -cb0[19].xyzx
        mul r6.xz, r3.xxzx, cb0[13].wwww
        mul r1.w, cb0[13].z, cb0[13].y
        div r6.y, r3.y, r1.w
        add r7.xy, r4.xyxx, cb0[14].xzxx
        mul r7.xy, r7.xyxx, cb0[13].wwww
        div r1.w, r4.z, r1.w
        frc r2.w, r0.y
        mad r1.z, r2.w, cb0[33].x, r1.z
        add r4.w, r4.z, cb0[13].x
        mul r8.xyz, r4.wwww, cb0[28].xywx
        mad r8.xyz, cb0[27].xywx, r4.xxxx, r8.xyzx
        mad r8.xyz, cb0[29].xywx, r4.yyyy, r8.xyzx
        add r8.xyz, r8.xyzx, cb0[30].xywx
        div r7.zw, r8.xxxy, r8.zzzz
        mad r7.zw, r7.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        mad r2.w, r0.y, cb0[32].y, l(1.000000)
        mul r2.w, r0.x, r2.w
        mul r8.xyz, r2.xyzx, r2.wwww
        div r8.xyz, r8.xyzx, r0.wwww
        add r8.xyz, r4.xwyx, r8.xyzx
        mul r9.xyz, r8.yyyy, cb0[28].xywx
        mad r9.xyz, cb0[27].xywx, r8.xxxx, r9.xyzx
        mad r9.xyz, cb0[29].xywx, r8.zzzz, r9.xyzx
        add r9.xyz, r9.xyzx, cb0[30].xywx
        div r9.xy, r9.xyxx, r9.zzzz
        mad r9.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r2.w, -r1.x, cb0[31].w
        mul_sat r2.w, r2.w, l(0.0285714287)
        mul r2.w, r2.w, cb0[32].x
        div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
        ge r0.x, r0.x, r0.z
        and r0.x, r0.x, l(0x3f800000)
        add r7.zw, r7.zzzw, -r9.xxxy
        add r4.xyz, r4.xwyx, -r8.xyzx
        mov r10.xyzw, l(0,0,0,0)
        mov r11.xyz, r5.xyzx
        mov r13.xz, r7.xxyx
        mov r0.z, r1.z
        mov r13.y, r1.w
        mov r12.xyzw, l(0,0,0,0)
        loop
          ge r4.w, l(1.000000), r0.z
          breakc_nz r4.w
          sample_l r14.xyzw, r13.xzxx, t1.xyzw, s1, l(0.000000)
          add r4.w, -|r13.y|, r14.w
          lt r5.w, l(0.000000), r4.w
          if_nz r5.w
            add r5.w, -r4.w, l(1.000000)
            mul r15.xyz, r5.wwww, cb0[11].xyzx
            mul r15.w, r4.w, l(0.400000)
            mul r4.w, r3.w, r0.z
            mad r9.zw, r4.wwww, r7.zzzw, r9.xxxy
            sample_l r16.xyzw, r9.zwzz, t2.xyzw, s4, l(0.000000)
            dp4 r5.w, r16.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
            div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
            mad r16.xyz, r4.wwww, r4.xyzx, r8.xyzx
            add r16.xyz, r16.xyzx, -cb0[31].xyzx
            dp3 r4.w, r16.xyzx, r16.xyzx
            sqrt r4.w, r4.w
            add_sat r4.w, -r4.w, r5.w
            mul r5.w, r2.w, r12.w
            add r4.w, r4.w, l(-1.000000)
            mad r5.w, r5.w, r4.w, l(1.000000)
            mad r4.w, cb0[32].z, r4.w, l(1.000000)
            mul r15.xyzw, r4.wwww, r15.xyzw
            dp3 r4.w, r11.xyzx, r11.xyzx
            div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
            mul r16.xyz, r4.wwww, cb0[20].xyzx
            mul r16.xyz, r15.wwww, r16.xyzx
            mad r14.xyz, r14.xyzx, r5.wwww, r16.xyzx
            mul r14.xyz, r15.wwww, r14.xyzx
            mul r15.xyz, r14.xyzx, r15.xyzx
            add r4.w, -r12.w, l(1.000000)
            mad r14.xyzw, r15.xyzw, r4.wwww, r12.xyzw
            lt r4.w, l(0.990000), r14.w
            if_nz r4.w
              mov r10.xyzw, r15.xyzw
              mov r12.xyzw, r14.xyzw
              break
            endif
            mov r10.xyzw, r15.xyzw
            mov r12.xyzw, r14.xyzw
          endif
          add r11.xyz, r3.xyzx, r11.xyzx
          add r0.z, r0.z, l(-1.000000)
          add r13.xyz, r6.xyzx, r13.xyzx
        endloop
        lt r1.z, r12.w, l(0.990000)
        and r1.z, r1.z, l(0x3f800000)
        add r1.w, -r12.w, l(1.000000)
        mul r0.x, r0.z, r0.x
        mul r0.z, r1.w, r1.z
        mul r0.x, r0.x, r0.z
        mad r3.xyzw, r10.xyzw, r0.xxxx, r12.xyzw
        div r0.xzw, r2.xxyz, r0.wwww
        dp3 r0.x, r0.xzwx, cb0[22].xyzx
        mul r0.x, r0.x, cb0[25].w
        max r0.x, r0.x, l(0.000000)
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r0.x, r0.x
        mul r0.x, r3.w, r0.x
        add r2.xyz, -r3.xyzx, cb0[23].xyzx
        mad r3.xyz, r0.xxxx, r2.xyzx, r3.xyzx
        mul r2.xyzw, r3.xyzw, cb0[10].wwww
        add r0.x, -r1.x, cb0[12].z
        div_sat r0.x, r0.x, cb0[12].w
        mul r0.x, r0.x, r0.x
        mul r2.xyzw, r0.xxxx, r2.xyzw
        mul r1.xyzw, r1.yyyy, r2.xyzw
      else
        mov r1.xyzw, l(0,0,0,0)
      endif
    else
      mov r1.xyzw, l(0,0,0,0)
    endif
  else
    mov r1.xyzw, l(0,0,0,0)
  endif
else
  mov r1.xyzw, l(0,0,0,0)
endif
mad r0.x, r0.y, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.xxxx, r1.xyzw
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
sample r4.xyzw, v1.zwzz, t4.xyzw, s3
add r1.xyz, -r3.xyzx, r4.xyzx
mad r1.xyz, r2.wwww, r1.xyzx, r3.xyzx
mad_sat r0.x, -r1.w, r0.x, l(1.000000)
mad r0.xzw, r1.xxyz, r0.xxxx, r2.xxyz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[21].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[21].y
add r2.x, -v1.x, cb0[21].x
add r2.y, r1.x, -v1.y
mad r0.y, r0.y, cb0[25].z, l(1.000000)
mul r0.y, r0.y, cb0[24].x
mov r1.xyz, l(0,0,0,0)
mov r3.xy, v1.xyxx
mov r1.w, cb0[25].x
mov r2.z, cb0[24].y
loop
  ge r3.z, l(0.000000), r2.z
  breakc_nz r3.z
  mad r3.xy, r2.xyxx, r0.yyyy, r3.xyxx
  sample_l r4.xyzw, r3.xyxx, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[24].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[25].y
  add r2.z, r2.z, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[24].zzzz, r0.xzwx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used