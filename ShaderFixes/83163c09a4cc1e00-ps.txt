// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 83163c09a4cc1e00-ps.txt
// 3DMigoto: 83163c09a4cc1e00 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 3/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 69 5 4
//   undeciphered1a: 7
//   Keywords { "FOG_HAZE_ON" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 7 2 7 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 416
//   Vector 32 [_MainTex_TexelSize]
//   Vector 80 [_DownsampledDepth_TexelSize]
//   Vector 208 [_FogData]
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogSkyColor]
//   Vector 288 [_SunPosition] 3
//   Vector 336 [_FogScatteringData]
//   Vector 352 [_FogScatteringData2]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_DownsampledDepth] 2D 5
//   SetTexture 2 [_FogDownsampled] 2D 4
//   SetTexture 3 [_MainTex] 2D 0
//   SetTexture 4 [_BlurTex] 2D 6
//   SetTexture 5 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 6 [_NoiseTex] 2D 1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 09:31:20 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[23], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 9
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r7.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 83163c09a4cc1e00-ps.txt

mul r7.w, -r7.x, r7.y
mad r8.xyz, -r7.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
lt r0.y, l(0.000000), cb0[15].z
if_nz r0.y
  mad r0.yz, -cb0[5].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), v1.zzwz
  mov r1.xw, cb0[5].xxxy
  mov r1.yz, l(0,0,0,0)
  add r2.xyzw, r0.yzyz, r1.xyzw
  add r1.zw, r0.yyyz, cb0[5].xxxy
  sample_l r3.xyzw, r0.yzyy, t1.xyzw, s5, l(0.000000)
  sample_l r4.xyzw, r2.xyxx, t1.xyzw, s5, l(0.000000)
  sample_l r5.xyzw, r2.zwzz, t1.xyzw, s5, l(0.000000)
  sample_l r6.xyzw, r1.zwzz, t1.yzwx, s5, l(0.000000)
  mov r6.x, r3.x
  mov r6.y, r4.x
  mov r6.z, r5.x
  add r3.xyzw, r0.xxxx, -r6.xyzw
  lt r4.xyzw, cb0[15].zzzz, |r3.xyzw|
  or r2.xy, r4.zwzz, r4.xyxx
  or r0.w, r2.y, r2.x
  lt r2.x, |r3.y|, |r3.x|
  and r2.x, r2.x, l(0x3f800000)
  add r2.y, -|r3.x|, |r3.y|
  mad r2.y, r2.x, r2.y, |r3.x|
  mad r0.yz, r2.xxxx, r1.xxyx, r0.yyzy
  lt r1.x, |r3.z|, r2.y
  and r1.x, r1.x, l(0x3f800000)
  add r2.xz, -r0.yyzy, r2.zzwz
  mad r0.yz, r1.xxxx, r2.xxzx, r0.yyzy
  add r1.y, -r2.y, |r3.z|
  mad r1.x, r1.x, r1.y, r2.y
  lt r1.x, |r3.w|, r1.x
  and r1.x, r1.x, l(0x3f800000)
  add r1.yz, -r0.yyzy, r1.zzwz
  mad r0.yz, r1.xxxx, r1.yyzy, r0.yyzy
  movc r0.yz, r0.wwww, r0.yyzy, v1.zzwz
else
  mov r0.yz, v1.zzwz
endif
sample_l r1.xyzw, r0.yzyy, t2.xyzw, s4, l(0.000000)
mul r0.yz, v1.xxyx, cb1[6].xxyx
dp2 r0.y, l(2.40845060, 3.25352120, 0.000000, 0.000000), r0.yzyy
frc r0.y, r0.y
add r0.y, r0.y, l(-0.500000)
mul r0.z, r0.y, cb0[15].w
mad r0.w, r0.y, cb0[15].w, l(1.000000)
mul r2.xyzw, r0.wwww, r1.xyzw
sample r3.xyzw, v1.xyxx, t3.xyzw, s0
sample r4.xyzw, v1.zwzz, t4.xyzw, s6
add r1.xyz, -r3.xyzx, r4.xyzx
mad r1.xyz, r2.wwww, r1.xyzx, r3.xyzx
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r3.xyzw, v1.zwzz, t5.xyzw, s3
mad r3.x, cb1[7].x, r3.x, cb1[7].y
div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
min r0.x, r0.x, r3.x
ge r3.x, r0.x, cb0[16].w
if_nz r3.x
  add r3.x, -cb0[13].x, r8.y
  mad r3.yz, v2.xxzx, r0.xxxx, r8.xxzx
  mad r0.x, v2.y, r0.x, r3.x
  add r0.x, r0.x, cb0[13].x
  add r0.x, r0.x, l(0.000010)
  max r0.x, r0.x, l(1.000000)
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul r3.xy, r0.xxxx, r3.yzyy
  mad r3.xy, r3.xyxx, cb0[13].wwww, cb0[16].zzzz
  sample r3.xyzw, r3.xyxx, t6.xyzw, s1
  mad r0.z, r0.z, l(3.000000), r3.w
  mul r0.x, r0.x, cb0[16].x
  mad r0.z, -r0.z, cb0[16].y, l(1.000000)
  mul_sat r0.x, r0.z, r0.x
  mul r0.x, r0.x, cb0[17].w
  add r3.xyz, -r1.xyzx, cb0[17].xyzx
  mad r1.xyz, r0.xxxx, r3.xyzx, r1.xyzx
endif
mad_sat r0.x, -r1.w, r0.w, l(1.000000)
mad r0.xzw, r1.xxyz, r0.xxxx, r2.xxyz
lt r1.x, cb0[2].y, l(0.000000)
add r1.y, -cb0[18].y, l(1.000000)
movc r1.x, r1.x, r1.y, cb0[18].y
add r2.x, -v1.x, cb0[18].x
add r2.y, r1.x, -v1.y
mad r0.y, r0.y, cb0[22].z, l(1.000000)
mul r0.y, r0.y, cb0[21].x
mov r1.xyz, l(0,0,0,0)
mov r3.xy, v1.xyxx
mov r1.w, cb0[22].x
mov r2.z, cb0[21].y
loop
  ge r3.z, l(0.000000), r2.z
  breakc_nz r3.z
  mad r3.xy, r2.xyxx, r0.yyyy, r3.xyxx
  sample_l r4.xyzw, r3.xyxx, t3.xyzw, s0, l(0.000000)
  mul r4.xyz, r1.wwww, r4.xyzx
  mad r1.xyz, r4.xyzx, cb0[21].wwww, r1.xyzx
  mul r1.w, r1.w, cb0[22].y
  add r2.z, r2.z, l(-1.000000)
endloop
mad o0.xyz, r1.xyzx, cb0[21].zzzz, r0.xzwx
mov o0.w, r2.w
ret
// Approximately 0 instruction slots used