// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 318b21cc731e61ce-ps.txt
// 3DMigoto: 318b21cc731e61ce |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 1/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 206 4 11
//   undeciphered1a: 28
//   Keywords { "FOG_DISTANCE_ON" "FOG_AREA_BOX" "FOG_VOID_SPHERE" "FOG_USE_XY_PLANE" "FOG_SCATTERING_ON" "FOG_BLUR_ON" "FOG_POINT_LIGHT5" "FOG_SUN_SHADOWS_ON" "FOG_COMPUTE_DEPTH" }
//   undeciphered2: 1 6 2 6 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 768
//   Vector 32 [_MainTex_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 272 [_FogVoidPosition] 3
//   Vector 288 [_FogVoidData]
//   Vector 304 [_FogAreaPosition] 3
//   Vector 320 [_FogAreaData]
//   Vector 336 [_FogPointLightPosition0] 3
//   Vector 352 [_FogPointLightColor0] 3
//   Vector 368 [_FogPointLightPosition1] 3
//   Vector 384 [_FogPointLightColor1] 3
//   Vector 400 [_FogPointLightPosition2] 3
//   Vector 416 [_FogPointLightColor2] 3
//   Vector 432 [_FogPointLightPosition3] 3
//   Vector 448 [_FogPointLightColor3] 3
//   Vector 464 [_FogPointLightPosition4] 3
//   Vector 480 [_FogPointLightColor4] 3
//   Vector 496 [_FogPointLightPosition5] 3
//   Vector 512 [_FogPointLightColor5] 3
//   Vector 528 [_SunPosition] 3
//   Vector 544 [_SunDir] 3
//   Vector 560 [_SunColor] 3
//   Vector 576 [_FogScatteringData]
//   Vector 592 [_FogScatteringData2]
//   Vector 688 [_VolumetricFogSunWorldPos]
//   Vector 704 [_VolumetricFogSunShadowsData]
//   Float 720 [_Jitter]
//   Matrix 624 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 2
//   SetTexture 1 [_VolumetricFogDepthTexture] 2D 3
//   SetTexture 2 [_NoiseTex] 2D 1
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 5
//   SetTexture 4 [_MainTex] 2D 0
//   SetTexture 5 [_BlurTex] 2D 4
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 08:46:39 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[46], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 30
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r28.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 318b21cc731e61ce-ps.txt

mul r28.w, -r28.x, r28.y
mad r29.xyz, -r28.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t0.xyzw, s2
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample r1.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.y, cb1[7].x, r1.x, cb1[7].y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
min r0.x, r0.y, r0.x
add r1.z, -cb0[13].x, r29.z
mov r1.xy, r29.xyxx
mad r0.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r1.w, r0.z, l(0.000010)
mul r2.xy, v1.xyxx, cb1[6].xyxx
dp2 r2.x, l(2.40845060, 3.25352120, 0.000000, 0.000000), r2.xyxx
frc r2.x, r2.x
add r2.x, r2.x, l(-0.500000)
lt r2.yz, cb0[13].yyyy, r1.zzwz
and r2.y, r2.z, r2.y
lt r2.z, r1.z, -cb0[13].y
lt r1.w, r1.w, -cb0[13].y
and r1.w, r1.w, r2.z
or r1.w, r1.w, r2.y
if_z r1.w
  add r0.w, r0.z, l(0.000010)
  add r0.xyz, -r1.xyzx, r0.xywx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r0.w, r0.w
  add r2.yzw, r1.xxyz, -cb0[19].xxyz
  div r3.xyz, r0.wwww, r0.xyzx
  div r4.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[20].xyzx
  add r5.xyz, -r2.yzwy, -r4.xyzx
  mul r5.xyz, r3.xyzx, r5.xyzx
  add r2.yzw, -r2.yyzw, r4.xxyz
  mul r2.yzw, r2.yyzw, r3.xxyz
  min r4.xyz, r5.xyzx, r2.yzwy
  max r4.xy, r4.yzyy, r4.xxxx
  max r1.w, r4.y, r4.x
  max r1.w, r1.w, l(0.000000)
  max r2.yzw, r5.xxyz, r2.yyzw
  min r2.yz, r2.zzwz, r2.yyyy
  min r2.y, r2.z, r2.y
  min r2.z, r0.w, cb0[12].z
  min r2.y, r2.z, r2.y
  add r2.y, -r1.w, r2.y
  lt r2.w, l(0.000000), r2.y
  if_nz r2.w
    div r3.xyz, r1.wwww, r3.xyzx
    add r3.xyz, r1.xyzx, r3.xyzx
    mul r1.xyz, r0.xyzx, r2.yyyy
    div r1.xyz, r1.xyzx, r0.wwww
    add r1.xyz, r1.xyzx, r3.xyzx
    add r1.xyz, -r1.xyzx, cb0[17].xyzx
    dp3 r1.x, r1.xyzx, r1.xyzx
    sqrt r1.x, r1.x
    mad r1.x, r1.x, cb0[18].x, l(-1.000000)
    mad_sat r1.x, cb0[18].w, r1.x, l(1.000000)
    lt r1.y, l(0.000000), r1.x
    if_nz r1.y
      div r1.yz, cb0[20].xxyx, cb0[13].wwww
      log r2.w, r2.y
      mul r2.w, r2.w, l(0.693147182)
      max r2.w, r2.w, l(0.000000)
      mad r2.w, r2.w, cb0[15].x, l(0.100000)
      mul r2.w, r2.w, cb0[13].z
      mul_sat r4.x, r2.z, cb0[15].y
      mul r2.w, r2.w, r4.x
      add r2.z, -r1.w, r2.z
      max r2.w, r2.w, l(0.010000)
      mul r4.xyz, r0.xyzx, r2.wwww
      div r4.xyz, r4.xyzx, r0.wwww
      div r2.w, r2.y, r2.w
      add r5.xyz, r3.xyzx, -cb0[21].xyzx
      add r6.xyz, r3.xyzx, -cb0[23].xyzx
      add r7.xyz, r3.xyzx, -cb0[25].xyzx
      add r8.xyz, r3.xyzx, -cb0[27].xyzx
      add r9.xyz, r3.xyzx, -cb0[29].xyzx
      add r10.xyz, r3.xyzx, -cb0[31].xyzx
      mul r11.xy, r4.xyxx, cb0[13].wwww
      mul r4.w, cb0[13].z, cb0[13].y
      div r11.z, r4.z, r4.w
      add r12.xy, r3.xyxx, cb0[14].xzxx
      mul r12.xy, r12.xyxx, cb0[13].wwww
      div r4.w, r3.z, r4.w
      add r12.zw, cb0[14].xxxy, cb0[19].xxxy
      add r13.xy, cb0[14].xyxx, r29.xyxx
      frc r5.w, r2.x
      mad r2.w, r5.w, cb0[45].x, r2.w
      add r3.w, r3.z, cb0[13].x
      mul r14.xyz, r3.yyyy, cb0[40].xywx
      mad r14.xyz, cb0[39].xywx, r3.xxxx, r14.xyzx
      mad r14.xyz, cb0[41].xywx, r3.wwww, r14.xyzx
      add r14.xyz, r14.xyzx, cb0[42].xywx
      div r13.zw, r14.xxxy, r14.zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      mad r3.z, r2.x, cb0[44].y, l(1.000000)
      mul r3.z, r2.y, r3.z
      mul r14.xyz, r0.xyzx, r3.zzzz
      div r14.xyz, r14.xyzx, r0.wwww
      add r14.xyz, r3.xywx, r14.xyzx
      mul r15.xyz, r14.yyyy, cb0[40].xywx
      mad r15.xyz, cb0[39].xywx, r14.xxxx, r15.xyzx
      mad r15.xyz, cb0[41].xywx, r14.zzzz, r15.xyzx
      add r15.xyz, r15.xyzx, cb0[42].xywx
      div r15.xy, r15.xyxx, r15.zzzz
      mad r15.xy, r15.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r1.w, -r1.w, cb0[43].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[44].x
      div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
      ge r2.y, r2.y, r2.z
      and r2.y, r2.y, l(0x3f800000)
      add r13.zw, r13.zzzw, -r15.xxxy
      add r3.xyw, r3.xyxw, -r14.xyxz
      mov r16.xyzw, l(0,0,0,0)
      mov r17.xyz, r5.xyzx
      mov r18.xyz, r6.xyzx
      mov r19.xyz, r7.xyzx
      mov r20.xyz, r8.xyzx
      mov r21.xyz, r9.xyzx
      mov r22.xyz, r10.xyzx
      mov r24.xy, r12.xyxx
      mov r2.z, r2.w
      mov r24.z, r4.w
      mov r23.xyzw, l(0,0,0,0)
      loop
        ge r5.w, l(1.000000), r2.z
        breakc_nz r5.w
        mad r15.zw, r12.zzzw, cb0[13].wwww, -r24.xxxy
        mul r15.zw, r1.yyyz, |r15.zzzw|
        max r5.w, r15.w, r15.z
        sample_l r25.xyzw, r24.xyxx, t2.xyzw, s1, l(0.000000)
        mad r5.w, r5.w, cb0[20].w, |r24.z|
        add r5.w, -r5.w, r25.w
        mad r15.zw, r13.xxxy, cb0[13].wwww, -r24.xxxy
        dp2 r6.w, r15.zwzz, r15.zwzz
        add r6.w, -r6.w, cb0[12].x
        max r6.w, r6.w, l(0.000000)
        mad r5.w, -r6.w, cb0[12].y, r5.w
        lt r6.w, l(0.000000), r5.w
        if_nz r6.w
          add r6.w, -r5.w, l(1.000000)
          mul r26.xyz, r6.wwww, cb0[11].xyzx
          mul r26.w, r5.w, l(0.400000)
          mul r5.w, r3.z, r2.z
          mad r15.zw, r5.wwww, r13.zzzw, r15.xxxy
          sample_l r27.xyzw, r15.zwzz, t3.xyzw, s5, l(0.000000)
          dp4 r6.w, r27.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r6.w, l(1.000000, 1.000000, 1.000000, 1.000000), r6.w
          mad r27.xyz, r5.wwww, r3.xywx, r14.xyzx
          add r27.xyz, r27.xyzx, -cb0[43].xyzx
          dp3 r5.w, r27.xyzx, r27.xyzx
          sqrt r5.w, r5.w
          add_sat r5.w, -r5.w, r6.w
          mul r6.w, r1.w, r23.w
          add r5.w, r5.w, l(-1.000000)
          mad r6.w, r6.w, r5.w, l(1.000000)
          mad r5.w, cb0[44].z, r5.w, l(1.000000)
          mul r26.xyzw, r5.wwww, r26.xyzw
          dp3 r5.w, r17.xyzx, r17.xyzx
          div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
          dp3 r7.w, r18.xyzx, r18.xyzx
          div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
          dp3 r8.w, r19.xyzx, r19.xyzx
          div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
          dp3 r9.w, r20.xyzx, r20.xyzx
          div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
          dp3 r10.w, r21.xyzx, r21.xyzx
          div r10.w, l(1.000000, 1.000000, 1.000000, 1.000000), r10.w
          dp3 r11.w, r22.xyzx, r22.xyzx
          div r11.w, l(1.000000, 1.000000, 1.000000, 1.000000), r11.w
          mul r27.xyz, r10.wwww, cb0[30].xyzx
          mad r27.xyz, cb0[32].xyzx, r11.wwww, r27.xyzx
          mad r27.xyz, cb0[28].xyzx, r9.wwww, r27.xyzx
          mad r27.xyz, cb0[26].xyzx, r8.wwww, r27.xyzx
          mad r27.xyz, cb0[24].xyzx, r7.wwww, r27.xyzx
          mad r27.xyz, cb0[22].xyzx, r5.wwww, r27.xyzx
          mul r27.xyz, r26.wwww, r27.xyzx
          mad r25.xyz, r25.xyzx, r6.wwww, r27.xyzx
          mul r25.xyz, r26.wwww, r25.xyzx
          mul r26.xyz, r25.xyzx, r26.xyzx
          add r5.w, -r23.w, l(1.000000)
          mad r25.xyzw, r26.xyzw, r5.wwww, r23.xyzw
          lt r5.w, l(0.990000), r25.w
          if_nz r5.w
            mov r16.xyzw, r26.xyzw
            mov r23.xyzw, r25.xyzw
            break
          endif
          mov r16.xyzw, r26.xyzw
          mov r23.xyzw, r25.xyzw
        endif
        add r17.xyz, r4.xyzx, r17.xyzx
        add r18.xyz, r4.xyzx, r18.xyzx
        add r19.xyz, r4.xyzx, r19.xyzx
        add r20.xyz, r4.xyzx, r20.xyzx
        add r21.xyz, r4.xyzx, r21.xyzx
        add r22.xyz, r4.xyzx, r22.xyzx
        add r2.z, r2.z, l(-1.000000)
        add r24.xyz, r11.xyzx, r24.xyzx
      endloop
      lt r1.y, r23.w, l(0.990000)
      and r1.y, r1.y, l(0x3f800000)
      add r1.z, -r23.w, l(1.000000)
      mul r1.w, r2.z, r2.y
      mul r1.y, r1.z, r1.y
      mul r1.y, r1.w, r1.y
      mad r3.xyzw, r16.xyzw, r1.yyyy, r23.xyzw
      div r0.xyz, r0.xyzx, r0.wwww
      dp3 r0.x, r0.xyzx, cb0[34].xyzx
      mul r0.x, r0.x, cb0[37].w
      max r0.x, r0.x, l(0.000000)
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, r0.x
      mul r0.x, r3.w, r0.x
      add r0.yzw, -r3.xxyz, cb0[35].xxyz
      mad r3.xyz, r0.xxxx, r0.yzwy, r3.xyzx
      mul r0.xyzw, r3.xyzw, cb0[10].wwww
      mul r0.xyzw, r1.xxxx, r0.xyzw
    else
      mov r0.xyzw, l(0,0,0,0)
    endif
  else
    mov r0.xyzw, l(0,0,0,0)
  endif
else
  mov r0.xyzw, l(0,0,0,0)
endif
mad r1.x, r2.x, cb0[15].w, l(1.000000)
mul r3.xyzw, r0.xyzw, r1.xxxx
sample r4.xyzw, v1.xyxx, t4.xyzw, s0
sample r5.xyzw, v1.zwzz, t5.xyzw, s4
add r0.xyz, -r4.xyzx, r5.xyzx
mad r0.xyz, r3.wwww, r0.xyzx, r4.xyzx
mad_sat r0.w, -r0.w, r1.x, l(1.000000)
mad r0.xyz, r0.xyzx, r0.wwww, r3.xyzx
lt r0.w, cb0[2].y, l(0.000000)
add r1.x, -cb0[33].y, l(1.000000)
movc r0.w, r0.w, r1.x, cb0[33].y
add r1.x, -v1.x, cb0[33].x
add r1.y, r0.w, -v1.y
mad r0.w, r2.x, cb0[37].z, l(1.000000)
mul r0.w, r0.w, cb0[36].x
mov r2.xyz, l(0,0,0,0)
mov r1.zw, v1.xxxy
mov r2.w, cb0[37].x
mov r3.x, cb0[36].y
loop
  ge r3.y, l(0.000000), r3.x
  breakc_nz r3.y
  mad r1.zw, r1.xxxy, r0.wwww, r1.zzzw
  sample_l r4.xyzw, r1.zwzz, t4.xyzw, s0, l(0.000000)
  mul r4.xyz, r2.wwww, r4.xyzx
  mad r2.xyz, r4.xyzx, cb0[36].wwww, r2.xyzx
  mul r2.w, r2.w, cb0[37].y
  add r3.x, r3.x, l(-1.000000)
endloop
mad o0.xyz, r2.xyzx, cb0[36].zzzz, r0.xyzx
mov o0.w, r3.w
ret
// Approximately 0 instruction slots used