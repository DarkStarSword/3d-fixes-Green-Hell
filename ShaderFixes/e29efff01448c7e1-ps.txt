// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e29efff01448c7e1-ps.txt
// 3DMigoto: e29efff01448c7e1 |    Unity headers extracted from VolumetricFogAndMist_VolumetricFog
//    Shader "VolumetricFogAndMist/VolumetricFog" {
//      SubShader 1/1 {
//        Pass 4/5 {
//          ZWrite Off
//          Program "fp" {
//            SubProgram "d3d11" {
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from VolumetricFogAndMist_VolumetricFog:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201802150 139 3 12
//   undeciphered1a: 14
//   Keywords { "FOG_OF_WAR_ON" "FOG_AREA_SPHERE" "FOG_SUN_SHADOWS_ON" }
//   undeciphered2: 1 4 2 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 592
//   Vector 64 [_CameraDepthTexture_TexelSize]
//   Float 172 [_FogAlpha]
//   Vector 176 [_Color] 3
//   Vector 192 [_FogDistance]
//   Vector 208 [_FogData]
//   Vector 224 [_FogWindDir] 3
//   Vector 240 [_FogStepping]
//   Vector 256 [_FogSkyData]
//   Vector 272 [_FogAreaPosition] 3
//   Vector 288 [_FogAreaData]
//   Vector 320 [_FogOfWarSize] 3
//   Vector 336 [_FogOfWarCenterAdjusted] 3
//   Vector 368 [_SunDir] 3
//   Vector 384 [_SunColor] 3
//   Vector 416 [_FogScatteringData2]
//   Vector 512 [_VolumetricFogSunWorldPos]
//   Vector 528 [_VolumetricFogSunShadowsData]
//   Float 544 [_Jitter]
//   Matrix 448 [_VolumetricFogSunProj]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 96 [_ScreenParams]
//   Vector 112 [_ZBufferParams]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_FogOfWar] 2D 2
//   SetTexture 2 [_NoiseTex] 2D 0
//   SetTexture 3 [_VolumetricFogSunDepthTexture] 2D 3
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//
// Headers extracted with DarkStarSword's extract_unity55_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Sep 07 10:22:00 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[35], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 16
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r14.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e29efff01448c7e1-ps.txt

mul r14.w, -r14.x, r14.y
mad r15.xyz, -r14.wwww, cb10[0].xyzw, cb1[4].xyzw

mad r0.xyzw, cb0[4].xyxy, l(0.000000, -0.750000, 0.000000, 0.750000), v1.zwzw
sample r1.xyzw, r0.xyxx, t0.xyzw, s1
sample r0.xyzw, r0.zwzz, t0.xyzw, s1
max r0.x, r0.x, r1.x
mad r0.x, cb1[7].x, r0.x, cb1[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r1.y, -cb0[13].x, r15.y
mov r1.xz, r15.xxzx
mad r2.xyz, v2.xyzx, r0.xxxx, r1.xyzx
add r0.y, r2.y, l(0.000010)
lt r0.z, cb0[13].y, r1.y
lt r0.w, cb0[13].y, r0.y
and r0.z, r0.w, r0.z
lt r0.w, r1.y, -cb0[13].y
lt r0.y, r0.y, -cb0[13].y
and r0.y, r0.y, r0.w
or r0.y, r0.y, r0.z
if_z r0.y
  lt r0.x, r0.x, cb0[16].w
  if_nz r0.x
    div r0.xy, r2.xzxx, cb0[20].xzxx
    add r0.xy, r0.xyxx, -cb0[21].xzxx
    sample r0.xyzw, r0.xyxx, t1.wxyz, s2
    ge r0.y, l(0.000000), r0.x
  else
    mov r0.xy, l(1.000000,0,0,0)
  endif
  if_z r0.y
    add r2.w, r2.y, l(0.000010)
    add r0.yzw, -r1.xxyz, r2.xxwz
    dp3 r1.w, r0.yzwy, r0.yzwy
    sqrt r1.w, r1.w
    add r2.xyz, r1.xyzx, -cb0[17].xyzx
    div r3.xyz, r0.yzwy, r1.wwww
    dp3 r2.w, r3.xyzx, r2.xyzx
    dp3 r2.x, r2.xyzx, r2.xyzx
    add r2.x, r2.x, -cb0[18].y
    mad r2.x, r2.w, r2.w, -r2.x
    ge r2.y, r2.x, l(0.000000)
    sqrt r2.z, r2.x
    movc r2.x, r2.y, r2.z, r2.x
    add r2.y, -r2.x, -r2.w
    max r2.y, r2.y, l(0.000000)
    min r2.z, r1.w, cb0[12].z
    add r2.x, r2.x, -r2.w
    min r2.x, r2.z, r2.x
    add r2.x, -r2.y, r2.x
    ge r2.w, r2.x, l(0.000000)
    if_nz r2.w
      mul r4.xy, v1.xyxx, cb1[6].xyxx
      dp2 r2.w, l(2.40845060, 3.25352120, 0.000000, 0.000000), r4.xyxx
      frc r2.w, r2.w
      add r2.w, r2.w, l(-0.500000)
      mad r4.xyz, r3.xyzx, r2.yyyy, r1.xyzx
      log r1.x, r2.x
      mul r1.x, r1.x, l(0.693147182)
      max r1.x, r1.x, l(0.000000)
      mad r1.x, r1.x, cb0[15].x, l(0.100000)
      mul r1.x, r1.x, cb0[13].z
      mul_sat r1.y, r2.z, cb0[15].y
      mul r1.x, r1.y, r1.x
      add r1.y, -r2.y, r2.z
      max r1.x, r1.x, l(0.010000)
      mul r5.xyz, r0.yzwy, r1.xxxx
      div r5.xyz, r5.xyzx, r1.wwww
      div r1.x, r2.x, r1.x
      mul r6.xz, r5.xxzx, cb0[13].wwww
      mul r1.z, cb0[13].z, cb0[13].y
      div r6.y, r5.y, r1.z
      add r5.xy, r4.xzxx, cb0[14].xzxx
      mul r5.xy, r5.xyxx, cb0[13].wwww
      div r1.z, r4.y, r1.z
      add r5.zw, cb0[14].xxxz, cb0[17].xxxz
      frc r2.z, r2.w
      mad r1.x, r2.z, cb0[34].x, r1.x
      add r4.w, r4.y, cb0[13].x
      mul r7.xyz, r4.wwww, cb0[29].xywx
      mad r7.xyz, cb0[28].xywx, r4.xxxx, r7.xyzx
      mad r7.xyz, cb0[30].xywx, r4.zzzz, r7.xyzx
      add r7.xyz, r7.xyzx, cb0[31].xywx
      div r7.xy, r7.xyxx, r7.zzzz
      mad r7.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mad r2.z, r2.w, cb0[33].y, l(1.000000)
      mul r2.z, r2.z, r2.x
      mul r0.yzw, r0.yyzw, r2.zzzz
      div r0.yzw, r0.yyzw, r1.wwww
      add r0.yzw, r0.yyzw, r4.xxwz
      mul r8.xyz, r0.zzzz, cb0[29].xywx
      mad r8.xyz, cb0[28].xywx, r0.yyyy, r8.xyzx
      mad r8.xyz, cb0[30].xywx, r0.wwww, r8.xyzx
      add r8.xyz, r8.xyzx, cb0[31].xywx
      div r2.zw, r8.xxxy, r8.zzzz
      mad r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r1.w, -r2.y, cb0[32].w
      mul_sat r1.w, r1.w, l(0.0285714287)
      mul r1.w, r1.w, cb0[33].x
      div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
      ge r1.y, r2.x, r1.y
      and r1.y, r1.y, l(0x3f800000)
      add r7.xy, -r2.zwzz, r7.xyxx
      add r4.xyz, -r0.yzwy, r4.xwzx
      mov r8.xyzw, l(0,0,0,0)
      mov r10.xz, r5.xxyx
      mov r2.x, r1.x
      mov r10.y, r1.z
      mov r9.xyzw, l(0,0,0,0)
      loop
        ge r3.w, l(1.000000), r2.x
        breakc_nz r3.w
        mad r7.zw, r5.zzzw, cb0[13].wwww, -r10.xxxz
        mul r7.zw, r7.zzzw, cb0[18].xxxx
        dp2 r3.w, r7.zwzz, r7.zwzz
        sample_l r11.xyzw, r10.xzxx, t2.xyzw, s0, l(0.000000)
        mad r3.w, r3.w, cb0[18].w, |r10.y|
        add r3.w, -r3.w, r11.w
        lt r4.w, l(0.000000), r3.w
        if_nz r4.w
          add r4.w, -r3.w, l(1.000000)
          mul r12.xyz, r4.wwww, cb0[11].xyzx
          mul r12.w, r3.w, l(0.400000)
          mul r3.w, r2.y, r2.x
          mad r7.zw, r3.wwww, r7.xxxy, r2.zzzw
          sample_l r13.xyzw, r7.zwzz, t3.xyzw, s3, l(0.000000)
          dp4 r4.w, r13.xyzw, l(1.000000, 0.00392156886, 0.0000153787005, 6.030862920E-008)
          div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.w
          mad r13.xyz, r3.wwww, r4.xyzx, r0.yzwy
          add r13.xyz, r13.xyzx, -cb0[32].xyzx
          dp3 r3.w, r13.xyzx, r13.xyzx
          sqrt r3.w, r3.w
          add_sat r3.w, -r3.w, r4.w
          mul r4.w, r1.w, r9.w
          add r3.w, r3.w, l(-1.000000)
          mad r4.w, r4.w, r3.w, l(1.000000)
          mul r11.xyz, r4.wwww, r11.xyzx
          mad r3.w, cb0[33].z, r3.w, l(1.000000)
          mul r12.xyzw, r3.wwww, r12.xyzw
          mul r11.xyz, r11.xyzx, r12.wwww
          mul r12.xyz, r11.xyzx, r12.xyzx
          add r3.w, -r9.w, l(1.000000)
          mad r11.xyzw, r12.xyzw, r3.wwww, r9.xyzw
          lt r3.w, l(0.990000), r11.w
          if_nz r3.w
            mov r8.xyzw, r12.xyzw
            mov r9.xyzw, r11.xyzw
            break
          endif
          mov r8.xyzw, r12.xyzw
          mov r9.xyzw, r11.xyzw
        endif
        add r2.x, r2.x, l(-1.000000)
        add r10.xyz, r6.xyzx, r10.xyzx
      endloop
      lt r0.y, r9.w, l(0.990000)
      and r0.y, r0.y, l(0x3f800000)
      add r0.z, -r9.w, l(1.000000)
      mul r0.w, r1.y, r2.x
      mul r0.y, r0.z, r0.y
      mul r0.y, r0.w, r0.y
      mad r1.xyzw, r8.xyzw, r0.yyyy, r9.xyzw
      dp3 r0.y, r3.xyzx, cb0[23].xyzx
      mul r0.y, r0.y, cb0[26].w
      max r0.y, r0.y, l(0.000000)
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r0.y, r0.y
      mul r0.y, r1.w, r0.y
      add r2.xyz, -r1.xyzx, cb0[24].xyzx
      mad r1.xyz, r0.yyyy, r2.xyzx, r1.xyzx
      mul r1.xyzw, r1.xyzw, cb0[10].wwww
      mul o0.xyzw, r0.xxxx, r1.xyzw
    else
      mov o0.xyzw, l(0,0,0,0)
    endif
  else
    mov o0.xyzw, l(0,0,0,0)
  endif
else
  mov o0.xyzw, l(0,0,0,0)
endif
ret
// Approximately 0 instruction slots used